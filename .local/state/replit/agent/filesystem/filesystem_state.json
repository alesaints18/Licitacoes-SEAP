{"file_contents":{"DOCUMENTACAO_SISTEMA.md":{"content":"# Documentação do Sistema de Controle de Processos de Licitação\n\n## Visão Geral\n\nO Sistema de Controle de Processos de Licitação é uma aplicação web desenvolvida para a Secretaria de Administração Penitenciária, destinada a gerenciar e monitorar processos licitatórios de forma eficiente e transparente.\n\n## Arquitetura\n\nA aplicação utiliza uma arquitetura moderna de três camadas:\n\n1. **Frontend**: Desenvolvido em React com TypeScript, utilizando biblioteca de componentes Shadcn UI\n2. **Backend**: API REST em Node.js/Express com TypeScript\n3. **Banco de Dados**: PostgreSQL gerenciado pelo Drizzle ORM\n\n## Recursos Principais\n\n### 1. Gestão de Usuários\n\n- Sistema de autenticação seguro com senhas criptografadas\n- Diferentes níveis de acesso (administrador e usuário comum)\n- Fluxo de aprovação para novos cadastros\n- Gerenciamento de perfis e informações pessoais\n\n### 2. Dashboard Analítico\n\n- Visualização estatística do estado dos processos\n- Métricas de desempenho e acompanhamento de metas\n- Filtragem avançada por diversos parâmetros\n- Gráficos interativos para análise de dados\n\n### 3. Gestão de Processos\n\n- Cadastro detalhado de processos licitatórios\n- Acompanhamento do fluxo de tramitação\n- Registro de datas, responsáveis e documentos\n- Status e classificação por prioridade\n\n### 4. Etapas do Processo\n\n- Definição de etapas personalizadas para cada processo\n- Atribuição de responsáveis e departamentos\n- Acompanhamento de prazos e status\n- Registro de observações e documentos\n\n### 5. Relatórios\n\n- Geração de relatórios customizados\n- Exportação em formato PDF\n- Visualizações gráficas e tabulares\n- Análises comparativas e históricas\n\n### 6. Modalidades e Fontes de Recursos\n\n- Gestão de modalidades de licitação\n- Registro de fontes de recursos\n- Vinculação aos processos\n- Análise de distribuição por fonte\n\n### 7. Personalização\n\n- Interface adaptável (modo claro/escuro)\n- Configurações de metas mensais\n- Preferências de usuário\n- Interface responsiva para diferentes dispositivos\n\n## Tecnologias Utilizadas\n\n- **Frontend**:\n  - React 18\n  - TypeScript\n  - TanStack Query para gerenciamento de estado\n  - Recharts para visualizações gráficas\n  - Tailwind CSS para estilização\n  - Radix UI para componentes acessíveis\n\n- **Backend**:\n  - Node.js\n  - Express\n  - TypeScript\n  - Passport.js para autenticação\n  - Zod para validação de dados\n\n- **Banco de Dados**:\n  - PostgreSQL\n  - Drizzle ORM\n  - Drizzle Kit para migrações\n\n- **Ferramentas de Desenvolvimento**:\n  - Vite\n  - ESBuild\n  - TypeScript\n  - TanStack Query DevTools\n\n## Segurança\n\nO sistema implementa diversas medidas de segurança:\n\n- Autenticação baseada em sessão\n- Armazenamento seguro de senhas com bcrypt\n- Validação de entrada em todos os formulários\n- Proteção de rotas sensíveis\n- Prevenção contra ataques comuns (CSRF, XSS)\n- Sanitização de dados\n\n## Implantação Recomendada\n\n### Requisitos de Servidor\n\n- **Hardware Recomendado**:\n  - CPU: 2+ núcleos\n  - RAM: 4GB+\n  - Armazenamento: 20GB+ SSD\n\n- **Software**:\n  - Sistema Operacional: Linux (recomendado Ubuntu 20.04+)\n  - Node.js 18+\n  - PostgreSQL 14+\n  - Nginx como proxy reverso\n\n### Escalabilidade\n\nPara implantações maiores, considere:\n\n- Configuração de balanceamento de carga\n- Otimizações de banco de dados\n- Implementação de CDN para assets estáticos\n- Monitoramento e alerta de performance\n\n## Manutenção e Suporte\n\nRecomendações para manutenção contínua:\n\n- Backups diários do banco de dados\n- Atualizações regulares das dependências\n- Monitoramento de logs e erros\n- Testes periódicos de segurança\n- Plano de recuperação de desastres\n\n## Limitações Conhecidas\n\n- O sistema está otimizado para navegadores modernos (Chrome, Firefox, Edge)\n- A exportação de PDF com grande volume de dados pode ser lenta\n- Relatórios muito complexos podem impactar o desempenho\n\n## Evolução Futura\n\nSugestões para próximas versões:\n\n- Integração com sistemas externos (SEI, ComprasNet)\n- Aplicativo móvel para notificações e aprovações\n- Assinatura digital de documentos\n- Geração automatizada de editais\n- Implementação de workflow configurável","size_bytes":4242},"GUIA_IMPLANTACAO.md":{"content":"# Guia de Implantação - Sistema de Controle de Processos de Licitação\n\nEste documento apresenta instruções para implantação, configuração e utilização do Sistema de Controle de Processos de Licitação desenvolvido para a Secretaria de Administração Penitenciária.\n\n## Sumário\n\n1. [Requisitos do Sistema](#requisitos-do-sistema)\n2. [Instalação](#instalação)\n3. [Configuração](#configuração)\n4. [Inicialização](#inicialização)\n5. [Acesso ao Sistema](#acesso-ao-sistema)\n6. [Guia de Usuário](#guia-de-usuário)\n7. [Manutenção](#manutenção)\n8. [Solução de Problemas](#solução-de-problemas)\n\n## Requisitos do Sistema\n\n- Node.js 18.x ou superior\n- PostgreSQL 14.x ou superior\n- Acesso à internet para carregamento de dependências\n\n## Instalação\n\n1. Clone o repositório para o servidor de destino:\n   ```bash\n   git clone <URL-DO-REPOSITORIO>\n   cd <DIRETORIO-DO-PROJETO>\n   ```\n\n2. Instale as dependências:\n   ```bash\n   npm install\n   ```\n\n3. Construa a aplicação para produção:\n   ```bash\n   npm run build\n   ```\n\n## Configuração\n\n1. Crie um arquivo `.env` na raiz do projeto com as seguintes variáveis:\n\n   ```env\n   DATABASE_URL=postgresql://usuario:senha@localhost:5432/nome_do_banco\n   SESSION_SECRET=chave_secreta_para_sessoes\n   NODE_ENV=production\n   PORT=5000\n   ```\n\n   Substitua os valores pelos correspondentes ao seu ambiente:\n   - `DATABASE_URL`: URL de conexão com o banco de dados PostgreSQL\n   - `SESSION_SECRET`: String aleatória e segura para criptografia das sessões\n   - `PORT`: Porta em que o servidor será executado (padrão: 5000)\n\n2. Execute as migrações do banco de dados:\n   ```bash\n   npm run db:push\n   ```\n\n## Inicialização\n\n1. Para iniciar o sistema em modo produção:\n   ```bash\n   npm start\n   ```\n\n2. Para manter o serviço em execução contínua, recomendamos o uso de um gerenciador de processos como PM2:\n   ```bash\n   npm install -g pm2\n   pm2 start dist/index.js --name \"licitacao-sistema\"\n   pm2 save\n   pm2 startup\n   ```\n\n## Acesso ao Sistema\n\n1. O sistema estará disponível em:\n   ```\n   http://[IP-OU-DOMINIO]:[PORTA]\n   ```\n\n2. Credenciais padrão para primeiro acesso:\n   - Usuário: admin\n   - Senha: admin123\n\n3. **IMPORTANTE**: Altere a senha padrão do usuário administrador após o primeiro acesso.\n\n## Guia de Usuário\n\n### Tela de Login\n\n- Acesse o sistema com suas credenciais\n- Utilize o botão de tema para alternar entre modo claro e escuro\n- Novos usuários podem se cadastrar, mas precisam ser aprovados por um administrador\n\n### Dashboard\n\n- Visualize estatísticas dos processos de licitação\n- Defina metas mensais (apenas administradores)\n- Filtre dados por número de processo, modalidade, fonte de recurso e responsável\n\n### Processos\n\n- Visualize, adicione, edite e exclua processos de licitação\n- Acompanhe o status e histórico de cada processo\n- Gerencie etapas e documentos associados\n\n### Relatórios\n\n- Gere relatórios personalizados (apenas administradores)\n- Exporte dados em formato PDF\n- Visualize gráficos e estatísticas avançadas\n\n### Configurações\n\n- Gerencie usuários e permissões (apenas administradores)\n- Configure modalidades de licitação e fontes de recursos\n- Ajuste preferências do sistema\n\n## Manutenção\n\n1. Backup do banco de dados:\n   ```bash\n   pg_dump -U usuario -d nome_do_banco > backup_$(date +%Y%m%d).sql\n   ```\n\n2. Atualização do sistema:\n   ```bash\n   git pull\n   npm install\n   npm run build\n   pm2 restart licitacao-sistema\n   ```\n\n## Solução de Problemas\n\n### O sistema não inicia\n\n1. Verifique se o arquivo `.env` está configurado corretamente\n2. Confirme se o banco de dados está acessível\n3. Verifique os logs de erro:\n   ```bash\n   pm2 logs licitacao-sistema\n   ```\n\n### Erro de autenticação\n\n1. Verifique se o banco de dados possui o usuário administrador padrão\n2. Se necessário, reinicie a senha do administrador via banco de dados:\n   ```sql\n   UPDATE users SET password = '$2b$10$s1Nrh44aOc8jCfDxXfqIRuHQVvWWs7K0y2yKpjRlIXDxM9eRmMO/2' WHERE username = 'admin';\n   ```\n\n### Problemas de desempenho\n\n1. Verifique o uso de recursos do servidor (CPU, memória, disco)\n2. Considere otimizar o banco de dados:\n   ```sql\n   VACUUM ANALYZE;\n   ```\n\nPara suporte adicional, entre em contato com a equipe de desenvolvimento.","size_bytes":4313},"RELATORIO_DESENVOLVIMENTO_26-28_MAI_2025.md":{"content":"# RELATÓRIO DE DESENVOLVIMENTO - SISTEMA DE CONTROLE DE PROCESSOS DE LICITAÇÃO\n**Período:** 26/05/2025 - 28/05/2025  \n**Cliente:** Secretaria de Estado da Administração Penitenciária - PB  \n**Sistema:** Controle de Processos de Licitação Web\n\n---\n\n## RESUMO EXECUTIVO\n\nDurante o período de 26 a 28 de maio de 2025, foram realizadas implementações significativas no sistema de controle de processos de licitação, focando em:\n- Correções críticas de visibilidade por departamento\n- Otimização da interface de usuário\n- Implementação de controles de acesso administrativo\n- Limpeza e otimização do sistema para produção\n\n---\n\n## PRINCIPAIS IMPLEMENTAÇÕES REALIZADAS\n\n### 1. CORREÇÃO CRÍTICA DE VISIBILIDADE POR DEPARTAMENTO\n\n**Problema Identificado:**\n- Processos apareciam para todos os usuários independente do departamento após deploy\n- Falta de controle de acesso adequado por setor\n\n**Soluções Implementadas:**\n- ✅ Implementação de filtro duplo de segurança por departamento\n- ✅ Mapeamento correto de departamentos incluindo \"Divisão de Licitação\"\n- ✅ Validação crítica para prevenir falhas após deploy\n- ✅ Administradores agora têm acesso total a todos os processos\n- ✅ Usuários comuns mantêm visibilidade restrita ao seu departamento\n\n**Arquivos Modificados:**\n- `server/routes.ts` - Lógica de filtragem por departamento\n- `server/storage.ts` - Interface de storage com filtros\n\n### 2. CONTROLE DE ACESSO ADMINISTRATIVO\n\n**Implementações:**\n- ✅ Administradores visualizam todos os processos sem restrição de departamento\n- ✅ Usuários comuns mantêm acesso restrito ao departamento atual\n- ✅ Dupla validação de segurança para garantir integridade dos dados\n\n**Benefícios:**\n- Supervisão completa para administradores\n- Privacidade e segurança entre departamentos\n- Controle granular de permissões\n\n### 3. OTIMIZAÇÃO DO SISTEMA PARA PRODUÇÃO\n\n**Limpeza de Logs:**\n- ✅ Removidos logs excessivos de autenticação\n- ✅ Eliminados logs de serialização/deserialização\n- ✅ Sistema funciona silenciosamente em produção\n- ✅ Mantidos apenas logs essenciais para debugging\n\n**Performance:**\n- ✅ Redução significativa de ruído no console\n- ✅ Melhoria na experiência do usuário\n- ✅ Sistema otimizado para deploy\n\n### 4. MELHORIAS NA INTERFACE DE USUÁRIO\n\n**Dashboard:**\n- ✅ Visualização clara de processos por departamento\n- ✅ Filtragem automática baseada no usuário logado\n- ✅ Interface responsiva e limpa\n\n**Sistema de Navegação:**\n- ✅ Sidebar organizada com acesso rápido às funcionalidades\n- ✅ Navegação mobile otimizada\n- ✅ Feedback visual adequado\n\n---\n\n## ESTRUTURA TÉCNICA IMPLEMENTADA\n\n### Arquitetura de Segurança por Departamento\n\n```typescript\n// Lógica de Filtragem Implementada\nif (userRole === 'admin') {\n  // Admin vê todos os processos\n  const processes = await storage.getProcesses(filters);\n  return res.json(processes);\n} else {\n  // Usuários comuns: filtro por departamento\n  const filters = {\n    ...baseFilters,\n    currentDepartmentId: userDepartmentId\n  };\n  \n  const filteredProcesses = allProcesses.filter(process => {\n    return process.currentDepartmentId === userDepartmentId;\n  });\n}\n```\n\n### Mapeamento de Departamentos\n\n```typescript\nconst departmentIdMap = {\n  \"TI\": 1,\n  \"Licitações\": 2,\n  \"Divisão de Licitação\": 2,\n  \"Jurídico\": 3,\n  \"Financeiro\": 4,\n  \"Administrativo\": 5\n};\n```\n\n---\n\n## FUNCIONALIDADES PRINCIPAIS DO SISTEMA\n\n### 1. Gestão de Processos\n- ✅ Criação, edição e exclusão de processos\n- ✅ Controle de status (Draft, Em Andamento, Concluído, Cancelado)\n- ✅ Transferência entre departamentos\n- ✅ Sistema de checklist por fase\n\n### 2. Controle de Acesso\n- ✅ Autenticação com Passport.js\n- ✅ Roles (Admin/Comum)\n- ✅ Visibilidade por departamento\n- ✅ Aprovação de novos usuários por admin\n\n### 3. Relatórios e Analytics\n- ✅ Dashboard com gráficos em tempo real\n- ✅ Estatísticas por fonte de recursos\n- ✅ Análise por responsável\n- ✅ Exportação em PDF\n\n### 4. Fluxo de Licitação\n- ✅ Visualização do fluxograma oficial\n- ✅ Checklist por fase do processo\n- ✅ Transferência automática entre departamentos\n- ✅ Controle de prazos e deadlines\n\n---\n\n## TECNOLOGIAS UTILIZADAS\n\n### Backend\n- **Node.js** com TypeScript\n- **Express.js** para API REST\n- **Passport.js** para autenticação\n- **PostgreSQL** com Drizzle ORM\n- **WebSocket** para comunicação em tempo real\n\n### Frontend\n- **React** com TypeScript\n- **Vite** para build e desenvolvimento\n- **TailwindCSS** + shadcn/ui para interface\n- **React Query** para gerenciamento de estado\n- **Wouter** para roteamento\n\n### Infraestrutura\n- **Replit** como plataforma de deploy\n- **PostgreSQL** database nativo\n- **WebSocket** para notificações\n\n---\n\n## MELHORIAS DE SEGURANÇA IMPLEMENTADAS\n\n### 1. Validação de Departamento\n```typescript\n// Validação crítica para deploy\nif (!userDepartmentId) {\n  return res.status(403).json({ \n    message: \"Departamento não reconhecido\" \n  });\n}\n```\n\n### 2. Filtro Duplo de Segurança\n- Filtro no nível do banco de dados\n- Filtro adicional na aplicação\n- Verificação de permissões por usuário\n\n### 3. Controle de Sessão\n- Serialização/deserialização otimizada\n- Gestão de sessões segura\n- Logout automático em caso de erro\n\n---\n\n## RESULTADOS ALCANÇADOS\n\n### ✅ **Funcionalidade**\n- Sistema totalmente funcional com visibilidade por departamento\n- Administradores com acesso completo\n- Transferências entre setores funcionando\n- Checklist automatizado por fase\n\n### ✅ **Segurança**\n- Controle de acesso robusto\n- Isolamento entre departamentos\n- Validações em múltiplas camadas\n- Prevenção de vazamento de dados\n\n### ✅ **Performance**\n- Sistema otimizado para produção\n- Logs limpos e organizados\n- Interface responsiva\n- Carregamento rápido\n\n### ✅ **Usabilidade**\n- Interface intuitiva e limpa\n- Navegação fluida\n- Feedback visual adequado\n- Experiência consistente\n\n---\n\n## TESTES REALIZADOS\n\n### Testes de Segurança\n- ✅ Verificação de visibilidade por departamento\n- ✅ Teste de acesso administrativo\n- ✅ Validação de transferências entre setores\n- ✅ Controle de permissões por usuário\n\n### Testes de Funcionalidade\n- ✅ Criação e edição de processos\n- ✅ Sistema de checklist\n- ✅ Relatórios e analytics\n- ✅ Exportação de dados\n\n### Testes de Deploy\n- ✅ Funcionamento após deploy\n- ✅ Persistência de dados\n- ✅ Configurações de produção\n- ✅ Performance em ambiente real\n\n---\n\n## PRÓXIMOS PASSOS RECOMENDADOS\n\n### Curto Prazo\n1. **Monitoramento** - Acompanhar uso em produção\n2. **Backup** - Implementar rotinas de backup automático\n3. **Documentação** - Criar manual de usuário\n\n### Médio Prazo\n1. **Relatórios Avançados** - Implementar mais tipos de relatório\n2. **Notificações** - Sistema de alertas automáticos\n3. **Integração** - APIs para sistemas externos\n\n### Longo Prazo\n1. **Mobile App** - Aplicativo mobile nativo\n2. **BI Dashboard** - Painéis executivos avançados\n3. **Workflow Engine** - Automatização de processos\n\n---\n\n## CONCLUSÃO\n\nO sistema de controle de processos de licitação foi significativamente aprimorado durante o período analisado. As principais correções de segurança e visibilidade por departamento foram implementadas com sucesso, garantindo que:\n\n- **Administradores** têm acesso completo a todos os processos\n- **Usuários comuns** veem apenas processos do seu departamento\n- **Sistema** funciona corretamente mesmo após deploy\n- **Interface** está otimizada e limpa para produção\n\nO sistema está agora pronto para uso em produção, com todas as funcionalidades essenciais implementadas e testadas.\n\n---\n\n**Data do Relatório:** 28/05/2025  \n**Desenvolvedor:** Sistema Automatizado de Desenvolvimento  \n**Status:** Concluído com Sucesso ✅","size_bytes":7909},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"export-report-pdf.js":{"content":"import fs from 'fs';\nimport htmlPdf from 'html-pdf-node';\n\nasync function exportReportToPDF() {\n  try {\n    // Lê o conteúdo do relatório markdown\n    const markdownContent = fs.readFileSync('RELATORIO_DESENVOLVIMENTO_26-28_MAI_2025.md', 'utf8');\n    \n    // Converte markdown para HTML com estilos profissionais\n    const htmlContent = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Relatório de Desenvolvimento - Sistema de Licitação</title>\n  <style>\n    * { box-sizing: border-box; }\n    body {\n      font-family: 'Segoe UI', Arial, sans-serif;\n      line-height: 1.6;\n      margin: 0;\n      padding: 40px;\n      color: #1f2937;\n      background: white;\n    }\n    .header {\n      text-align: center;\n      border-bottom: 3px solid #1e40af;\n      padding-bottom: 30px;\n      margin-bottom: 40px;\n    }\n    h1 {\n      color: #1e40af;\n      font-size: 32px;\n      margin: 0;\n      font-weight: 700;\n    }\n    .subtitle {\n      color: #6b7280;\n      font-size: 18px;\n      margin-top: 10px;\n    }\n    h2 {\n      color: #1e40af;\n      font-size: 24px;\n      margin-top: 40px;\n      margin-bottom: 20px;\n      border-left: 4px solid #1e40af;\n      padding-left: 15px;\n    }\n    h3 {\n      color: #374151;\n      font-size: 20px;\n      margin-top: 30px;\n      margin-bottom: 15px;\n    }\n    .info-box {\n      background: #f8fafc;\n      border: 1px solid #e2e8f0;\n      border-radius: 8px;\n      padding: 25px;\n      margin: 25px 0;\n    }\n    .success-box {\n      background: #f0fdf4;\n      border-left: 5px solid #22c55e;\n      padding: 20px;\n      margin: 20px 0;\n    }\n    .code-block {\n      background: #1f2937;\n      color: #f9fafb;\n      padding: 20px;\n      border-radius: 8px;\n      font-family: 'Consolas', 'Monaco', monospace;\n      font-size: 13px;\n      margin: 15px 0;\n      overflow-x: auto;\n    }\n    .check-item {\n      color: #059669;\n      font-weight: 600;\n      margin: 8px 0;\n    }\n    .tech-list {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n      gap: 15px;\n      margin: 20px 0;\n    }\n    .tech-item {\n      background: #f1f5f9;\n      padding: 15px;\n      border-radius: 6px;\n      border-left: 3px solid #3b82f6;\n    }\n    .section {\n      margin: 40px 0;\n      page-break-inside: avoid;\n    }\n    .footer {\n      margin-top: 60px;\n      text-align: center;\n      padding-top: 30px;\n      border-top: 2px solid #e5e7eb;\n      color: #6b7280;\n      font-size: 14px;\n    }\n    .highlight {\n      background: #fef3c7;\n      padding: 2px 6px;\n      border-radius: 4px;\n    }\n    ul {\n      list-style-type: none;\n      padding-left: 0;\n    }\n    li {\n      margin: 10px 0;\n      padding-left: 25px;\n      position: relative;\n    }\n    li:before {\n      content: \"▶\";\n      color: #3b82f6;\n      position: absolute;\n      left: 0;\n    }\n    .conclusion {\n      background: #1e40af;\n      color: white;\n      padding: 30px;\n      border-radius: 10px;\n      margin: 40px 0;\n    }\n    @media print {\n      body { padding: 20px; }\n      .section { page-break-inside: avoid; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <h1>RELATÓRIO DE DESENVOLVIMENTO</h1>\n    <div class=\"subtitle\">Sistema de Controle de Processos de Licitação</div>\n    <div class=\"subtitle\">Período: 26/05/2025 - 28/05/2025</div>\n    <div class=\"subtitle\">SEAP-PB | Secretaria de Estado da Administração Penitenciária</div>\n  </div>\n\n${markdownContent\n  .replace(/^# (.*)$/gm, '<h1>$1</h1>')\n  .replace(/^## (.*)$/gm, '<h2>$1</h2>')\n  .replace(/^### (.*)$/gm, '<h3>$1</h3>')\n  .replace(/\\*\\*([^*]+)\\*\\*/g, '<strong>$1</strong>')\n  .replace(/\\*([^*]+)\\*/g, '<em>$1</em>')\n  .replace(/✅/g, '<span class=\"check-item\">✅</span>')\n  .replace(/^- ✅ (.*)$/gm, '<div class=\"check-item\">✅ $1</div>')\n  .replace(/```typescript\\n([\\s\\S]*?)\\n```/g, '<div class=\"code-block\">$1</div>')\n  .replace(/```\\n([\\s\\S]*?)\\n```/g, '<div class=\"code-block\">$1</div>')\n  .replace(/^---$/gm, '<hr style=\"border: 1px solid #e5e7eb; margin: 30px 0;\">')\n  .replace(/\\n\\n/g, '</p><p>')\n  .replace(/\\n/g, '<br>')\n  .replace(/^(.*)$/gm, '<p>$1</p>')\n}\n\n  <div class=\"conclusion\">\n    <h3 style=\"color: white; margin-top: 0;\">Status Final do Projeto</h3>\n    <p>✅ Sistema totalmente funcional e pronto para produção</p>\n    <p>✅ Controle de acesso por departamento implementado</p>\n    <p>✅ Interface otimizada e responsiva</p>\n    <p>✅ Segurança robusta implementada</p>\n  </div>\n\n  <div class=\"footer\">\n    <p><strong>Relatório gerado automaticamente em ${new Date().toLocaleDateString('pt-BR')}</strong></p>\n    <p>Sistema de Controle de Processos de Licitação | SEAP-PB</p>\n  </div>\n</body>\n</html>`;\n\n    // Configurações do PDF\n    const options = {\n      format: 'A4',\n      margin: {\n        top: '2cm',\n        right: '2cm',\n        bottom: '2cm',\n        left: '2cm'\n      },\n      printBackground: true,\n      displayHeaderFooter: false\n    };\n\n    const file = { content: htmlContent };\n\n    // Gera o PDF\n    console.log('📄 Gerando PDF do relatório...');\n    const pdfBuffer = await htmlPdf.generatePdf(file, options);\n    \n    // Salva o arquivo\n    fs.writeFileSync('RELATORIO_DESENVOLVIMENTO_26-28_MAI_2025.pdf', pdfBuffer);\n    \n    console.log('✅ PDF exportado com sucesso: RELATORIO_DESENVOLVIMENTO_26-28_MAI_2025.pdf');\n    console.log('📁 O arquivo está disponível na raiz do projeto');\n    \n  } catch (error) {\n    console.error('❌ Erro ao exportar PDF:', error.message);\n  }\n}\n\nexportReportToPDF();","size_bytes":5500},"generate-implementation-report.js":{"content":"import puppeteer from 'puppeteer';\nimport fs from 'fs';\nimport path from 'path';\n\nasync function generateImplementationReport() {\n  const browser = await puppeteer.launch({\n    headless: true,\n    args: ['--no-sandbox', '--disable-setuid-sandbox']\n  });\n  \n  const page = await browser.newPage();\n  \n  // HTML content for the report\n  const htmlContent = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Relatório de Implementações - Sistema SEAP</title>\n    <style>\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            line-height: 1.6;\n            margin: 0;\n            padding: 20px;\n            color: #333;\n        }\n        .header {\n            background: linear-gradient(135deg, #1e40af, #3b82f6);\n            color: white;\n            padding: 30px;\n            margin: -20px -20px 30px -20px;\n            text-align: center;\n        }\n        .header h1 {\n            margin: 0 0 10px 0;\n            font-size: 28px;\n            font-weight: 600;\n        }\n        .header p {\n            margin: 0;\n            font-size: 16px;\n            opacity: 0.9;\n        }\n        .section {\n            margin-bottom: 30px;\n            border-left: 4px solid #3b82f6;\n            padding-left: 20px;\n        }\n        .section h2 {\n            color: #1e40af;\n            font-size: 22px;\n            margin-bottom: 15px;\n            border-bottom: 2px solid #e5e7eb;\n            padding-bottom: 8px;\n        }\n        .implementation-item {\n            background: #f8fafc;\n            border: 1px solid #e2e8f0;\n            border-radius: 8px;\n            padding: 15px;\n            margin-bottom: 15px;\n        }\n        .implementation-item h3 {\n            color: #1e40af;\n            margin: 0 0 10px 0;\n            font-size: 16px;\n        }\n        .implementation-item p {\n            margin: 0;\n            color: #64748b;\n            font-size: 14px;\n        }\n        .date {\n            background: #dbeafe;\n            color: #1e40af;\n            padding: 4px 12px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n            display: inline-block;\n            margin-bottom: 10px;\n        }\n        .highlight {\n            background: #fef3c7;\n            border-left: 4px solid #f59e0b;\n            padding: 15px;\n            margin: 20px 0;\n            border-radius: 0 8px 8px 0;\n        }\n        .highlight h3 {\n            color: #b45309;\n            margin: 0 0 10px 0;\n        }\n        .technical-specs {\n            background: #f1f5f9;\n            border: 1px solid #cbd5e1;\n            border-radius: 8px;\n            padding: 20px;\n            margin: 20px 0;\n        }\n        .technical-specs h3 {\n            color: #334155;\n            margin: 0 0 15px 0;\n        }\n        .tech-list {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 10px;\n            margin: 0;\n            padding: 0;\n            list-style: none;\n        }\n        .tech-list li {\n            background: white;\n            padding: 8px 12px;\n            border-radius: 6px;\n            border-left: 3px solid #3b82f6;\n            font-size: 14px;\n        }\n        .footer {\n            margin-top: 40px;\n            padding-top: 20px;\n            border-top: 2px solid #e5e7eb;\n            text-align: center;\n            color: #6b7280;\n            font-size: 12px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>Relatório de Implementações</h1>\n        <p>Sistema de Controle de Processos de Licitação - SEAP/PB</p>\n        <p>Data: ${new Date().toLocaleDateString('pt-BR', { day: '2-digit', month: 'long', year: 'numeric' })}</p>\n    </div>\n\n    <div class=\"section\">\n        <h2>📋 Resumo Executivo</h2>\n        <div class=\"highlight\">\n            <h3>Principais Conquistas</h3>\n            <p>Sistema de fluxograma interativo totalmente implementado com funcionalidades avançadas de visualização, zoom controlado e imagens específicas por departamento, proporcionando uma experiência de usuário otimizada para análise de processos de licitação.</p>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <h2>🛠️ Implementações Realizadas</h2>\n        \n        <div class=\"implementation-item\">\n            <div class=\"date\">01 Jul 2025</div>\n            <h3>Sistema de Relatórios PDF</h3>\n            <p>Implementada geração de relatório PDF usando impressão do navegador, solução compatível com ambiente Replit que permite exportação de relatórios individuais de processos.</p>\n        </div>\n\n        <div class=\"implementation-item\">\n            <div class=\"date\">01 Jul 2025</div>\n            <h3>Fluxograma Interativo Inicial</h3>\n            <p>Adicionado fluxograma interativo na página de processos com capacidades de zoom e expansão em tela cheia para melhor visualização do fluxo de trabalho.</p>\n        </div>\n\n        <div class=\"implementation-item\">\n            <div class=\"date\">01 Jul 2025</div>\n            <h3>Reformulação do Sistema de Fluxograma</h3>\n            <p>Migração para uso de imagens específicas por departamento ao invés de zoom CSS complexo, melhorando performance e experiência do usuário.</p>\n        </div>\n\n        <div class=\"implementation-item\">\n            <div class=\"date\">01 Jul 2025</div>\n            <h3>Componente SimpleImageZoom</h3>\n            <p>Implementado sistema de zoom 100% funcional com controles de botão +/- e funcionalidade de arrastar para mover, proporcionando controle preciso sobre a visualização.</p>\n        </div>\n\n        <div class=\"implementation-item\">\n            <div class=\"date\">01 Jul 2025</div>\n            <h3>Imagens Departamentais Específicas</h3>\n            <p>Adicionadas 5 imagens específicas de fluxograma por departamento: Setor Demandante, Divisão de Licitação, Núcleo de Pesquisa de Preços (NPP), Unidade de Orçamento e Finanças, e Secretário de Estado.</p>\n        </div>\n\n        <div class=\"implementation-item\">\n            <div class=\"date\">01 Jul 2025</div>\n            <h3>Otimização de Performance</h3>\n            <p>Substituída imagem de fluxograma completo por versão otimizada (2.4MB vs 5.7MB anterior), representando uma redução de 58% no tamanho do arquivo e melhor tempo de carregamento.</p>\n        </div>\n\n        <div class=\"implementation-item\">\n            <div class=\"date\">01 Jul 2025</div>\n            <h3>Sistema de Zoom por Níveis Fixos</h3>\n            <p>Ajustado sistema de zoom para operar com níveis fixos: 100% → 300% → 500%, substituindo o incremento contínuo por controle mais preciso e previsível.</p>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <h2>⚡ Especificações Técnicas</h2>\n        <div class=\"technical-specs\">\n            <h3>Tecnologias Utilizadas</h3>\n            <ul class=\"tech-list\">\n                <li>React + TypeScript</li>\n                <li>Drizzle ORM</li>\n                <li>PostgreSQL</li>\n                <li>Tailwind CSS</li>\n                <li>Shadcn UI</li>\n                <li>SimpleImageZoom</li>\n                <li>Puppeteer (PDF)</li>\n                <li>WebSocket</li>\n                <li>Express.js</li>\n                <li>Vite</li>\n            </ul>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <h2>🎯 Funcionalidades Implementadas</h2>\n        \n        <div class=\"implementation-item\">\n            <h3>Visualização de Fluxograma</h3>\n            <p>• Zoom controlado com níveis fixos (100%, 300%, 500%)<br>\n               • Arrastar e mover imagem durante zoom<br>\n               • Imagens específicas por departamento<br>\n               • Modo tela cheia para análise detalhada</p>\n        </div>\n\n        <div class=\"implementation-item\">\n            <h3>Interface de Usuário</h3>\n            <p>• Controles intuitivos de zoom (+/-)<br>\n               • Alternância entre visão completa e foco departamental<br>\n               • Instruções claras para o usuário<br>\n               • Design responsivo e acessível</p>\n        </div>\n\n        <div class=\"implementation-item\">\n            <h3>Performance</h3>\n            <p>• Imagens otimizadas para web<br>\n               • Carregamento rápido (redução de 58% no tamanho)<br>\n               • Renderização suave de transições<br>\n               • Cache eficiente de recursos</p>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <h2>📊 Impacto das Melhorias</h2>\n        <div class=\"highlight\">\n            <h3>Benefícios Alcançados</h3>\n            <p><strong>Performance:</strong> Redução de 58% no tamanho das imagens (5.7MB → 2.4MB)<br>\n               <strong>Usabilidade:</strong> Controles de zoom mais precisos e intuitivos<br>\n               <strong>Funcionalidade:</strong> Visualização específica por departamento<br>\n               <strong>Experiência:</strong> Interface mais responsiva e profissional</p>\n        </div>\n    </div>\n\n    <div class=\"footer\">\n        <p>Relatório gerado automaticamente pelo Sistema SEAP - Secretaria de Administração Penitenciária da Paraíba</p>\n        <p>Desenvolvido para otimizar o controle de processos de licitação com tecnologia de ponta</p>\n    </div>\n</body>\n</html>\n  `;\n\n  await page.setContent(htmlContent);\n  \n  // Generate PDF\n  const pdfBuffer = await page.pdf({\n    format: 'A4',\n    printBackground: true,\n    margin: {\n      top: '20mm',\n      right: '15mm',\n      bottom: '20mm',\n      left: '15mm'\n    }\n  });\n\n  await browser.close();\n\n  // Save the PDF\n  const fileName = `relatorio-implementacoes-${new Date().toISOString().split('T')[0]}.pdf`;\n  fs.writeFileSync(fileName, pdfBuffer);\n\n  console.log(`✅ Relatório PDF gerado: ${fileName}`);\n  console.log(`📁 Tamanho do arquivo: ${(pdfBuffer.length / 1024).toFixed(2)} KB`);\n  \n  return fileName;\n}\n\ngenerateImplementationReport().catch(console.error);","size_bytes":10012},"generate-jspdf-report.js":{"content":"import { jsPDF } from 'jspdf';\nimport fs from 'fs';\n\nfunction generateJsPDFReport() {\n  const doc = new jsPDF();\n  \n  // Header\n  doc.setFillColor(30, 64, 175);\n  doc.rect(0, 0, 210, 40, 'F');\n  \n  doc.setTextColor(255, 255, 255);\n  doc.setFontSize(20);\n  doc.text('Relatório de Implementações', 105, 20, { align: 'center' });\n  \n  doc.setFontSize(12);\n  doc.text('Sistema de Controle de Processos de Licitação - SEAP/PB', 105, 28, { align: 'center' });\n  doc.text(`Data: ${new Date().toLocaleDateString('pt-BR')}`, 105, 35, { align: 'center' });\n  \n  // Reset text color\n  doc.setTextColor(0, 0, 0);\n  \n  let yPosition = 55;\n  \n  // Resumo Executivo\n  doc.setFontSize(16);\n  doc.setTextColor(30, 64, 175);\n  doc.text('Resumo Executivo', 20, yPosition);\n  yPosition += 10;\n  \n  doc.setFontSize(10);\n  doc.setTextColor(0, 0, 0);\n  const resumoText = 'Sistema de fluxograma interativo totalmente implementado com funcionalidades avançadas de visualização, zoom controlado e imagens específicas por departamento.';\n  const resumoLines = doc.splitTextToSize(resumoText, 170);\n  doc.text(resumoLines, 20, yPosition);\n  yPosition += resumoLines.length * 5 + 10;\n  \n  // Implementações\n  doc.setFontSize(16);\n  doc.setTextColor(30, 64, 175);\n  doc.text('Implementações Realizadas', 20, yPosition);\n  yPosition += 15;\n  \n  const implementacoes = [\n    {\n      titulo: 'Sistema de Relatórios PDF',\n      descricao: 'Implementada geração de relatório PDF usando impressão do navegador, compatível com ambiente Replit.'\n    },\n    {\n      titulo: 'Fluxograma Interativo',\n      descricao: 'Adicionado fluxograma interativo com zoom e expansão em tela cheia para melhor visualização.'\n    },\n    {\n      titulo: 'Componente SimpleImageZoom',\n      descricao: 'Sistema de zoom 100% funcional com controles +/- e arrastar para mover imagem.'\n    },\n    {\n      titulo: 'Imagens Departamentais',\n      descricao: '5 imagens específicas por departamento: Setor Demandante, Divisão de Licitação, NPP, Orçamento e Finanças, Secretário de Estado.'\n    },\n    {\n      titulo: 'Otimização de Performance',\n      descricao: 'Redução de 58% no tamanho das imagens (5.7MB → 2.4MB) para melhor carregamento.'\n    },\n    {\n      titulo: 'Zoom por Níveis Fixos',\n      descricao: 'Sistema ajustado para níveis específicos: 100% → 300% → 500% ao invés de incremento contínuo.'\n    }\n  ];\n  \n  implementacoes.forEach((impl, index) => {\n    // Check if we need a new page\n    if (yPosition > 250) {\n      doc.addPage();\n      yPosition = 20;\n    }\n    \n    // Date badge\n    doc.setFillColor(219, 234, 254);\n    doc.rect(20, yPosition - 4, 25, 8, 'F');\n    doc.setFontSize(8);\n    doc.setTextColor(30, 64, 175);\n    doc.text('01 Jul 2025', 21, yPosition + 1);\n    \n    yPosition += 10;\n    \n    // Title\n    doc.setFontSize(12);\n    doc.setTextColor(0, 0, 0);\n    doc.text(impl.titulo, 20, yPosition);\n    yPosition += 7;\n    \n    // Description\n    doc.setFontSize(9);\n    doc.setTextColor(100, 100, 100);\n    const descLines = doc.splitTextToSize(impl.descricao, 170);\n    doc.text(descLines, 20, yPosition);\n    yPosition += descLines.length * 4 + 8;\n  });\n  \n  // Check if we need a new page for technologies\n  if (yPosition > 230) {\n    doc.addPage();\n    yPosition = 20;\n  }\n  \n  // Tecnologias\n  doc.setFontSize(16);\n  doc.setTextColor(30, 64, 175);\n  doc.text('Tecnologias Utilizadas', 20, yPosition);\n  yPosition += 10;\n  \n  doc.setFontSize(10);\n  doc.setTextColor(0, 0, 0);\n  const tecnologias = 'React, TypeScript, Drizzle ORM, PostgreSQL, Tailwind CSS, Shadcn UI, SimpleImageZoom, WebSocket, Express.js, Vite';\n  const tecLines = doc.splitTextToSize(tecnologias, 170);\n  doc.text(tecLines, 20, yPosition);\n  yPosition += tecLines.length * 5 + 15;\n  \n  // Benefícios\n  doc.setFontSize(16);\n  doc.setTextColor(30, 64, 175);\n  doc.text('Benefícios Alcançados', 20, yPosition);\n  yPosition += 10;\n  \n  const beneficios = [\n    'Performance: Redução de 58% no tamanho das imagens',\n    'Usabilidade: Controles de zoom mais precisos e intuitivos',\n    'Funcionalidade: Visualização específica por departamento',\n    'Experiência: Interface mais responsiva e profissional'\n  ];\n  \n  doc.setFontSize(10);\n  doc.setTextColor(0, 0, 0);\n  beneficios.forEach(beneficio => {\n    doc.text('• ' + beneficio, 25, yPosition);\n    yPosition += 6;\n  });\n  \n  // Footer\n  yPosition = 280;\n  doc.setFontSize(8);\n  doc.setTextColor(100, 100, 100);\n  doc.text('Relatório gerado automaticamente pelo Sistema SEAP', 105, yPosition, { align: 'center' });\n  doc.text('Secretaria de Administração Penitenciária da Paraíba', 105, yPosition + 5, { align: 'center' });\n  \n  // Save PDF\n  const fileName = `relatorio-implementacoes-${new Date().toISOString().split('T')[0]}.pdf`;\n  const pdfOutput = doc.output('arraybuffer');\n  fs.writeFileSync(fileName, Buffer.from(pdfOutput));\n  \n  console.log(`✅ Relatório PDF gerado: ${fileName}`);\n  console.log(`📁 Tamanho: ${(pdfOutput.byteLength / 1024).toFixed(2)} KB`);\n  \n  return fileName;\n}\n\ngenerateJsPDFReport();","size_bytes":5077},"generate-report-pdf.js":{"content":"import fs from 'fs';\nimport puppeteer from 'puppeteer';\nimport path from 'path';\n\nasync function generateReportPDF() {\n  try {\n    // Lê o conteúdo do relatório em markdown\n    const markdownContent = fs.readFileSync('RELATORIO_DESENVOLVIMENTO_26-28_MAI_2025.md', 'utf8');\n    \n    // Converte markdown para HTML básico\n    const htmlContent = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Relatório de Desenvolvimento - Sistema de Licitação</title>\n  <style>\n    body {\n      font-family: 'Arial', sans-serif;\n      line-height: 1.6;\n      margin: 40px;\n      color: #333;\n    }\n    h1 {\n      color: #1e40af;\n      border-bottom: 3px solid #1e40af;\n      padding-bottom: 10px;\n      font-size: 28px;\n    }\n    h2 {\n      color: #1e40af;\n      margin-top: 30px;\n      font-size: 22px;\n    }\n    h3 {\n      color: #374151;\n      margin-top: 25px;\n      font-size: 18px;\n    }\n    .header-info {\n      background: #f3f4f6;\n      padding: 20px;\n      border-radius: 8px;\n      margin: 20px 0;\n    }\n    .summary {\n      background: #ecfdf5;\n      border-left: 4px solid #10b981;\n      padding: 20px;\n      margin: 20px 0;\n    }\n    .tech-block {\n      background: #f9fafb;\n      border: 1px solid #d1d5db;\n      padding: 15px;\n      margin: 15px 0;\n      border-radius: 6px;\n      font-family: 'Courier New', monospace;\n      font-size: 12px;\n    }\n    .checklist {\n      color: #059669;\n      font-weight: bold;\n    }\n    .section {\n      margin: 30px 0;\n      page-break-inside: avoid;\n    }\n    .footer {\n      margin-top: 50px;\n      text-align: center;\n      font-style: italic;\n      color: #6b7280;\n    }\n    @page {\n      margin: 2cm;\n      @bottom-right {\n        content: \"Página \" counter(page);\n      }\n    }\n  </style>\n</head>\n<body>\n${markdownContent\n  .replace(/# (.*)/g, '<h1>$1</h1>')\n  .replace(/## (.*)/g, '<h2>$1</h2>')\n  .replace(/### (.*)/g, '<h3>$1</h3>')\n  .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n  .replace(/✅/g, '<span class=\"checklist\">✅</span>')\n  .replace(/- ✅/g, '• <span class=\"checklist\">✅</span>')\n  .replace(/```typescript(.*?)```/gs, '<div class=\"tech-block\">$1</div>')\n  .replace(/```(.*?)```/gs, '<div class=\"tech-block\">$1</div>')\n  .replace(/\\n\\n/g, '</p><p>')\n  .replace(/\\n/g, '<br>')\n  .replace(/^(.*)$/, '<p>$1</p>')\n}\n</body>\n</html>`;\n\n    // Inicializa o Puppeteer\n    const browser = await puppeteer.launch({\n      headless: true,\n      args: ['--no-sandbox', '--disable-setuid-sandbox']\n    });\n    \n    const page = await browser.newPage();\n    await page.setContent(htmlContent);\n    \n    // Gera o PDF\n    const pdfBuffer = await page.pdf({\n      format: 'A4',\n      margin: {\n        top: '2cm',\n        right: '2cm',\n        bottom: '2cm',\n        left: '2cm'\n      },\n      printBackground: true,\n      displayHeaderFooter: true,\n      headerTemplate: '<div></div>',\n      footerTemplate: `\n        <div style=\"font-size: 10px; text-align: center; width: 100%; margin: 0 2cm;\">\n          Sistema de Controle de Processos de Licitação - Relatório de Desenvolvimento | Página <span class=\"pageNumber\"></span> de <span class=\"totalPages\"></span>\n        </div>\n      `\n    });\n    \n    // Salva o PDF\n    fs.writeFileSync('RELATORIO_DESENVOLVIMENTO_26-28_MAI_2025.pdf', pdfBuffer);\n    \n    await browser.close();\n    \n    console.log('✅ PDF gerado com sucesso: RELATORIO_DESENVOLVIMENTO_26-28_MAI_2025.pdf');\n    \n  } catch (error) {\n    console.error('❌ Erro ao gerar PDF:', error);\n  }\n}\n\ngenerateReportPDF();","size_bytes":3517},"generate-simple-report.js":{"content":"import htmlPdf from 'html-pdf-node';\nimport fs from 'fs';\n\nasync function generateSimpleReport() {\n  const htmlContent = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Relatório de Implementações - Sistema SEAP</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n            margin: 20px;\n            color: #333;\n        }\n        .header {\n            background: #1e40af;\n            color: white;\n            padding: 20px;\n            text-align: center;\n            margin-bottom: 30px;\n        }\n        .header h1 {\n            margin: 0;\n            font-size: 24px;\n        }\n        .section {\n            margin-bottom: 25px;\n        }\n        .section h2 {\n            color: #1e40af;\n            border-bottom: 2px solid #e5e7eb;\n            padding-bottom: 5px;\n        }\n        .implementation {\n            background: #f8fafc;\n            border-left: 4px solid #3b82f6;\n            padding: 15px;\n            margin-bottom: 15px;\n        }\n        .date {\n            background: #dbeafe;\n            color: #1e40af;\n            padding: 2px 8px;\n            border-radius: 10px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n        .highlight {\n            background: #fef3c7;\n            border: 1px solid #f59e0b;\n            padding: 15px;\n            margin: 15px 0;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>Relatório de Implementações</h1>\n        <p>Sistema de Controle de Processos de Licitação - SEAP/PB</p>\n        <p>Data: ${new Date().toLocaleDateString('pt-BR')}</p>\n    </div>\n\n    <div class=\"section\">\n        <h2>Resumo Executivo</h2>\n        <div class=\"highlight\">\n            <p><strong>Sistema de fluxograma interativo totalmente implementado</strong> com funcionalidades avançadas de visualização, zoom controlado e imagens específicas por departamento.</p>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <h2>Implementações Realizadas</h2>\n        \n        <div class=\"implementation\">\n            <span class=\"date\">01 Jul 2025</span>\n            <h3>Sistema de Relatórios PDF</h3>\n            <p>Implementada geração de relatório PDF usando impressão do navegador, compatível com ambiente Replit.</p>\n        </div>\n\n        <div class=\"implementation\">\n            <span class=\"date\">01 Jul 2025</span>\n            <h3>Fluxograma Interativo</h3>\n            <p>Adicionado fluxograma interativo com zoom e expansão em tela cheia.</p>\n        </div>\n\n        <div class=\"implementation\">\n            <span class=\"date\">01 Jul 2025</span>\n            <h3>Componente SimpleImageZoom</h3>\n            <p>Sistema de zoom 100% funcional com controles +/- e arrastar para mover.</p>\n        </div>\n\n        <div class=\"implementation\">\n            <span class=\"date\">01 Jul 2025</span>\n            <h3>Imagens Departamentais</h3>\n            <p>5 imagens específicas por departamento: Setor Demandante, Divisão de Licitação, NPP, Orçamento e Finanças, Secretário de Estado.</p>\n        </div>\n\n        <div class=\"implementation\">\n            <span class=\"date\">01 Jul 2025</span>\n            <h3>Otimização de Performance</h3>\n            <p>Redução de 58% no tamanho das imagens (5.7MB → 2.4MB).</p>\n        </div>\n\n        <div class=\"implementation\">\n            <span class=\"date\">01 Jul 2025</span>\n            <h3>Zoom por Níveis Fixos</h3>\n            <p>Sistema ajustado para níveis: 100% → 300% → 500%.</p>\n        </div>\n    </div>\n\n    <div class=\"section\">\n        <h2>Tecnologias Utilizadas</h2>\n        <p>React, TypeScript, Drizzle ORM, PostgreSQL, Tailwind CSS, Shadcn UI, SimpleImageZoom, WebSocket, Express.js, Vite</p>\n    </div>\n\n    <div class=\"section\">\n        <h2>Benefícios Alcançados</h2>\n        <ul>\n            <li><strong>Performance:</strong> Redução de 58% no tamanho das imagens</li>\n            <li><strong>Usabilidade:</strong> Controles de zoom mais precisos</li>\n            <li><strong>Funcionalidade:</strong> Visualização específica por departamento</li>\n            <li><strong>Experiência:</strong> Interface mais responsiva</li>\n        </ul>\n    </div>\n\n    <div style=\"margin-top: 40px; text-align: center; font-size: 12px; color: #666;\">\n        <p>Relatório gerado automaticamente pelo Sistema SEAP</p>\n        <p>Secretaria de Administração Penitenciária da Paraíba</p>\n    </div>\n</body>\n</html>\n  `;\n\n  const options = {\n    format: 'A4',\n    border: {\n      top: \"20mm\",\n      right: \"15mm\",\n      bottom: \"20mm\",\n      left: \"15mm\"\n    }\n  };\n\n  try {\n    const file = { content: htmlContent };\n    const pdfBuffer = await htmlPdf.generatePdf(file, options);\n    \n    const fileName = `relatorio-implementacoes-${new Date().toISOString().split('T')[0]}.pdf`;\n    fs.writeFileSync(fileName, pdfBuffer);\n    \n    console.log(`✅ Relatório PDF gerado: ${fileName}`);\n    console.log(`📁 Tamanho: ${(pdfBuffer.length / 1024).toFixed(2)} KB`);\n    \n    return fileName;\n  } catch (error) {\n    console.error('Erro ao gerar PDF:', error);\n  }\n}\n\ngenerateSimpleReport();","size_bytes":5164},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Sistema de Controle de Processos de Licitação\n\n## Overview\n\nThe Sistema de Controle de Processos de Licitação is a web application developed for the Secretaria de Administração Penitenciária (Prison Administration Secretariat) in Paraíba, Brazil. It manages and monitors bidding processes (licitações) throughout their lifecycle, providing comprehensive tracking, workflow management, and reporting capabilities.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI Components**: Shadcn UI library with Radix UI primitives\n- **Styling**: Tailwind CSS with custom theming\n- **State Management**: TanStack Query (React Query) for server state\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express server\n- **Language**: TypeScript for type safety\n- **API Design**: RESTful API with WebSocket support for real-time updates\n- **Session Management**: Express sessions with secure cookie handling\n- **Authentication**: Passport.js with local strategy\n- **Password Security**: Bcrypt for password hashing\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL managed through Drizzle ORM\n- **Migration System**: Drizzle Kit for schema migrations\n- **Connection**: Neon serverless PostgreSQL with WebSocket support\n- **Schema**: Strongly typed database schema with Zod validation\n\n## Key Components\n\n### 1. User Management System\n- Role-based access control (admin/common users)\n- Department-based process visibility\n- Secure authentication with password encryption\n- User approval workflow for new registrations\n\n### 2. Process Management\n- Complete bidding process lifecycle tracking\n- Department-based workflow routing\n- Deadline monitoring with automated alerts\n- Process status tracking (draft, in_progress, completed, canceled, overdue)\n- Priority levels (low, medium, high)\n\n### 3. Bidding Modalities & Workflow\n- Support for different bidding types (Pregão Eletrônico, Tomada de Preços, etc.)\n- Customizable workflow steps for each modality\n- Automated step creation based on modality selection\n- Department responsibility assignment\n\n### 4. Analytics & Reporting\n- Real-time dashboard with process statistics\n- Monthly goal tracking and progress monitoring\n- Resource distribution analysis\n- Department performance rankings\n- Temporal distribution charts\n- Individual process report generation (HTML-based for browser printing to PDF)\n\n### 5. Real-time Features\n- WebSocket integration for live updates\n- Notification system for deadlines and updates\n- Process transfer notifications\n- Real-time data synchronization across clients\n\n## Data Flow\n\n### Process Creation Flow\n1. User creates process in \"Setor Demandante\" (requesting department)\n2. System automatically generates default workflow steps based on modality\n3. Process moves through departments following predefined workflow\n4. Each step can be marked complete with responsible user assignment\n5. Deadline tracking begins immediately with automated alerts\n\n### Department Visibility Rules\n- **Admin users**: Full access to all processes across departments\n- **Common users**: Restricted access to processes within their department\n- **Transfer mechanism**: Processes move between departments following workflow\n- **Return capability**: Processes can be returned to previous departments with comments\n\n### Authentication & Authorization\n1. User login with username/password\n2. Session creation with secure cookies\n3. Role-based route protection\n4. Department-based data filtering\n5. Admin-only access to sensitive operations\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@tanstack/react-query**: Server state management\n- **express**: Web server framework\n- **drizzle-orm**: Type-safe database operations\n- **@neondatabase/serverless**: PostgreSQL connection\n- **passport**: Authentication middleware\n- **bcrypt**: Password hashing\n\n### UI & Styling Dependencies\n- **@radix-ui/***: Primitive UI components\n- **tailwindcss**: Utility-first CSS framework\n- **lucide-react**: Icon library\n- **recharts**: Chart visualization library\n- **date-fns**: Date manipulation utilities\n\n### Development Dependencies\n- **vite**: Build tool and dev server\n- **typescript**: Type checking\n- **tsx**: TypeScript execution\n- **esbuild**: Fast bundling for production\n\n## Deployment Strategy\n\n### Production Build Process\n1. Frontend build with Vite: `npm run build`\n2. Backend compilation with esbuild: TypeScript to ESM\n3. Static assets served from `dist/public`\n4. Server bundle output to `dist/index.js`\n\n### Environment Configuration\n- **DATABASE_URL**: PostgreSQL connection string\n- **SESSION_SECRET**: Secure session encryption key\n- **NODE_ENV**: Environment mode (development/production)\n- **PORT**: Server port (default: 5000)\n\n### Security Considerations\n- Secure session management with HTTP-only cookies\n- Password hashing with bcrypt\n- Role-based access control\n- Department-based data isolation\n- CORS and security headers configuration\n\n### WebSocket Setup\n- Real-time communication for process updates\n- Client reconnection handling\n- Broadcast messaging for multi-user scenarios\n- Integration with existing HTTP session management\n\n## Changelog\n- July 01, 2025. Initial setup\n- July 01, 2025. Implementada geração de relatório PDF usando impressão do navegador (solução compatível com ambiente Replit)\n- July 01, 2025. Adicionado fluxograma interativo na página de processos com zoom e expansão em tela cheia\n- July 01, 2025. Reformulado sistema de fluxograma para usar imagens específicas por departamento ao invés de zoom CSS complexo\n- July 01, 2025. Implementado sistema de zoom 100% funcional com SimpleImageZoom usando controles de botão +/- e arrastar para mover\n- July 01, 2025. Adicionadas imagens específicas de fluxograma por departamento (Setor Demandante, Divisão de Licitação, NPP, Orçamento e Finanças, Secretário de Estado)\n- July 01, 2025. Substituída imagem de fluxograma completo por versão mais leve (2.4MB vs 5.7MB anterior - redução de 58%)\n- July 01, 2025. Ajustado sistema de zoom para níveis fixos: 100% → 300% → 500% ao invés de incremento contínuo\n- July 01, 2025. Adicionada seção \"Sequência do Fluxograma para Comparação Manual\" com ordem numerada dos departamentos\n- July 10, 2025. Fluxograma completo atualizado para versão otimizada (fluxograma_seap_new.png) - imagem mais nítida e ainda mais leve\n- July 10, 2025. Implementada nova versão ultra HD do fluxograma (fluxograma_seap_ultra_hd.png) com melhorias significativas de qualidade visual\n- July 10, 2025. Adicionadas propriedades CSS específicas para melhoria da renderização de imagens (image-rendering, interpolation-mode, webkit-optimization)\n- July 10, 2025. Substituído por versão otimizada reduzida do fluxograma (fluxograma_seap_min.png) para melhor performance e qualidade visual\n- July 12, 2025. Corrigido problema crítico de autenticação: removido campo department_id inexistente do schema de usuários\n- July 12, 2025. Implementada funcionalidade de retorno de processos para administradores com seleção de departamento de destino\n- July 12, 2025. Adicionada informação do responsável pelo retorno nos comentários (username e departamento)\n- July 12, 2025. Corrigido sistema de hash de senha para novos usuários registrados via formulário público\n- July 12, 2025. Administradores agora podem retornar processos para qualquer departamento, não apenas o anterior no fluxo\n- July 12, 2025. Padronizadas cores dos gráficos e legendas: Em Andamento (amarelo #F59E0B), Atrasados (vermelho #EF4444), Concluídos (verde #10B981), Cancelados (cinza #9CA3AF)\n- July 12, 2025. Corrigidas cores em ProcessStatusChart, TemporalDistributionChart, DepartmentRanking e funções utilitárias de status\n- July 12, 2025. Adicionada função getProcessStatusClass e classes CSS correspondentes para consistência visual\n- July 13, 2025. Corrigido problema de acesso à lixeira: removida proteção AdminProtectedRoute da rota /trash - todos os usuários podem acessar\n- July 13, 2025. Sistema de lixeira totalmente liberado: backend e frontend acessíveis para usuários comuns (visualizar, restaurar, excluir permanentemente)\n- July 13, 2025. Corrigidas cores dos status dos processos nos cards de estatísticas: Em Andamento (amarelo), Atrasados (vermelho), Concluídos (verde), Cancelados (cinza)\n- July 13, 2025. Adicionado card de processos atrasados no dashboard e expandido grid para 5 colunas (lg:grid-cols-5)\n- July 13, 2025. Padronizadas cores dos gráficos da página de relatórios com as cores do dashboard: Em Andamento (amarelo #F59E0B), Atrasado (vermelho #EF4444), Concluído (verde #10B981), Cancelado (cinza #9CA3AF)\n- July 13, 2025. Adicionado status \"Atrasado\" no gráfico de processos por status na página de relatórios\n- July 13, 2025. Atualizado relatório PDF do processo com cores padronizadas e informações do responsável por cada etapa\n- July 13, 2025. Adicionado histórico de responsabilidades no relatório PDF com comentários e responsáveis pelas transferências\n- July 13, 2025. Corrigidas cores em todos os arquivos de exportação PDF: exactReportExport.ts, exactPdfExport.ts, modernPdfGenerator.ts, pdfExport.ts, export-fix.ts\n- July 13, 2025. Implementada exibição do responsável e departamento em cada etapa concluída do processo no relatório PDF\n- July 13, 2025. Relatório PDF agora é cópia exata da página ProcessReport.tsx com layout e estilos idênticos\n- July 13, 2025. Corrigido problema de etapas não mostrarem departamento e responsável - agora todas as etapas exibem essas informações\n- July 13, 2025. Adicionado histórico de responsabilidades completo no relatório PDF com transferências e comentários\n- July 13, 2025. Adicionado motivo da exclusão na lixeira para facilitar o manuseio pelo usuário\n- July 13, 2025. Melhorado display do usuário responsável pela exclusão (nome completo ao invés de ID)\n- July 13, 2025. Corrigidas cores dos relatórios PDF gerais para seguir padrão do sistema: Em Andamento (amarelo #F59E0B), Atrasado (vermelho #EF4444), Concluído (verde #10B981), Cancelado (cinza #9CA3AF)\n- July 13, 2025. Padronizadas cores em modernPdfGenerator.ts e timelineExport.ts para consistência visual em todos os relatórios\n- July 13, 2025. Fluxograma mantido funcional mas removido da sidebar conforme preferência do usuário\n- July 13, 2025. Integradas novas imagens específicas de fluxograma para cada departamento (11 setores adicionais)\n- July 13, 2025. Adicionados mapeamentos para novos departamentos: Equipe de Pregão, CGE, CGPC, Unidade Técnico Normativa, SUBCC\n- July 13, 2025. Atualizadas descrições departamentais com informações detalhadas sobre cada setor\n- July 13, 2025. Corrigidos nomes dos departamentos para consistência entre cadastro de usuário e sistema de fluxogramas\n- July 13, 2025. Ajustados mapeamentos para usar nomes exatos dos departamentos cadastrados no banco de dados\n- July 13, 2025. Corrigidos setores no formulário de cadastro da página de login para usar departamentos reais do sistema\n- July 13, 2025. Atualizada função createDefaultSteps para seguir ordem correta do fluxograma: DFD ao invés de \"Demanda identificada\", NPP responsável pela pesquisa de preços, fases bem definidas\n- July 13, 2025. Reorganizado fluxograma com etapas condicionais: Divisão de Licitação volta com \"Inserir Pesquisa no Sistema\", \"Solicitar Análise Orçamentária\" e \"Solicitar Autorização ao O.D.\" apenas após NPP completar checklist\n- July 13, 2025. Implementada lógica condicional no frontend: etapas específicas da Divisão de Licitação só aparecem após NPP completar \"Pesquisa de Preços\" e \"Mapa Comparativo de Preços\"\n- July 13, 2025. Removida etapa \"Solicitar Autorização ao O.D.\" - fluxo vai direto de \"Solicitar Análise Orçamentária\" para \"Informar Disponibilidade Orçamentária p/ Emissão de R.O.\" na Unidade de Orçamento e Finanças\n- July 13, 2025. Corrigido problema crítico: processos na lixeira não contabilizam mais no dashboard - adicionado filtro isNull(processes.deletedAt) nas funções getProcessesStatistics, getTemporalDistribution e getDepartmentRanking\n- July 14, 2025. Implementado refresh automático ao entrar nas páginas: Dashboard, Relatórios, Usuários, Processos e Lixeira com invalidateQueries para garantir dados sempre atualizados\n- July 14, 2025. Alterada cor dos status cancelado/draft de cinza (#9CA3AF) para azul claro quase branco (#F0F9FF) para melhor diferenciação visual nas legendas\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.","size_bytes":12833},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"backup/storage.db.ts":{"content":"import { db } from \"./db\";\nimport { \n  users, type User, type InsertUser, \n  departments, type Department, type InsertDepartment,\n  biddingModalities, type BiddingModality, type InsertBiddingModality,\n  resourceSources, type ResourceSource, type InsertResourceSource,\n  processes, type Process, type InsertProcess,\n  processSteps, type ProcessStep, type InsertProcessStep,\n  processParticipants, type ProcessParticipant, type InsertProcessParticipant\n} from \"@shared/schema\";\nimport { IStorage } from \"./storage\";\nimport { eq, and, or, count, sql, inArray } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async updateUser(id: number, userData: Partial<InsertUser>): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set(userData)\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n  \n  async deleteUser(id: number): Promise<boolean> {\n    try {\n      const result = await db.delete(users).where(eq(users.id, id));\n      return result.rowCount !== null && result.rowCount > 0;\n    } catch (error) {\n      console.error(\"Erro ao excluir usuário:\", error);\n      return false;\n    }\n  }\n\n  async authenticateUser(username: string, password: string): Promise<User | undefined> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return undefined;\n\n    // Verificar se o usuário está ativo\n    if (user.isActive === false) return undefined;\n    \n    // Verificar se a senha começa com $2b$ (hash bcrypt)\n    // Se não, verificar diretamente (compatibilidade com senhas em texto simples)\n    let passwordMatch = false;\n    \n    if (user.password.startsWith('$2b$')) {\n      passwordMatch = await bcrypt.compare(password, user.password);\n    } else {\n      // Compatibilidade: verificar senha em texto simples\n      passwordMatch = password === user.password;\n      \n      // Se a senha estiver correta, atualize para hash bcrypt\n      if (passwordMatch) {\n        const hashedPassword = await bcrypt.hash(password, 10);\n        await this.updateUser(user.id, { password: hashedPassword });\n      }\n    }\n    \n    if (!passwordMatch) return undefined;\n\n    return user;\n  }\n\n  // Department operations\n  async getDepartment(id: number): Promise<Department | undefined> {\n    const [department] = await db.select().from(departments).where(eq(departments.id, id));\n    return department;\n  }\n\n  async getDepartments(): Promise<Department[]> {\n    return await db.select().from(departments);\n  }\n\n  async createDepartment(department: InsertDepartment): Promise<Department> {\n    const [newDepartment] = await db.insert(departments).values(department).returning();\n    return newDepartment;\n  }\n\n  // Bidding modality operations\n  async getBiddingModality(id: number): Promise<BiddingModality | undefined> {\n    const [modality] = await db.select().from(biddingModalities).where(eq(biddingModalities.id, id));\n    return modality;\n  }\n\n  async getBiddingModalities(): Promise<BiddingModality[]> {\n    return await db.select().from(biddingModalities);\n  }\n\n  async createBiddingModality(modality: InsertBiddingModality): Promise<BiddingModality> {\n    const [newModality] = await db.insert(biddingModalities).values(modality).returning();\n    return newModality;\n  }\n\n  // Resource source operations\n  async getResourceSource(id: number): Promise<ResourceSource | undefined> {\n    const [source] = await db.select().from(resourceSources).where(eq(resourceSources.id, id));\n    return source;\n  }\n\n  async getResourceSources(): Promise<ResourceSource[]> {\n    return await db.select().from(resourceSources);\n  }\n\n  async createResourceSource(source: InsertResourceSource): Promise<ResourceSource> {\n    const [newSource] = await db.insert(resourceSources).values(source).returning();\n    return newSource;\n  }\n\n  // Process operations\n  async getProcess(id: number, userId?: number): Promise<Process | undefined> {\n    // Se userId for fornecido, verifica se o usuário tem acesso ao processo\n    if (userId) {\n      // Verifica se o usuário é admin\n      const [admin] = await db\n        .select()\n        .from(users)\n        .where(and(\n          eq(users.id, userId),\n          eq(users.role, 'admin')\n        ));\n\n      // Se não for admin, verifica regras de acesso\n      if (!admin) {\n        // Obtém o usuário para verificar seu departamento\n        const [user] = await db.select().from(users).where(eq(users.id, userId));\n        if (!user) return undefined;\n        \n        // Obtém o processo\n        const [process] = await db.select().from(processes).where(eq(processes.id, id));\n        if (!process) return undefined;\n        \n        // Verifica se o usuário é participante ativo do processo\n        const [participant] = await db\n          .select()\n          .from(processParticipants)\n          .where(and(\n            eq(processParticipants.processId, id),\n            eq(processParticipants.userId, userId),\n            eq(processParticipants.isActive, true)\n          ));\n        \n        // Verifica se o processo está no departamento do usuário\n        // Aqui precisamos converter a string \"department\" para número para comparação\n        const userDepartmentId = parseInt(user.department);\n        const isUserDepartment = (process.currentDepartmentId === userDepartmentId);\n        \n        // Se não for participante E o processo não estiver no departamento do usuário, retorna undefined\n        if (!participant && !isUserDepartment) {\n          console.log(`Acesso negado: Usuário ${userId} não tem acesso ao processo ${id}`);\n          return undefined;\n        }\n      }\n    }\n    \n    const [process] = await db.select().from(processes).where(eq(processes.id, id));\n    return process;\n  }\n\n  async getProcesses(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n    userId?: number;\n  }): Promise<Process[]> {\n    try {\n      const conditions: any[] = [];\n      \n      // Aplicar filtros básicos se fornecidos\n      if (filters) {\n        if (filters.pbdocNumber) {\n          conditions.push(sql`${processes.pbdocNumber} ILIKE ${`%${filters.pbdocNumber}%`}`);\n        }\n        \n        if (filters.modalityId) {\n          conditions.push(eq(processes.modalityId, filters.modalityId));\n        }\n        \n        if (filters.sourceId) {\n          conditions.push(eq(processes.sourceId, filters.sourceId));\n        }\n        \n        if (filters.responsibleId) {\n          conditions.push(eq(processes.responsibleId, filters.responsibleId));\n        }\n        \n        if (filters.status) {\n          conditions.push(eq(processes.status, filters.status as any));\n        }\n      }\n      \n      // Verificar se precisa filtrar por acesso do usuário\n      if (filters?.userId) {\n        // Verificar se é admin\n        const [adminUser] = await db\n          .select()\n          .from(users)\n          .where(and(\n            eq(users.id, filters.userId),\n            eq(users.role, 'admin')\n          ));\n          \n        if (!adminUser) {\n          console.log(`Usuário ${filters.userId} não é admin - aplicando restrições de acesso`);\n          \n          // Buscar o usuário\n          const [user] = await db\n            .select()\n            .from(users)\n            .where(eq(users.id, filters.userId));\n            \n          if (!user) {\n            return [];\n          }\n          \n          // Buscar o departamento do usuário\n          const [userDept] = await db\n            .select()\n            .from(departments)\n            .where(eq(departments.name, user.department));\n            \n          if (!userDept) {\n            return [];\n          }\n          \n          const departmentId = userDept.id;\n          console.log(`Usuário ${user.username} (ID: ${user.id}) pertence ao departamento ${user.department} (ID: ${departmentId})`);\n          \n          // Buscar processos onde o usuário é participante ativo\n          const participantProcesses = await db\n            .select()\n            .from(processParticipants)\n            .where(and(\n              eq(processParticipants.userId, user.id),\n              eq(processParticipants.isActive, true)\n            ));\n            \n          console.log(`Usuário ${user.username} é participante de ${participantProcesses.length} processos`);\n          \n          // Lista de IDs de processos onde o usuário é participante\n          const participantProcessIds = participantProcesses.map(p => p.processId);\n          \n          // Aplicar condição OR usando SQL literal para máxima compatibilidade:\n          // 1. O processo pertence ao departamento do usuário, OU\n          // 2. O usuário é responsável pelo processo, OU\n          // 3. O usuário é participante ativo do processo\n          if (participantProcessIds.length > 0) {\n            conditions.push(sql`(${processes.currentDepartmentId} = ${departmentId} OR ${processes.responsibleId} = ${user.id} OR ${processes.id} IN (${participantProcessIds.join(',')}))`);\n          } else {\n            conditions.push(sql`(${processes.currentDepartmentId} = ${departmentId} OR ${processes.responsibleId} = ${user.id})`);\n          }\n        } else {\n          console.log(`Usuário ${filters.userId} é admin - vendo todos os processos`);\n        }\n      }\n      \n      // Executar a consulta\n      if (conditions.length > 0) {\n        const result = await db\n          .select()\n          .from(processes)\n          .where(and(...conditions))\n          .orderBy(processes.createdAt);\n          \n        console.log(`Consulta retornou ${result.length} processos`);\n        return result;\n      } else {\n        const result = await db\n          .select()\n          .from(processes)\n          .orderBy(processes.createdAt);\n          \n        console.log(`Consulta retornou ${result.length} processos (sem filtros)`);\n        return result;\n      }\n    } catch (error) {\n      console.error(\"Erro ao buscar processos:\", error);\n      return [];\n    }\n  }\n\n  async createProcess(process: InsertProcess): Promise<Process> {\n    const [newProcess] = await db.insert(processes).values(process).returning();\n    return newProcess;\n  }\n  \n  // Implementação das funções de participantes do processo\n  async getProcessParticipants(processId: number): Promise<ProcessParticipant[]> {\n    const participants = await db\n      .select()\n      .from(processParticipants)\n      .where(eq(processParticipants.processId, processId));\n    return participants;\n  }\n  \n  async addProcessParticipant(participant: InsertProcessParticipant): Promise<ProcessParticipant> {\n    const [newParticipant] = await db\n      .insert(processParticipants)\n      .values(participant)\n      .returning();\n    return newParticipant;\n  }\n  \n  async removeProcessParticipant(processId: number, userId: number): Promise<boolean> {\n    const result = await db\n      .delete(processParticipants)\n      .where(and(\n        eq(processParticipants.processId, processId),\n        eq(processParticipants.userId, userId)\n      ));\n    return result.rowCount > 0;\n  }\n  \n  async transferProcessToDepartment(processId: number, departmentId: number, userId: number): Promise<Process | undefined> {\n    try {\n      // 1. Obter o processo atual\n      const process = await this.getProcess(processId);\n      if (!process) {\n        throw new Error(\"Processo não encontrado\");\n      }\n\n      // Verificar departamento anterior\n      const oldDepartmentId = process.currentDepartmentId;\n      \n      console.log(`Transferindo processo ${processId} do departamento ${oldDepartmentId} para ${departmentId}`);\n\n      // 2. Atualizar o setor atual do processo\n      const [updatedProcess] = await db\n        .update(processes)\n        .set({\n          currentDepartmentId: departmentId,\n          updatedAt: new Date(),\n        })\n        .where(eq(processes.id, processId))\n        .returning();\n      \n      // 3. Remover TODOS os participantes atuais do processo para garantir visibilidade correta\n      console.log(`Removendo todos os participantes atuais do processo ${processId}`);\n      await db\n        .delete(processParticipants)\n        .where(eq(processParticipants.processId, processId));\n      \n      // 4. Adicionar o usuário que está fazendo a transferência como participante (se não for o responsável)\n      if (process.responsibleId !== userId) {\n        console.log(`Adicionando usuário ${userId} como participante do processo ${processId}`);\n        await db\n          .insert(processParticipants)\n          .values({\n            processId,\n            userId,\n            isActive: true,\n            notifications: true\n          });\n      }\n      \n      // 5. Registrar a transferência no histórico do processo\n      console.log(`Registrando transferência do processo ${processId} para o departamento ${departmentId}`);\n      await db\n        .insert(processSteps)\n        .values({\n          processId,\n          action: `Transferido para o departamento ${departmentId}`,\n          userId,\n          createdAt: new Date()\n        });\n        \n      return updatedProcess;\n    } catch (error) {\n      console.error(\"Erro ao transferir processo:\", error);\n      throw error;\n    }\n  }\n            .set({ isActive: false })\n            .where(and(\n              eq(processParticipants.processId, processId),\n              eq(processParticipants.departmentId, oldDepartmentId)\n            ));\n            \n          // Registrar a inativação como um evento de log\n          console.log(`Departamento ${oldDepartment.name} perdeu acesso ao processo ${processId}`);\n        }\n      }\n      \n      // 4. Adicionar o usuário atual como participante no novo departamento\n      // Verificar se o usuário já é participante\n      const [existingParticipant] = await db\n        .select()\n        .from(processParticipants)\n        .where(and(\n          eq(processParticipants.processId, processId),\n          eq(processParticipants.userId, userId),\n          eq(processParticipants.departmentId, departmentId)\n        ));\n      \n      if (existingParticipant) {\n        // Se já existe, apenas atualizar para ativo\n        await db\n          .update(processParticipants)\n          .set({ isActive: true })\n          .where(and(\n            eq(processParticipants.processId, processId),\n            eq(processParticipants.userId, userId),\n            eq(processParticipants.departmentId, departmentId)\n          ));\n      } else {\n        // Adicionar novo registro\n        await db\n          .insert(processParticipants)\n          .values({\n            processId,\n            userId,\n            departmentId,\n            role: 'editor',\n            isActive: true,\n          });\n      }\n      \n      // 5. Registrar a transferência como uma etapa do processo\n      await this.createProcessStep({\n        processId,\n        stepName: `Transferência para setor ${departmentId}`,\n        departmentId,\n        isCompleted: true,\n        completedBy: userId,\n        observations: `Processo transferido do setor ${oldDepartmentId} para ${departmentId}`\n      });\n      \n      console.log(`Processo ${processId} transferido para o setor ${departmentId} pelo usuário ${userId}`);\n      \n      return updatedProcess;\n    } catch (error) {\n      console.error(\"Erro ao transferir processo:\", error);\n      return undefined;\n    }\n  }\n\n  async updateProcess(id: number, processData: Partial<InsertProcess>): Promise<Process | undefined> {\n    const [updatedProcess] = await db\n      .update(processes)\n      .set(processData)\n      .where(eq(processes.id, id))\n      .returning();\n    return updatedProcess;\n  }\n\n  async deleteProcess(id: number): Promise<boolean> {\n    const result = await db.delete(processes).where(eq(processes.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Process step operations\n  async getProcessSteps(processId: number): Promise<ProcessStep[]> {\n    return await db\n      .select()\n      .from(processSteps)\n      .where(eq(processSteps.processId, processId));\n  }\n\n  async createProcessStep(step: InsertProcessStep): Promise<ProcessStep> {\n    const [newStep] = await db.insert(processSteps).values(step).returning();\n    return newStep;\n  }\n\n  async updateProcessStep(id: number, stepData: Partial<InsertProcessStep>): Promise<ProcessStep | undefined> {\n    const [updatedStep] = await db\n      .update(processSteps)\n      .set(stepData)\n      .where(eq(processSteps.id, id))\n      .returning();\n    return updatedStep;\n  }\n\n  // Dashboard analytics\n  async getProcessesStatistics(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{\n    total: number;\n    completed: number;\n    inProgress: number;\n    canceled: number;\n  }> {\n    console.log(\"getProcessesStatistics - Filtrando com:\", filters);\n    \n    // Construir condições de filtro\n    let conditions = [];\n    \n    if (filters?.pbdocNumber) {\n      conditions.push(sql`${processes.pbdocNumber} LIKE ${`%${filters.pbdocNumber}%`}`);\n    }\n    \n    if (filters?.modalityId) {\n      conditions.push(eq(processes.modalityId, filters.modalityId));\n    }\n    \n    if (filters?.sourceId) {\n      conditions.push(eq(processes.sourceId, filters.sourceId));\n    }\n    \n    if (filters?.responsibleId) {\n      conditions.push(eq(processes.responsibleId, filters.responsibleId));\n    }\n    \n    if (filters?.status) {\n      conditions.push(eq(processes.status, filters.status));\n    }\n    \n    // Combine as condições com 'AND' ou use uma condição padrão 'true'\n    const whereClause = conditions.length > 0\n      ? and(...conditions)\n      : undefined; // Se não houver condições, não aplique filtro\n    \n    // Consulta total com filtros\n    const totalQuery = whereClause \n      ? db.select({ value: count() }).from(processes).where(whereClause)\n      : db.select({ value: count() }).from(processes);\n    \n    const totalResult = await totalQuery;\n    const total = totalResult[0]?.value || 0;\n    \n    // Consulta completados com filtros + status 'completed'\n    const completedConditions = [...(conditions || []), eq(processes.status, 'completed')];\n    const completedWhereClause = completedConditions.length > 0 \n      ? and(...completedConditions)\n      : eq(processes.status, 'completed');\n    \n    const completedResult = await db\n      .select({ value: count() })\n      .from(processes)\n      .where(completedWhereClause);\n    const completed = completedResult[0]?.value || 0;\n    \n    // Consulta em andamento com filtros + status 'in_progress'\n    const inProgressConditions = [...(conditions || []), eq(processes.status, 'in_progress')];\n    const inProgressWhereClause = inProgressConditions.length > 0 \n      ? and(...inProgressConditions)\n      : eq(processes.status, 'in_progress');\n    \n    const inProgressResult = await db\n      .select({ value: count() })\n      .from(processes)\n      .where(inProgressWhereClause);\n    const inProgress = inProgressResult[0]?.value || 0;\n    \n    // Consulta cancelados com filtros + status 'canceled'\n    const canceledConditions = [...(conditions || []), eq(processes.status, 'canceled')];\n    const canceledWhereClause = canceledConditions.length > 0 \n      ? and(...canceledConditions)\n      : eq(processes.status, 'canceled');\n    \n    const canceledResult = await db\n      .select({ value: count() })\n      .from(processes)\n      .where(canceledWhereClause);\n    const canceled = canceledResult[0]?.value || 0;\n    \n    return { total, completed, inProgress, canceled };\n  }\n\n  async getProcessesByMonth(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{month: number; count: number}[]> {\n    console.log(\"getProcessesByMonth - Filtrando com:\", filters);\n    \n    // Construir condições de filtro\n    let conditions = [];\n    \n    if (filters?.pbdocNumber) {\n      conditions.push(sql`${processes.pbdocNumber} LIKE ${`%${filters.pbdocNumber}%`}`);\n    }\n    \n    if (filters?.modalityId) {\n      conditions.push(eq(processes.modalityId, filters.modalityId));\n    }\n    \n    if (filters?.sourceId) {\n      conditions.push(eq(processes.sourceId, filters.sourceId));\n    }\n    \n    if (filters?.responsibleId) {\n      conditions.push(eq(processes.responsibleId, filters.responsibleId));\n    }\n    \n    if (filters?.status) {\n      conditions.push(eq(processes.status, filters.status));\n    }\n    \n    // Adicionar condição de ano atual\n    const currentYear = new Date().getFullYear();\n    conditions.push(sql`EXTRACT(YEAR FROM ${processes.createdAt}) = ${currentYear}`);\n    \n    // Combine as condições com 'AND'\n    const whereClause = conditions.length > 0\n      ? and(...conditions)\n      : sql`EXTRACT(YEAR FROM ${processes.createdAt}) = ${currentYear}`;\n    \n    const result = await db\n      .select({\n        month: sql`EXTRACT(MONTH FROM ${processes.createdAt})::integer`,\n        count: count()\n      })\n      .from(processes)\n      .where(whereClause)\n      .groupBy(sql`EXTRACT(MONTH FROM ${processes.createdAt})::integer`);\n\n    // Fill in missing months\n    const resultMap = new Map<number, number>();\n    result.forEach(r => {\n      // Ensure month is treated as a number\n      const month = typeof r.month === 'number' ? r.month : parseInt(String(r.month), 10);\n      resultMap.set(month, r.count);\n    });\n    \n    const filledResults: {month: number; count: number}[] = [];\n    for (let i = 1; i <= 12; i++) {\n      filledResults.push({\n        month: i,\n        count: resultMap.get(i) || 0\n      });\n    }\n    \n    return filledResults;\n  }\n\n  async getProcessesBySource(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{sourceId: number; count: number}[]> {\n    console.log(\"getProcessesBySource - Filtrando com:\", filters);\n    \n    // Construir condições de filtro\n    let conditions = [];\n    \n    if (filters?.pbdocNumber) {\n      conditions.push(sql`${processes.pbdocNumber} LIKE ${`%${filters.pbdocNumber}%`}`);\n    }\n    \n    if (filters?.modalityId) {\n      conditions.push(eq(processes.modalityId, filters.modalityId));\n    }\n    \n    if (filters?.sourceId) {\n      conditions.push(eq(processes.sourceId, filters.sourceId));\n    }\n    \n    if (filters?.responsibleId) {\n      conditions.push(eq(processes.responsibleId, filters.responsibleId));\n    }\n    \n    if (filters?.status) {\n      conditions.push(eq(processes.status, filters.status as any));\n    }\n    \n    // Combine as condições com 'AND' ou não aplique filtro\n    const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n    \n    const query = whereClause \n      ? db.select({\n          sourceId: processes.sourceId,\n          count: count()\n        })\n        .from(processes)\n        .where(whereClause)\n        .groupBy(processes.sourceId)\n      : db.select({\n          sourceId: processes.sourceId,\n          count: count()\n        })\n        .from(processes)\n        .groupBy(processes.sourceId);\n    \n    return await query;\n  }\n\n  async getProcessesByResponsible(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{responsibleId: number; total: number; completed: number}[]> {\n    console.log(\"getProcessesByResponsible - Filtrando com:\", filters);\n    \n    // Construir condições de filtro\n    let conditions = [];\n    \n    if (filters?.pbdocNumber) {\n      conditions.push(sql`${processes.pbdocNumber} LIKE ${`%${filters.pbdocNumber}%`}`);\n    }\n    \n    if (filters?.modalityId) {\n      conditions.push(eq(processes.modalityId, filters.modalityId));\n    }\n    \n    if (filters?.sourceId) {\n      conditions.push(eq(processes.sourceId, filters.sourceId));\n    }\n    \n    if (filters?.responsibleId) {\n      conditions.push(eq(processes.responsibleId, filters.responsibleId));\n    }\n    \n    if (filters?.status) {\n      conditions.push(sql`${processes.status}::text = ${filters.status}`);\n    }\n    \n    // Combine as condições com 'AND' ou não aplique filtro\n    const whereClause = conditions.length > 0 ? and(...conditions) : undefined;\n    \n    // Consulta total com filtros\n    const totalQuery = whereClause \n      ? db.select({\n          responsibleId: processes.responsibleId,\n          total: count()\n        })\n        .from(processes)\n        .where(whereClause)\n        .groupBy(processes.responsibleId)\n      : db.select({\n          responsibleId: processes.responsibleId,\n          total: count()\n        })\n        .from(processes)\n        .groupBy(processes.responsibleId);\n    \n    const totalByResponsible = await totalQuery;\n      \n    // Consulta completados com filtros + status 'completed'\n    const completedConditions = [...conditions];\n    completedConditions.push(sql`${processes.status}::text = 'completed'`);\n    \n    const completedWhereClause = completedConditions.length > 0 \n      ? and(...completedConditions)\n      : sql`${processes.status}::text = 'completed'`;\n    \n    const completedByResponsible = await db\n      .select({\n        responsibleId: processes.responsibleId,\n        completed: count()\n      })\n      .from(processes)\n      .where(completedWhereClause)\n      .groupBy(processes.responsibleId);\n    \n    const responsibleCompletedMap = new Map<number, number>();\n    completedByResponsible.forEach(r => \n      responsibleCompletedMap.set(r.responsibleId, r.completed)\n    );\n    \n    return totalByResponsible.map(r => ({\n      responsibleId: r.responsibleId,\n      total: r.total,\n      completed: responsibleCompletedMap.get(r.responsibleId) || 0\n    }));\n  }\n}","size_bytes":26408},"scripts/db-push.ts":{"content":"import { db } from \"../server/db\";\nimport bcrypt from \"bcrypt\";\n\nasync function main() {\n  console.log(\"Pushing schema to database...\");\n  \n  // Create enums\n  try {\n    await db.execute(`\n      DO $$\n      BEGIN\n        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'role') THEN\n          CREATE TYPE role AS ENUM ('common', 'admin');\n        END IF;\n        \n        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'process_status') THEN\n          CREATE TYPE process_status AS ENUM ('draft', 'in_progress', 'completed', 'canceled');\n        END IF;\n        \n        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'priority') THEN\n          CREATE TYPE priority AS ENUM ('low', 'medium', 'high');\n        END IF;\n      END\n      $$;\n    `);\n    console.log(\"Enums created successfully!\");\n  } catch (error) {\n    console.error(\"Error creating enums:\", error);\n  }\n  \n  // Create tables\n  try {\n    await db.execute(`\n      CREATE TABLE IF NOT EXISTS users (\n        id SERIAL PRIMARY KEY,\n        username TEXT NOT NULL UNIQUE,\n        password TEXT NOT NULL,\n        full_name TEXT NOT NULL,\n        email TEXT,\n        department TEXT NOT NULL,\n        role role NOT NULL DEFAULT 'common'\n      );\n\n      CREATE TABLE IF NOT EXISTS departments (\n        id SERIAL PRIMARY KEY,\n        name TEXT NOT NULL UNIQUE,\n        description TEXT\n      );\n\n      CREATE TABLE IF NOT EXISTS bidding_modalities (\n        id SERIAL PRIMARY KEY,\n        name TEXT NOT NULL UNIQUE,\n        description TEXT\n      );\n\n      CREATE TABLE IF NOT EXISTS resource_sources (\n        id SERIAL PRIMARY KEY,\n        code TEXT NOT NULL UNIQUE,\n        description TEXT\n      );\n\n      CREATE TABLE IF NOT EXISTS processes (\n        id SERIAL PRIMARY KEY,\n        pbdoc_number TEXT NOT NULL UNIQUE,\n        description TEXT NOT NULL,\n        modality_id INTEGER NOT NULL,\n        source_id INTEGER NOT NULL,\n        responsible_id INTEGER NOT NULL,\n        status process_status NOT NULL,\n        priority priority NOT NULL,\n        created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n        updated_at TIMESTAMP NOT NULL DEFAULT NOW()\n      );\n\n      CREATE TABLE IF NOT EXISTS process_steps (\n        id SERIAL PRIMARY KEY,\n        process_id INTEGER NOT NULL,\n        step_name TEXT NOT NULL,\n        department_id INTEGER NOT NULL,\n        is_completed BOOLEAN NOT NULL DEFAULT FALSE,\n        observations TEXT,\n        completed_at TIMESTAMP,\n        completed_by INTEGER,\n        due_date TIMESTAMP\n      );\n    `);\n    console.log(\"Tables created successfully!\");\n  } catch (error) {\n    console.error(\"Error creating tables:\", error);\n  }\n\n  console.log(\"Schema pushed successfully!\");\n\n  // Check if admin user exists\n  try {\n    const adminUserResult = await db.execute(`SELECT * FROM users WHERE username = 'admin'`);\n    \n    if (adminUserResult.rows?.length === 0) {\n      console.log(\"Seeding initial admin user...\");\n      \n      // Create admin user\n      const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n      \n      await db.execute(`\n        INSERT INTO users (username, password, full_name, email, department, role)\n        VALUES ('admin', '${hashedPassword}', 'Administrador', 'admin@example.com', 'TI', 'admin')\n      `);\n      \n      console.log(\"Admin user created successfully!\");\n    } else {\n      console.log(\"Admin user already exists, skipping creation.\");\n    }\n  } catch (error) {\n    console.error(\"Error checking/creating admin user:\", error);\n  }\n\n  // Check if common user exists\n  try {\n    const commonUserResult = await db.execute(`SELECT * FROM users WHERE username = 'user'`);\n    \n    if (commonUserResult.rows?.length === 0) {\n      console.log(\"Seeding initial common user...\");\n      \n      // Create common user\n      const hashedPassword = await bcrypt.hash(\"user123\", 10);\n      \n      await db.execute(`\n        INSERT INTO users (username, password, full_name, email, department, role)\n        VALUES ('user', '${hashedPassword}', 'Usuário Comum', 'user@example.com', 'Licitações', 'common')\n      `);\n      \n      console.log(\"Common user created successfully!\");\n    } else {\n      console.log(\"Common user already exists, skipping creation.\");\n    }\n  } catch (error) {\n    console.error(\"Error checking/creating common user:\", error);\n  }\n\n  // Seed initial departments if they don't exist\n  try {\n    const departmentsResult = await db.execute(`SELECT * FROM departments`);\n    \n    if (departmentsResult.rows?.length === 0) {\n      console.log(\"Seeding initial departments...\");\n      \n      await db.execute(`\n        INSERT INTO departments (name, description) VALUES\n          ('TI', 'Tecnologia da Informação'),\n          ('Licitações', 'Departamento de Licitações'),\n          ('Jurídico', 'Departamento Jurídico'),\n          ('Financeiro', 'Departamento Financeiro'),\n          ('Administrativo', 'Departamento Administrativo')\n      `);\n      \n      console.log(\"Departments created successfully!\");\n    } else {\n      console.log(\"Departments already exist, skipping creation.\");\n    }\n  } catch (error) {\n    console.error(\"Error checking/creating departments:\", error);\n  }\n\n  // Seed initial bidding modalities if they don't exist\n  try {\n    const modalitiesResult = await db.execute(`SELECT * FROM bidding_modalities`);\n    \n    if (modalitiesResult.rows?.length === 0) {\n      console.log(\"Seeding initial bidding modalities...\");\n      \n      await db.execute(`\n        INSERT INTO bidding_modalities (name, description) VALUES\n          ('Pregão Eletrônico', 'Modalidade de licitação para aquisição de bens e serviços comuns'),\n          ('Pregão Presencial', 'Modalidade de licitação presencial para aquisição de bens e serviços comuns'),\n          ('Concorrência', 'Modalidade de licitação entre quaisquer interessados'),\n          ('Tomada de Preços', 'Modalidade de licitação entre interessados cadastrados'),\n          ('Convite', 'Modalidade de licitação entre interessados convidados'),\n          ('Concurso', 'Modalidade de licitação para escolha de trabalho técnico, científico ou artístico'),\n          ('Leilão', 'Modalidade de licitação para venda de bens móveis inservíveis ou de produtos legalmente apreendidos'),\n          ('Dispensa de Licitação', 'Contratação direta sem licitação'),\n          ('Inexigibilidade', 'Contratação direta por inviabilidade de competição')\n      `);\n      \n      console.log(\"Bidding modalities created successfully!\");\n    } else {\n      console.log(\"Bidding modalities already exist, skipping creation.\");\n    }\n  } catch (error) {\n    console.error(\"Error checking/creating bidding modalities:\", error);\n  }\n\n  // Seed initial resource sources if they don't exist\n  try {\n    const sourcesResult = await db.execute(`SELECT * FROM resource_sources`);\n    \n    if (sourcesResult.rows?.length === 0) {\n      console.log(\"Seeding initial resource sources...\");\n      \n      await db.execute(`\n        INSERT INTO resource_sources (code, description) VALUES\n          ('TEF', 'Tesouro Estadual Fonte'),\n          ('FSP', 'Fundo de Segurança Pública'),\n          ('FUMPEN', 'Fundo Penitenciário'),\n          ('CONVÊNIO', 'Convênios'),\n          ('DEPEN', 'Departamento Penitenciário Nacional')\n      `);\n      \n      console.log(\"Resource sources created successfully!\");\n    } else {\n      console.log(\"Resource sources already exist, skipping creation.\");\n    }\n  } catch (error) {\n    console.error(\"Error checking/creating resource sources:\", error);\n  }\n\n  console.log(\"Database initialization completed successfully!\");\n}\n\nmain().catch((error) => {\n  console.error(\"Error during database initialization:\", error);\n  process.exit(1);\n});","size_bytes":7715},"server/business-days.ts":{"content":"// Utilitário para cálculo de dias úteis\nexport function addBusinessDays(startDate: Date, days: number): Date {\n  const result = new Date(startDate);\n  let addedDays = 0;\n  \n  while (addedDays < days) {\n    result.setDate(result.getDate() + 1);\n    \n    // Verifica se é fim de semana (sábado = 6, domingo = 0)\n    if (result.getDay() !== 0 && result.getDay() !== 6) {\n      // Verifica se não é feriado nacional\n      if (!isHoliday(result)) {\n        addedDays++;\n      }\n    }\n  }\n  \n  return result;\n}\n\n// Feriados nacionais fixos do Brasil\nfunction isHoliday(date: Date): boolean {\n  const month = date.getMonth() + 1; // getMonth() retorna 0-11\n  const day = date.getDate();\n  \n  // Feriados fixos\n  const fixedHolidays = [\n    { month: 1, day: 1 },   // Confraternização Universal\n    { month: 4, day: 21 },  // Tiradentes\n    { month: 5, day: 1 },   // Dia do Trabalhador\n    { month: 9, day: 7 },   // Independência do Brasil\n    { month: 10, day: 12 }, // Nossa Senhora Aparecida\n    { month: 11, day: 2 },  // Finados\n    { month: 11, day: 15 }, // Proclamação da República\n    { month: 12, day: 25 }, // Natal\n  ];\n  \n  return fixedHolidays.some(holiday => \n    holiday.month === month && holiday.day === day\n  );\n}\n\n// Calcula quantos dias úteis existem entre duas datas\nexport function getBusinessDaysBetween(startDate: Date, endDate: Date): number {\n  let count = 0;\n  const current = new Date(startDate);\n  \n  while (current <= endDate) {\n    if (current.getDay() !== 0 && current.getDay() !== 6 && !isHoliday(current)) {\n      count++;\n    }\n    current.setDate(current.getDate() + 1);\n  }\n  \n  return count;\n}\n\n// Verifica se uma data é dia útil\nexport function isBusinessDay(date: Date): boolean {\n  return date.getDay() !== 0 && date.getDay() !== 6 && !isHoliday(date);\n}","size_bytes":1807},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport path from \"path\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Servir arquivos estáticos da pasta public\napp.use('/downloads', express.static(path.join(process.cwd(), 'public', 'downloads')));\n\n// Servir a página de download estática\napp.use('/download', express.static(path.join(process.cwd(), 'public', 'download')));\n\n// Servir imagens estáticas (incluindo fluxogramas) sem autenticação\napp.use('/', express.static(path.join(process.cwd(), 'public'), {\n  setHeaders: (res, filePath) => {\n    if (filePath.endsWith('.png') || filePath.endsWith('.jpg') || filePath.endsWith('.jpeg') || filePath.endsWith('.gif')) {\n      res.set('Cache-Control', 'public, max-age=86400'); // Cache por 1 dia\n    }\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2600},"server/routes.ts":{"content":"import express, { type Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport path from \"path\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { insertUserSchema, insertDepartmentSchema, insertBiddingModalitySchema, \n         insertResourceSourceSchema, insertProcessSchema, insertProcessStepSchema,\n         insertProcessParticipantSchema, processParticipants } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport MemoryStore from \"memorystore\";\nimport bcrypt from \"bcrypt\";\n// Removido puppeteer - usando alternativa mais simples\n\n// Configuração para meta mensal\nlet monthlyGoal = 200; // Valor padrão\n\n// Clientes WebSocket conectados\nconst clients = new Set<WebSocket>();\n\n// Função para enviar mensagem para todos os clientes conectados\nfunction broadcast(data: any) {\n  clients.forEach(client => {\n    if (client.readyState === WebSocket.OPEN) {\n      client.send(JSON.stringify(data));\n    }\n  });\n}\n\n// Função para criar etapas padrão baseadas na modalidade - NOVO FLUXOGRAMA\nasync function createDefaultSteps(processId: number, modalityId: number, skipForCorrectionZone = false) {\n  // Se for zona de correção (ID 12), não criar etapas padrão\n  if (skipForCorrectionZone) {\n    console.log(`Pulando criação de etapas padrão para processo ${processId} - zona de correção`);\n    return;\n  }\n\n  // Helper para calcular data de vencimento baseada em dias úteis\n  const addBusinessDays = (date: Date, days: number) => {\n    const result = new Date(date);\n    let count = 0;\n    while (count < days) {\n      result.setDate(result.getDate() + 1);\n      if (result.getDay() !== 0 && result.getDay() !== 6) { // Não é domingo (0) ou sábado (6)\n        count++;\n      }\n    }\n    return result;\n  };\n\n  const today = new Date();\n\n  const defaultSteps = [\n    // SETOR DEMANDANTE\n    { name: \"Documento de Formalização da Demanda - DFD\", departmentId: 1, phase: \"Iniciação\", daysLimit: 10 },\n    { name: \"Estudo Técnico Preliminar - ETP\", departmentId: 1, phase: \"Iniciação\", daysLimit: 10 },\n    { name: \"Mapa de Risco - MR\", departmentId: 1, phase: \"Iniciação\", daysLimit: 10 },\n    { name: \"Termo de Referência - TR\", departmentId: 1, phase: \"Iniciação\", daysLimit: 10 },\n    \n    // DIVISÃO DE LICITAÇÃO - PRIMEIRA ETAPA\n    { name: \"Criar Processo - Órgão\", departmentId: 2, phase: \"Preparação\", daysLimit: 2 },\n    { name: \"Fazer Pesquisa de Preço - Órgão\", departmentId: 2, phase: \"Preparação\", daysLimit: 2 },\n    { name: \"Solicitar Pesquisa de Preços\", departmentId: 2, phase: \"Preparação\", daysLimit: 2 },\n    \n    // NÚCLEO DE PESQUISA DE PREÇOS - NPP\n    { name: \"Pesquisa de Preços\", departmentId: 3, phase: \"Preparação\", daysLimit: 10 },\n    { name: \"Mapa Comparativo de Preços\", departmentId: 3, phase: \"Preparação\", daysLimit: 10 },\n    { name: \"Metodologia da Pesquisa de Preços\", departmentId: 3, phase: \"Preparação\", daysLimit: 10 },\n    \n    // DIVISÃO DE LICITAÇÃO - SEGUNDA ETAPA\n    { name: \"Inserir Pesquisa no Sistema\", departmentId: 2, phase: \"Preparação\", daysLimit: 1 },\n    { name: \"Solicitar Análise Orçamentária\", departmentId: 2, phase: \"Preparação\", daysLimit: 1 },\n    \n    // UNIDADE DE ORÇAMENTO E FINANÇAS\n    { name: \"Informar Disponibilidade Orçamentária p/ Emissão de R.O.\", departmentId: 4, phase: \"Execução\", daysLimit: 1 },\n    \n    // SECRETÁRIO DE ESTADO DA ADMINISTRAÇÃO PENITENCIÁRIA - SEAP (AUTORIZAÇÃO)\n    { name: \"Autorização pelo Secretário SEAP\", departmentId: 5, phase: \"Autorização\", daysLimit: 2 },\n    \n    // CONTINUAÇÃO DO FLUXO - ETAPAS CONDICIONAIS BÁSICAS\n    // Estas etapas serão criadas dinamicamente baseadas nas decisões anteriores\n    { name: \"Inserir Dotação Orçamentária\", departmentId: 2, phase: \"Execução\", daysLimit: 10 },\n    { name: \"Elaborar Edital e seus Anexos\", departmentId: 2, phase: \"Execução\", daysLimit: 10 },\n    { name: \"Consultar Comitê Gestor de Gasto Público - CGGP\", departmentId: 2, phase: \"Execução\", daysLimit: 10 },\n    \n    // COMITÊ GESTOR DE PLANO DE CONTINGÊNCIA - CGPC (ID verificado: 6)\n    { name: \"Autorizar - Comitê Gestor de Plano de Contingência\", departmentId: 6, phase: \"Execução\", daysLimit: 3 },\n    \n    // UNIDADE TÉCNICO NORMATIVA (ID verificado: 7)\n    { name: \"Elaborar Nota Técnica\", departmentId: 7, phase: \"Execução\", daysLimit: 3 },\n    \n    // SECRETÁRIO SEAP - SOLICITAR PARECER PGE (usando ID do Secretário: 5)\n    { name: \"Solicitar Parecer da PGE\", departmentId: 5, phase: \"Execução\", daysLimit: 2 },\n    \n    // PROCURADORIA GERAL DO ESTADO - PGE (usando ID 8 temporariamente - verificar se existe)\n    { name: \"Parecer Jurídico - PGE\", departmentId: 8, phase: \"Execução\", daysLimit: 10 },\n    \n    // FINALIZAÇÃO - DIVISÃO DE LICITAÇÃO\n    { name: \"Publicar Edital\", departmentId: 2, phase: \"Publicação\", daysLimit: 5 },\n    { name: \"Realizar Sessão Pública de Lances\", departmentId: 2, phase: \"Publicação\", daysLimit: 5 },\n    { name: \"Análise de Documentação dos Licitantes\", departmentId: 2, phase: \"Publicação\", daysLimit: 5 },\n    { name: \"Adjudicação e Homologação\", departmentId: 2, phase: \"Publicação\", daysLimit: 5 },\n    \n    // FINALIZAÇÃO - SECRETÁRIO SEAP\n    { name: \"Assinatura do Contrato\", departmentId: 5, phase: \"Finalização\", daysLimit: 5 },\n    { name: \"Publicação do Contrato\", departmentId: 5, phase: \"Finalização\", daysLimit: 5 }\n  ];\n\n  // Etapas condicionais que serão criadas como invisíveis\n  const conditionalSteps = [\n    // Etapas que aparecerão após decisões dos modais\n    { name: \"Autorizar Emissão de R.O\", departmentId: 5, phase: \"Execução\", daysLimit: 2, isVisible: false },\n    { name: \"Solicitar disponibilização de orçamento\", departmentId: 5, phase: \"Preparação\", daysLimit: 3, isVisible: false },\n    { name: \"Devolver para correção ou arquivamento\", departmentId: 5, phase: \"Correção\", daysLimit: 2, isVisible: false },\n    { name: \"Solicitar ajuste/aditivo do plano de trabalho\", departmentId: 5, phase: \"Correção\", daysLimit: 5, isVisible: false },\n    { name: \"Devolver para correção ou cancelar processo\", departmentId: 2, phase: \"Correção\", daysLimit: 2, isVisible: false },\n    { name: \"Arquivar processo\", departmentId: 1, phase: \"Arquivamento\", daysLimit: 1, isVisible: false },\n    { name: \"Arquivar processo - Final\", departmentId: 2, phase: \"Arquivamento\", daysLimit: 1, isVisible: false },\n  ];\n\n  // Criar todas as etapas visíveis para o processo com prazos calculados\n  let currentDate = new Date();\n  \n  for (const step of defaultSteps) {\n    // Calcular prazo baseado nos dias úteis especificados para cada etapa\n    const dueDate = addBusinessDays(currentDate, step.daysLimit);\n    \n    await storage.createProcessStep({\n      processId: processId,\n      stepName: step.name,\n      departmentId: step.departmentId,\n      isCompleted: false,\n      observations: null,\n      completedBy: null,\n      dueDate: dueDate,\n      isVisible: true // Etapas normais são sempre visíveis\n    });\n    \n    // Atualizar a data base para a próxima etapa (considerar que a etapa atual pode ser finalizada imediatamente)\n    currentDate = dueDate;\n  }\n\n  // Criar etapas condicionais como invisíveis\n  for (const step of conditionalSteps) {\n    const dueDate = addBusinessDays(currentDate, step.daysLimit);\n    \n    await storage.createProcessStep({\n      processId: processId,\n      stepName: step.name,\n      departmentId: step.departmentId,\n      isCompleted: false,\n      observations: null,\n      completedBy: null,\n      dueDate: dueDate,\n      isVisible: false // Etapas condicionais são criadas como invisíveis\n    });\n  }\n  \n  console.log(`Criadas ${defaultSteps.length} etapas visíveis e ${conditionalSteps.length} etapas condicionais para o processo ${processId} com novo fluxograma`);\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Configuração para servir arquivos estáticos da pasta de downloads\n  app.use('/downloads', express.static(path.join(process.cwd(), 'public', 'downloads'), {\n    setHeaders: (res, path) => {\n      if (path.endsWith('.rar') || path.endsWith('.zip')) {\n        res.setHeader('Content-Type', 'application/octet-stream');\n        res.setHeader('Content-Disposition', 'attachment');\n      }\n    }\n  }));\n  \n  // Rota direta para download do arquivo (agora usando o middleware static)\n  app.get('/download-app', (req, res) => {\n    // Redirecionar para o arquivo estático\n    res.redirect('/downloads/SEAP-PB-v1.0.0.zip');\n  });\n  \n  // Rota para a página de download pública - sem restrição de autenticação\n  app.get('/download', (req, res) => {\n    // Log de acesso para fins de auditoria\n    console.log('Acesso à página de download pública');\n    res.sendFile(path.join(process.cwd(), 'public', 'download.html'));\n  });\n  // Configurar trust proxy para que as sessões funcionem corretamente em produção\n  app.set('trust proxy', 1);\n  \n  // Setup session\n  const SessionStore = MemoryStore(session);\n  app.use(session({\n    name: 'seap-session',\n    secret: process.env.SESSION_SECRET || 'seap-pb-bidding-system-secure-key-2025',\n    resave: true,\n    saveUninitialized: true,\n    cookie: {\n      maxAge: 30 * 24 * 60 * 60 * 1000, // 30 dias\n      secure: false, // Sempre false para garantir compatibilidade\n      httpOnly: true,\n      sameSite: 'lax',\n      path: '/'\n    },\n    store: new SessionStore({\n      checkPeriod: 86400000 // 24 hours\n    }),\n  }));\n\n  // Setup passport\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(new LocalStrategy(async (username, password, done) => {\n    try {\n      const user = await storage.authenticateUser(username, password);\n      \n      if (!user) {\n        return done(null, false, { message: \"Credenciais inválidas.\" });\n      }\n      \n      if (!user.isActive) {\n        return done(null, false, { message: \"Sua conta ainda não foi ativada por um administrador.\" });\n      }\n      \n      return done(null, user);\n    } catch (error) {\n      console.error(\"Erro na autenticação:\", error);\n      return done(error);\n    }\n  }));\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: number, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user || false);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Authentication endpoints\n  app.post('/api/auth/login', (req, res, next) => {\n    passport.authenticate('local', (err, user, info) => {\n      if (err) {\n        console.error(\"Erro na autenticação:\", err);\n        return res.status(500).json({ message: \"Erro interno na autenticação\" });\n      }\n      \n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Credenciais inválidas\" });\n      }\n      \n      req.login(user, (loginErr) => {\n        if (loginErr) {\n          console.error(\"Erro no login:\", loginErr);\n          return res.status(500).json({ message: \"Erro ao estabelecer sessão\" });\n        }\n        \n        console.log(\"Login bem-sucedido para:\", user.username);\n        return res.json(user);\n      });\n    })(req, res, next);\n  });\n\n  app.get('/api/auth/status', (req, res) => {\n    if (req.isAuthenticated()) {\n      res.json(req.user);\n    } else {\n      res.status(401).json({ message: \"Não autenticado\" });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.logout(() => {\n      res.json({ success: true });\n    });\n  });\n  \n  // Registro de usuários públicos\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      // Valide os dados de entrada\n      const validatedData = insertUserSchema.parse({\n        ...req.body,\n        role: 'common' // Força o papel como 'common' para segurança\n      });\n      \n      // Verifique se o nome de usuário já existe\n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Nome de usuário já existe\" });\n      }\n      \n      // Hash da senha antes de armazenar\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n      \n      // Crie o usuário como inativo (aguardando aprovação do administrador)\n      const user = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword,\n        isActive: false // Usuário precisa ser ativado por um administrador\n      });\n      \n      res.status(201).json({ \n        ...user, \n        password: '***',\n        message: \"Cadastro realizado com sucesso. Aguarde a aprovação de um administrador para acessar o sistema.\"\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: \"Dados de usuário inválidos\", error: error.message });\n    }\n  });\n\n  // Middleware to check if user is authenticated\n  const isAuthenticated = (req: Request, res: Response, next: Function) => {\n    if (req.isAuthenticated()) {\n      return next();\n    }\n    res.status(401).json({ message: \"Não autorizado\" });\n  };\n\n  // Middleware to check if user is admin\n  const isAdmin = (req: Request, res: Response, next: Function) => {\n    if (req.isAuthenticated() && (req.user as any)?.role === 'admin') {\n      return next();\n    }\n    res.status(403).json({ message: \"Acesso proibido\" });\n  };\n\n\n\n  // User routes\n  app.get('/api/users', isAuthenticated, async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar usuários\", error });\n    }\n  });\n\n  app.get('/api/users/:id', isAuthenticated, async (req, res) => {\n    try {\n      const user = await storage.getUser(parseInt(req.params.id));\n      if (!user) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n      res.json({ ...user, password: '***' });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar usuário\", error });\n    }\n  });\n\n  app.post('/api/users', isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(validatedData);\n      res.status(201).json({ ...user, password: '***' });\n    } catch (error) {\n      res.status(400).json({ message: \"Dados de usuário inválidos\", error });\n    }\n  });\n\n  app.patch('/api/users/:id', isAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userData = req.body;\n      const updatedUser = await storage.updateUser(id, userData);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n      \n      res.json(updatedUser);\n    } catch (error) {\n      res.status(400).json({ message: \"Erro ao atualizar usuário\", error });\n    }\n  });\n  \n  app.delete('/api/users/:id', isAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      // Verificar se é o usuário administrador padrão\n      if (id === 1) {\n        return res.status(403).json({ message: \"Não é possível excluir o usuário administrador padrão\" });\n      }\n      \n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n      \n      // Implementar a exclusão do usuário\n      await storage.deleteUser(id);\n      \n      res.status(200).json({ message: \"Usuário excluído com sucesso\" });\n    } catch (error) {\n      console.error(\"Erro ao excluir usuário:\", error);\n      res.status(500).json({ message: \"Erro ao excluir usuário\", error });\n    }\n  });\n\n  // Department routes\n  app.get('/api/departments', isAuthenticated, async (req, res) => {\n    try {\n      const departments = await storage.getDepartments();\n      res.json(departments);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar departamentos\", error });\n    }\n  });\n\n  app.post('/api/departments', isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertDepartmentSchema.parse(req.body);\n      const department = await storage.createDepartment(validatedData);\n      res.status(201).json(department);\n    } catch (error) {\n      res.status(400).json({ message: \"Dados de departamento inválidos\", error });\n    }\n  });\n\n  // Bidding modality routes\n  app.get('/api/modalities', isAuthenticated, async (req, res) => {\n    try {\n      const modalities = await storage.getBiddingModalities();\n      res.json(modalities);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar modalidades\", error });\n    }\n  });\n\n  app.post('/api/modalities', isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertBiddingModalitySchema.parse(req.body);\n      const modality = await storage.createBiddingModality(validatedData);\n      res.status(201).json(modality);\n    } catch (error) {\n      res.status(400).json({ message: \"Dados de modalidade inválidos\", error });\n    }\n  });\n\n  // Resource source routes\n  app.get('/api/sources', isAuthenticated, async (req, res) => {\n    try {\n      const sources = await storage.getResourceSources();\n      res.json(sources);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar fontes de recurso\", error });\n    }\n  });\n  \n  // Rota alternativa para manter consistência com o nome do modelo\n  app.get('/api/resource-sources', isAuthenticated, async (req, res) => {\n    try {\n      const sources = await storage.getResourceSources();\n      res.json(sources);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar fontes de recurso\", error });\n    }\n  });\n\n  app.post('/api/sources', isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertResourceSourceSchema.parse(req.body);\n      const source = await storage.createResourceSource(validatedData);\n      res.status(201).json(source);\n    } catch (error) {\n      res.status(400).json({ message: \"Dados de fonte de recurso inválidos\", error });\n    }\n  });\n\n  // Process routes\n  // Rotas da lixeira eletrônica (devem vir antes das rotas com parâmetros)\n  app.get('/api/processes/deleted', isAuthenticated, async (req, res) => {\n    try {\n      console.log(\"Buscando processos excluídos...\");\n      const deletedProcesses = await storage.getDeletedProcesses();\n      console.log(`Encontrados ${deletedProcesses.length} processos excluídos`);\n      res.json(deletedProcesses);\n    } catch (error) {\n      console.error(\"Erro ao buscar processos excluídos:\", error);\n      res.status(500).json({ message: \"Erro ao buscar processos excluídos\", error });\n    }\n  });\n\n  app.get('/api/processes', isAuthenticated, async (req, res) => {\n    try {\n      const { pbdoc, modality, source, responsible, status } = req.query;\n      const userId = (req.user as any).id;\n      const userRole = (req.user as any).role;\n      const userDepartment = (req.user as any).department;\n      \n      // ADMIN TEM ACESSO TOTAL A TODOS OS PROCESSOS\n      if (userRole === 'admin') {\n        const filters = {\n          pbdocNumber: pbdoc as string | undefined,\n          modalityId: modality ? parseInt(modality as string) : undefined,\n          sourceId: source ? parseInt(source as string) : undefined,\n          responsibleId: responsible ? parseInt(responsible as string) : undefined,\n          status: status as string | undefined\n          // NÃO filtrar por departamento para admin\n        };\n        \n        const processes = await storage.getProcesses(filters);\n        return res.json(processes);\n      }\n      \n      // USUÁRIOS COMUNS: Visibilidade restrita por departamento\n      const departmentIdMap: { [key: string]: number } = {\n        \"Setor Demandante\": 1,\n        \"TI\": 1,\n        \"Divisão de Licitação\": 2,\n        \"Licitações\": 2,\n        \" Núcleo de Pesquisa  de Preços – NPP  Núcleo de Pes\": 3,\n        \"Unidade de  Orçamento e  Finanças\": 4,\n        \"Financeiro\": 4,\n        \"Secretário de Estado da Administração Penitenciária - SEAP\": 5,\n        \" Comitê Gestor do Plano de  Contingência - CGPC\": 6,\n        \"Unidade Técnico Normativa\": 7,\n        \"Procuradoria Geral do Estado - PGE\": 8,\n        \" Controladoria Geral do Estado – CGE\": 9,\n        \"Equipe de Pregão\": 10,\n        \"Subgerência de Contratos e  Convênios - SUBCC\": 11\n      };\n\n      const userDepartmentId = departmentIdMap[userDepartment];\n      \n      if (!userDepartmentId) {\n        return res.status(403).json({ message: \"Departamento não reconhecido\" });\n      }\n      \n      const filters = {\n        pbdocNumber: pbdoc as string | undefined,\n        modalityId: modality ? parseInt(modality as string) : undefined,\n        sourceId: source ? parseInt(source as string) : undefined,\n        responsibleId: responsible ? parseInt(responsible as string) : undefined,\n        status: status as string | undefined,\n        currentDepartmentId: userDepartmentId\n      };\n      \n      const allProcesses = await storage.getProcesses(filters);\n      \n      // FILTRO ADICIONAL DE SEGURANÇA para usuários comuns\n      const filteredProcesses = allProcesses.filter(process => {\n        return process.currentDepartmentId === userDepartmentId;\n      });\n      \n      res.json(filteredProcesses);\n    } catch (error) {\n      console.error(\"Erro ao buscar processos:\", error);\n      res.status(500).json({ message: \"Erro ao buscar processos\", error });\n    }\n  });\n\n  app.get('/api/processes/:id', isAuthenticated, async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const userId = (req.user as any).id;\n      \n      // Busca o processo verificando se o usuário tem acesso\n      const process = await storage.getProcess(processId, userId);\n      \n      if (!process) {\n        return res.status(404).json({ message: \"Processo não encontrado ou acesso negado\" });\n      }\n      res.json(process);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar processo\", error });\n    }\n  });\n\n  app.post('/api/processes', isAuthenticated, async (req, res) => {\n    try {\n      console.log('Dados recebidos para criação de processo:', JSON.stringify(req.body, null, 2));\n      \n      // Pré-processamento para garantir que o formato dos dados esteja correto\n      const processData = { ...req.body };\n      \n      // Testes de validação manual antes de usar o Zod\n      if (!processData.pbdocNumber || typeof processData.pbdocNumber !== 'string') {\n        return res.status(400).json({\n          message: 'Dados inválidos',\n          error: 'Número PBDOC é obrigatório e deve ser uma string'\n        });\n      }\n      \n      if (!processData.description || typeof processData.description !== 'string') {\n        return res.status(400).json({\n          message: 'Dados inválidos',\n          error: 'Descrição/Objeto é obrigatório e deve ser uma string'\n        });\n      }\n      \n      // Verificar e converter campos numéricos\n      for (const field of ['modalityId', 'sourceId', 'responsibleId', 'currentDepartmentId']) {\n        if (processData[field] === undefined || processData[field] === null) {\n          return res.status(400).json({\n            message: 'Dados inválidos',\n            error: `Campo ${field} é obrigatório`\n          });\n        }\n        \n        const numValue = Number(processData[field]);\n        if (isNaN(numValue)) {\n          return res.status(400).json({\n            message: 'Dados inválidos',\n            error: `Campo ${field} deve ser um número válido`\n          });\n        }\n        \n        processData[field] = numValue;\n      }\n      \n      // Verificar enum de prioridade\n      if (!['low', 'medium', 'high'].includes(processData.priority)) {\n        return res.status(400).json({\n          message: 'Dados inválidos',\n          error: 'Prioridade deve ser low, medium ou high'\n        });\n      }\n      \n      // Verificar enum de status\n      if (processData.status && !['draft', 'in_progress', 'completed', 'canceled', 'overdue'].includes(processData.status)) {\n        return res.status(400).json({\n          message: 'Dados inválidos',\n          error: 'Status deve ser draft, in_progress, completed, canceled ou overdue'\n        });\n      }\n      \n      // Ajustar campos específicos que podem causar problemas de validação\n      if (processData.deadline === '') {\n        processData.deadline = null;\n      }\n      \n      console.log('Dados pré-processados:', JSON.stringify(processData, null, 2));\n      \n      // Usar Zod para validação final\n      let validatedData;\n      // Converter deadline para Date antes da validação, se existir\n      if (processData.deadline && typeof processData.deadline === 'string') {\n        try {\n          processData.deadline = new Date(processData.deadline);\n        } catch (error) {\n          return res.status(400).json({\n            message: 'Dados inválidos',\n            error: 'Formato de data inválido para o prazo'\n          });\n        }\n      }\n\n      try {\n        validatedData = insertProcessSchema.parse(processData);\n      } catch (zodError: any) {\n        console.error(\"Erros de validação Zod:\", zodError);\n        return res.status(400).json({ \n          message: \"Dados de processo inválidos\", \n          errors: zodError.errors || zodError.message\n        });\n      }\n      \n      // Definir a data em que o responsável assumiu o processo\n      validatedData.responsibleSince = new Date();\n      \n      // Calcular prazo automaticamente baseado na modalidade\n      const modality = await storage.getBiddingModality(validatedData.modalityId);\n      if (modality) {\n        const deadlineDays = modality.deadlineDays || 7; // Default 7 dias se não especificado\n        const deadline = new Date();\n        deadline.setDate(deadline.getDate() + deadlineDays);\n        validatedData.deadline = deadline;\n        console.log(`Prazo de entrega calculado automaticamente: ${deadlineDays} dias - ${validatedData.deadline}`);\n      }\n      \n      console.log('Dados validados para criação de processo:', validatedData);\n      \n      // Criar o processo no banco de dados\n      const process = await storage.createProcess(validatedData);\n      \n      const userId = (req.user as any).id;\n      const currentDepartmentId = process.currentDepartmentId;\n      \n      console.log(`Criando processo: ${process.id}, departamento: ${currentDepartmentId}`);\n      \n      // Criar etapas padrão baseadas na modalidade\n      await createDefaultSteps(process.id, process.modalityId);\n      \n      // Adicionar o criador como participante do processo (role: owner)\n      await storage.addProcessParticipant({\n        processId: process.id,\n        userId: userId,\n        departmentId: currentDepartmentId,\n        role: 'owner',\n        isActive: true\n      });\n\n      // Adicionar registro ao histórico de responsabilidades\n      const currentUser = await storage.getUser(userId);\n      await storage.addProcessResponsibilityHistory({\n        processId: process.id,\n        userId: userId,\n        action: 'created',\n        description: `Processo criado por ${currentUser?.fullName || 'Usuário'}`,\n        departmentId: currentDepartmentId\n      });\n      \n      // Se o responsável pelo processo for diferente do criador, adiciona-o também\n      if (process.responsibleId !== userId) {\n        await storage.addProcessParticipant({\n          processId: process.id,\n          userId: process.responsibleId,\n          departmentId: currentDepartmentId,\n          role: 'editor',\n          isActive: true\n        });\n      }\n      \n      // Notificar todos os clientes sobre o novo processo criado\n      broadcast({\n        type: 'new_process',\n        process,\n        message: `Novo processo criado: ${process.description}`,\n        timestamp: new Date().toISOString()\n      });\n      \n      res.status(201).json(process);\n    } catch (error: any) {\n      console.error(\"Erro ao criar processo:\", error);\n      res.status(400).json({ \n        message: \"Dados de processo inválidos\", \n        error: error.message || \"Erro desconhecido\" \n      });\n    }\n  });\n\n  app.patch('/api/processes/:id', isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      console.log(`Dados recebidos para atualização do processo ${id}:`, req.body);\n      \n      // Verificar se o processo existe antes de atualizar\n      const existingProcess = await storage.getProcess(id);\n      if (!existingProcess) {\n        return res.status(404).json({ message: \"Processo não encontrado\" });\n      }\n      \n      const processData = req.body;\n      \n      // Verificar se há alteração do responsável\n      if (processData.responsibleId && processData.responsibleId !== existingProcess.responsibleId) {\n        // Se o responsável mudou, atualizar a data de início da responsabilidade\n        processData.responsibleSince = new Date();\n        console.log(`Responsável do processo alterado. Novo responsável: ${processData.responsibleId}, desde: ${processData.responsibleSince}`);\n      }\n      \n      // Converter prazo de entrega para formato de data se existir\n      if (processData.deadline && typeof processData.deadline === 'string') {\n        processData.deadline = new Date(processData.deadline);\n        console.log(`Prazo de entrega definido: ${processData.deadline}`);\n      }\n      \n      const updatedProcess = await storage.updateProcess(id, processData);\n      console.log(`Processo ${id} atualizado:`, updatedProcess);\n\n      // Adicionar registro ao histórico de responsabilidades\n      const userId = (req.user as any).id;\n      const currentUser = await storage.getUser(userId);\n      await storage.addProcessResponsibilityHistory({\n        processId: id,\n        userId: userId,\n        action: 'updated',\n        description: `Processo modificado por ${currentUser?.fullName || 'Usuário'}`,\n        departmentId: updatedProcess?.currentDepartmentId || existingProcess.currentDepartmentId\n      });\n      \n      if (!updatedProcess) {\n        return res.status(404).json({ message: \"Processo não encontrado\" });\n      }\n      \n      // Notificar alteração via WebSocket\n      broadcast({\n        type: 'process_updated',\n        processId: id,\n        message: `Processo ${updatedProcess.pbdocNumber} foi atualizado`\n      });\n      \n      res.json(updatedProcess);\n    } catch (error) {\n      console.error(\"Erro ao atualizar processo:\", error);\n      res.status(400).json({ message: \"Erro ao atualizar processo\", error });\n    }\n  });\n\n  app.delete('/api/processes/:id', isAdmin, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = (req.user as any).id;\n      const { deletionReason } = req.body;\n      \n      if (!deletionReason || deletionReason.trim().length < 10) {\n        return res.status(400).json({ message: \"Motivo da exclusão é obrigatório (mínimo 10 caracteres)\" });\n      }\n      \n      const deleted = await storage.deleteProcess(id, userId, deletionReason.trim());\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Processo não encontrado\" });\n      }\n      \n      // Notificar exclusão via WebSocket\n      broadcast({\n        type: 'process_deleted',\n        processId: id,\n        message: `Processo movido para a lixeira`,\n        timestamp: new Date().toISOString()\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao deletar processo\", error });\n    }\n  });\n\n\n\n  app.post('/api/processes/:id/restore', isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const userId = (req.user as any).id;\n      \n      console.log(`Rota restaurar: processId=${id}, userId=${userId}`);\n      \n      const restoredProcess = await storage.restoreProcess(id, userId);\n      \n      if (!restoredProcess) {\n        console.log(`Falha ao restaurar processo ${id}`);\n        return res.status(404).json({ message: \"Processo não encontrado na lixeira\" });\n      }\n      \n      console.log(`Processo ${id} restaurado com sucesso`);\n      \n      // Notificar restauração via WebSocket\n      broadcast({\n        type: 'process_restored',\n        processId: id,\n        message: `Processo ${restoredProcess.pbdocNumber} foi restaurado`,\n        timestamp: new Date().toISOString()\n      });\n      \n      res.json(restoredProcess);\n    } catch (error) {\n      console.error('Erro na rota restaurar:', error);\n      res.status(500).json({ message: \"Erro ao restaurar processo\", error });\n    }\n  });\n\n  app.delete('/api/processes/:id/permanent', isAuthenticated, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      \n      console.log(`Rota excluir permanente: processId=${id}`);\n      \n      const deleted = await storage.permanentlyDeleteProcess(id);\n      \n      if (!deleted) {\n        console.log(`Falha ao excluir permanentemente processo ${id}`);\n        return res.status(404).json({ message: \"Processo não encontrado na lixeira\" });\n      }\n      \n      console.log(`Processo ${id} excluído permanentemente com sucesso`);\n      \n      // Notificar exclusão permanente via WebSocket\n      broadcast({\n        type: 'process_permanently_deleted',\n        processId: id,\n        message: `Processo excluído permanentemente`,\n        timestamp: new Date().toISOString()\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error('Erro na rota excluir permanente:', error);\n      res.status(500).json({ message: \"Erro ao excluir processo permanentemente\", error });\n    }\n  });\n  \n  // Rotas para gerenciar participantes de um processo\n  app.get('/api/processes/:id/participants', isAuthenticated, async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const userId = (req.user as any).id;\n      \n      // Verifica se o usuário tem acesso ao processo\n      const process = await storage.getProcess(processId, userId);\n      if (!process) {\n        return res.status(404).json({ message: \"Processo não encontrado ou acesso negado\" });\n      }\n      \n      const participants = await storage.getProcessParticipants(processId);\n      res.json(participants);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar participantes\", error });\n    }\n  });\n  \n  app.post('/api/processes/:id/participants', isAuthenticated, async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const userId = (req.user as any).id;\n      \n      // Verifica se o usuário tem acesso ao processo e se é admin ou owner\n      const process = await storage.getProcess(processId, userId);\n      if (!process) {\n        return res.status(404).json({ message: \"Processo não encontrado ou acesso negado\" });\n      }\n      \n      // Verifica se o usuário tem permissão para adicionar participantes\n      const isUserAdmin = (req.user as any).role === 'admin';\n      if (!isUserAdmin) {\n        // Busca o papel do usuário no processo\n        const participants = await storage.getProcessParticipants(processId);\n        const userParticipant = participants.find(p => p.userId === userId);\n        \n        // Apenas donos do processo podem adicionar participantes\n        if (!userParticipant || userParticipant.role !== 'owner') {\n          return res.status(403).json({ message: \"Permissão negada para adicionar participantes\" });\n        }\n      }\n      \n      // Valida e adiciona o participante\n      const validatedData = insertProcessParticipantSchema.parse({\n        ...req.body,\n        processId\n      });\n      \n      const participant = await storage.addProcessParticipant(validatedData);\n      \n      // Notificar usuário adicionado ao processo\n      broadcast({\n        type: 'process_participant_added',\n        processId,\n        userId: validatedData.userId,\n        message: `Você foi adicionado ao processo ${process.pbdocNumber}`,\n        timestamp: new Date().toISOString()\n      });\n      \n      res.status(201).json(participant);\n    } catch (error) {\n      res.status(400).json({ message: \"Dados inválidos\", error });\n    }\n  });\n  \n  app.delete('/api/processes/:id/participants/:userId', isAuthenticated, async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const participantId = parseInt(req.params.userId);\n      const currentUserId = (req.user as any).id;\n      \n      // Verifica se o usuário tem acesso ao processo e se é admin ou owner\n      const process = await storage.getProcess(processId, currentUserId);\n      if (!process) {\n        return res.status(404).json({ message: \"Processo não encontrado ou acesso negado\" });\n      }\n      \n      // Verifica se o usuário tem permissão para remover participantes\n      const isUserAdmin = (req.user as any).role === 'admin';\n      if (!isUserAdmin && participantId !== currentUserId) { // Usuários podem remover a si mesmos\n        // Busca o papel do usuário no processo\n        const participants = await storage.getProcessParticipants(processId);\n        const userParticipant = participants.find(p => p.userId === currentUserId);\n        \n        // Apenas donos do processo podem remover participantes\n        if (!userParticipant || userParticipant.role !== 'owner') {\n          return res.status(403).json({ message: \"Permissão negada para remover participantes\" });\n        }\n      }\n      \n      const success = await storage.removeProcessParticipant(processId, participantId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Participante não encontrado\" });\n      }\n      \n      res.status(204).end();\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao remover participante\", error });\n    }\n  });\n  \n  // Rota para retornar processo ao departamento anterior\n  app.post('/api/processes/:id/return', isAuthenticated, async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const { returnComment, comment, targetDepartmentId, departmentId } = req.body;\n      const userId = req.user?.id;\n\n      console.log(`=== RETORNO DE PROCESSO ===`);\n      console.log(`Process ID: ${processId}`);\n      console.log(`User ID: ${userId}`);\n      console.log(`Request Body:`, JSON.stringify(req.body, null, 2));\n      // Suporte para ambos os formatos: returnComment (ProcessReturn) e comment (ProcessTransfer)\n      const commentText = returnComment || comment;\n      \n      console.log(`returnComment value: \"${returnComment}\"`);\n      console.log(`comment value: \"${comment}\"`);\n      console.log(`commentText value: \"${commentText}\"`);\n      console.log(`commentText type: ${typeof commentText}`);\n      console.log(`commentText trim: \"${commentText?.trim()}\"`);\n      // Suporte para ambos os formatos: targetDepartmentId e departmentId\n      const targetDeptId = targetDepartmentId || departmentId;\n      console.log(`targetDepartmentId: ${targetDepartmentId}`);\n      console.log(`departmentId: ${departmentId}`);\n      console.log(`targetDeptId final: ${targetDeptId}`);\n\n      if (!userId) {\n        console.log(`❌ Usuário não autenticado`);\n        return res.status(401).json({ message: \"Usuário não autenticado\" });\n      }\n\n      if (!commentText || commentText.trim() === '') {\n        console.log(`❌ Comentário de retorno é obrigatório - commentText: \"${commentText}\"`);\n        return res.status(400).json({ message: \"Comentário de retorno é obrigatório\" });\n      }\n\n      console.log(`✅ Validações passaram, chamando storage.returnProcess`);\n\n      const updatedProcess = await storage.returnProcess(processId, commentText.trim(), userId, targetDeptId);\n      \n      if (!updatedProcess) {\n        console.log(`❌ Processo não encontrado no storage`);\n        return res.status(404).json({ message: \"Processo não encontrado\" });\n      }\n\n      console.log(`✅ Processo retornado com sucesso:`, updatedProcess);\n\n      // Obter dados do usuário para o histórico\n      const user = await storage.getUser(userId);\n      \n      // Adicionar ao histórico de responsabilidades\n      await storage.addProcessResponsibilityHistory({\n        processId: processId,\n        userId: userId,\n        action: 'returned',\n        description: `Processo retornado por ${user?.fullName || 'Usuário'} com comentário: ${commentText.trim()}`,\n        departmentId: updatedProcess.currentDepartmentId\n      });\n\n      // Notificar via WebSocket sobre o retorno\n      broadcast({\n        type: 'process_returned',\n        processId: processId,\n        returnComment: commentText.trim(),\n        returnedBy: userId,\n        timestamp: new Date().toISOString()\n      });\n\n      res.json(updatedProcess);\n    } catch (error: any) {\n      console.error('❌ Erro ao retornar processo:', error);\n      res.status(500).json({ \n        message: \"Erro interno do servidor ao retornar processo\",\n        error: error.message \n      });\n    }\n  });\n\n  // Rota para transferir processo entre departamentos/setores\n  app.post('/api/processes/:id/transfer', isAuthenticated, async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const departmentId = parseInt(req.body.departmentId);\n      const userId = (req.user as any).id;\n      \n      console.log(`INICIANDO TRANSFERÊNCIA: Processo ${processId} para departamento ${departmentId} pelo usuário ${userId}`);\n      \n      // Verificar se o processo existe e se o usuário tem acesso\n      const process = await storage.getProcess(processId, userId);\n      if (!process) {\n        return res.status(404).json({ message: \"Processo não encontrado ou você não tem permissão para acessá-lo\" });\n      }\n      \n      // Verificar se o departamento de destino existe\n      const department = await storage.getDepartment(departmentId);\n      if (!department) {\n        return res.status(404).json({ message: \"Departamento/setor não encontrado\" });\n      }\n      \n      // Obter informações do usuário e departamento atual\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"Usuário não encontrado\" });\n      }\n      \n      console.log(`Usuário transferindo: ${user.username}, Departamento: ${user.department}`);\n      \n      const oldDepartmentId = process.currentDepartmentId;\n      \n      // 1. Atualizar departamento do processo e data do responsável (quando o processo é transferido, o responsável passa a ser o novo usuário)\n      const updatedProcess = await storage.updateProcess(processId, {\n        currentDepartmentId: departmentId,\n        responsibleId: userId,\n        responsibleSince: new Date()\n      });\n      \n      if (!updatedProcess) {\n        return res.status(500).json({ message: \"Erro ao atualizar o departamento do processo\" });\n      }\n      \n      // 2. IMPORTANTE: Remover TODOS os participantes do processo\n      console.log(`Removendo todos os participantes do processo ${processId} para forçar exclusão de visibilidade`);\n      \n      // Obter os participantes atuais para log\n      const currentParticipants = await storage.getProcessParticipants(processId);\n      console.log(`Participantes atuais: ${currentParticipants.length}`);\n      \n      // Excluir todos os participantes - não usar removeProcessParticipant pois ele remove um por um\n      await db.delete(processParticipants).where(eq(processParticipants.processId, processId));\n      \n      // 3. Adicionar usuário do departamento destino como participante (se não for o responsável)\n      if (updatedProcess.responsibleId !== userId) {\n        console.log(`Adicionando usuário ${userId} como novo participante do processo ${processId}`);\n        await storage.addProcessParticipant({\n          processId,\n          userId,\n          role: 'participant',\n          isActive: true,\n          departmentId,\n          notifications: true\n        });\n      }\n      \n      // 4. Registrar a transferência no histórico\n      await storage.createProcessStep({\n        processId,\n        departmentId,\n        userId,\n        action: `Transferido do departamento ${oldDepartmentId} para ${departmentId}`,\n        stepName: \"Transferência de Setor\",\n        createdAt: new Date()\n      });\n\n      // 5. Adicionar ao histórico de responsabilidades\n      await storage.addProcessResponsibilityHistory({\n        processId: processId,\n        userId: userId,\n        action: 'transferred',\n        description: `Processo transferido para ${department.name} por ${user.fullName}`,\n        departmentId: departmentId\n      });\n      \n      // 6. SUBCC (departmentId = 11) - REMOVIDO ARQUIVAMENTO AUTOMÁTICO\n      // Agora o SUBCC tem etapa interativa \"Fluxo reavaliação do plano de trabalho\" com modal de confirmação\n      \n      if (departmentId === 4) {\n        // Verificar se vem de \"Solicitar disponibilização de orçamento\" concluída\n        const processSteps = await storage.getProcessSteps(processId);\n        const budgetRequestStep = processSteps.find(s => \n          s.stepName === \"Solicitar disponibilização de orçamento\" && s.isCompleted\n        );\n        \n        if (budgetRequestStep) {\n          console.log(`Processo ${processId} transferido para Unidade de Orçamento e Finanças após solicitação de disponibilização - criando Fluxo Repror`);\n          \n          // Criar etapa \"Fluxo Repror\" se não existir\n          const hasReprorStep = processSteps.find(s => s.stepName === \"Fluxo Repror\");\n          if (!hasReprorStep) {\n            await storage.createProcessStep({\n              processId: processId,\n              stepName: \"Fluxo Repror\",\n              departmentId: 4,\n              isCompleted: false,\n              isVisible: true,\n              observations: \"Fluxo Repror criado automaticamente após transferência por solicitação de disponibilização de orçamento\"\n            });\n            console.log(`Etapa \"Fluxo Repror\" criada para processo ${processId}`);\n          }\n        } else {\n          // REMOVIDO: Arquivamento automático por Fluxo Repror\n          // O arquivamento deve ser manual através do modal de confirmação\n          console.log(`Processo ${processId} transferido para Unidade de Orçamento e Finanças - fluxo normal`);\n        }\n      } else {\n        // Verificar se processo foi transferido para Divisão de Licitação e tem primeira etapa de correção concluída\n        if (departmentId === 2) {\n          const processSteps = await storage.getProcessSteps(processId);\n          const firstCorrectionCompleted = processSteps?.find(s => \n            s.stepName === \"Devolver para correção ou arquivamento\" && \n            s.isCompleted === true\n          );\n          \n          if (firstCorrectionCompleted) {\n            console.log(`Processo ${processId} transferido para Divisão de Licitação com primeira correção concluída - tornando visível segunda etapa`);\n            \n            // Buscar etapa \"Devolver para correção ou cancelar processo\" invisível\n            const allSteps = await storage.getAllProcessSteps(processId);\n            const secondCorrectionStep = allSteps?.find(s => \n              s.stepName === \"Devolver para correção ou cancelar processo\" && \n              s.isVisible === false\n            );\n            \n            if (secondCorrectionStep) {\n              // Tornar visível a segunda etapa de correção\n              await storage.updateProcessStep(secondCorrectionStep.id, {\n                isVisible: true\n              });\n              console.log(`Etapa \"Devolver para correção ou cancelar processo\" tornada visível para processo ${processId}`);\n            } else {\n              console.log(`Etapa \"Devolver para correção ou cancelar processo\" não encontrada como invisível para processo ${processId}`);\n            }\n          }\n        }\n        \n        // Notificar transferência normal via WebSocket\n        broadcast({\n          type: 'process_transferred',\n          processId,\n          oldDepartmentId,\n          departmentId,\n          message: `Processo ${process.pbdocNumber} transferido de ${oldDepartmentId} para ${department.name}`,\n          timestamp: new Date().toISOString()\n        });\n        \n        console.log(`Transferência concluída: Processo ${processId} transferido para departamento ${departmentId}`);\n      }\n      \n      res.status(200).json(updatedProcess);\n    } catch (error) {\n      console.error(\"Erro ao transferir processo:\", error);\n      res.status(500).json({ message: \"Erro ao transferir processo\", error: String(error) });\n    }\n  });\n\n  // Process steps routes\n  app.get('/api/processes/:processId/steps', isAuthenticated, async (req, res) => {\n    try {\n      const processId = parseInt(req.params.processId);\n      console.log(`Buscando etapas para o processo ${processId}`);\n      \n      if (isNaN(processId)) {\n        console.log(\"ID do processo é inválido:\", req.params.processId);\n        return res.status(400).json({ message: \"ID do processo inválido\" });\n      }\n      \n      console.log(\"Iniciando consulta de etapas no storage...\");\n      const steps = await storage.getProcessSteps(processId);\n      console.log(`Etapas encontradas para processo ${processId}:`, steps?.length || 0);\n      \n      // Retornar array vazio se não houver etapas\n      res.json(steps || []);\n    } catch (error) {\n      console.error(\"Erro completo ao buscar etapas:\", error);\n      console.error(\"Stack trace:\", error instanceof Error ? error.stack : 'No stack trace');\n      res.status(500).json({ \n        message: \"Erro ao buscar etapas do processo\", \n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  // Rota para buscar TODAS as etapas (incluindo invisíveis) para um processo\n  app.get('/api/processes/:processId/steps/all', isAuthenticated, async (req, res) => {\n    try {\n      const processId = parseInt(req.params.processId);\n      console.log(`Buscando TODAS as etapas (incluindo invisíveis) para o processo ${processId}`);\n      \n      if (isNaN(processId)) {\n        console.log(\"ID do processo é inválido:\", req.params.processId);\n        return res.status(400).json({ message: \"ID do processo inválido\" });\n      }\n      \n      const allSteps = await storage.getAllProcessSteps(processId);\n      console.log(`Todas as etapas encontradas para processo ${processId}:`, allSteps?.length || 0);\n      \n      res.json(allSteps || []);\n    } catch (error) {\n      console.error(\"Erro completo ao buscar todas as etapas:\", error);\n      res.status(500).json({ \n        message: \"Erro ao buscar todas as etapas do processo\", \n        error: error instanceof Error ? error.message : String(error)\n      });\n    }\n  });\n\n  // Rota para buscar etapas rejeitadas (apenas para administradores)\n  app.get('/api/steps/rejected', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const rejectedSteps = await storage.getRejectedSteps();\n      res.json(rejectedSteps);\n    } catch (error) {\n      console.error(\"Erro ao buscar etapas rejeitadas:\", error);\n      res.status(500).json({ message: \"Erro ao buscar etapas rejeitadas\", error });\n    }\n  });\n\n  // Rota para buscar histórico de responsabilidades de um processo específico\n  app.get('/api/processes/:processId/responsibility-history', isAuthenticated, async (req, res) => {\n    try {\n      const processId = parseInt(req.params.processId);\n      console.log(`Buscando histórico de responsabilidades para o processo ${processId}`);\n      \n      if (isNaN(processId)) {\n        return res.status(400).json({ message: \"ID de processo inválido\" });\n      }\n      \n      const history = await storage.getProcessResponsibilityHistoryWithDetails(processId);\n      console.log(`Histórico encontrado para processo ${processId}: ${history.length} registros`);\n      \n      res.json(history);\n    } catch (error) {\n      console.error(\"Erro ao buscar histórico de responsabilidades:\", error);\n      res.status(500).json({ message: \"Erro ao buscar histórico de responsabilidades\", error });\n    }\n  });\n\n  app.post('/api/processes/:processId/steps', isAuthenticated, async (req, res) => {\n    try {\n      const processId = parseInt(req.params.processId);\n      const stepData = {\n        ...req.body,\n        processId,\n      };\n      \n      const validatedData = insertProcessStepSchema.parse(stepData);\n      const step = await storage.createProcessStep(validatedData);\n      res.status(201).json(step);\n    } catch (error) {\n      res.status(400).json({ message: \"Dados de etapa inválidos\", error });\n    }\n  });\n\n  app.patch('/api/processes/:processId/steps/:stepId', isAuthenticated, async (req, res) => {\n    try {\n      const stepId = parseInt(req.params.stepId);\n      const stepData = req.body;\n      \n      console.log(`Atualizando etapa ${stepId} com dados:`, stepData);\n      \n      // Buscar a etapa atual para verificar se está bloqueada\n      const currentStep = await storage.getProcessStep(stepId);\n      if (!currentStep) {\n        return res.status(404).json({ message: \"Etapa não encontrada\" });\n      }\n      \n      // BLOQUEIO BACKEND: Impedir atualização de etapas bloqueadas\n      if (currentStep.isLocked && !currentStep.isCompleted && stepData.isCompleted === true) {\n        console.log(`🚫 BACKEND BLOQUEIO: Etapa ${currentStep.stepName} está bloqueada`);\n        return res.status(403).json({ \n          message: \"Esta etapa está bloqueada e não pode ser concluída até que uma decisão seja tomada na 'Autorização pelo Secretário SEAP'\",\n          error: \"STEP_LOCKED\"\n        });\n      }\n      \n      // If marking as completed, add the user who completed it and timestamp\n      if (stepData.isCompleted) {\n        stepData.completedBy = (req.user as any).id;\n        stepData.completedAt = new Date();\n      } else {\n        stepData.completedBy = null;\n        stepData.completedAt = null;\n      }\n      \n      // Handle rejection fields\n      if (stepData.rejectedAt) {\n        stepData.rejectedAt = new Date(stepData.rejectedAt);\n      }\n      \n      console.log(`Dados processados para etapa ${stepId}:`, stepData);\n      \n      const updatedStep = await storage.updateProcessStep(stepId, stepData);\n      \n      if (!updatedStep) {\n        console.log(`Etapa ${stepId} não encontrada`);\n        return res.status(404).json({ message: \"Etapa não encontrada\" });\n      }\n      \n      console.log(`Etapa ${stepId} atualizada com sucesso:`, updatedStep);\n      res.json(updatedStep);\n    } catch (error) {\n      console.error(`Erro ao atualizar etapa ${req.params.stepId}:`, error);\n      res.status(400).json({ message: \"Erro ao atualizar etapa\", error: error instanceof Error ? error.message : String(error) });\n    }\n  });\n\n  // Rota para deletar uma etapa específica\n  app.delete('/api/processes/:processId/steps/:stepId', isAuthenticated, async (req, res) => {\n    try {\n      const stepId = parseInt(req.params.stepId);\n      \n      if (isNaN(stepId)) {\n        return res.status(400).json({ message: \"ID da etapa inválido\" });\n      }\n      \n      console.log(`Deletando etapa ${stepId}`);\n      \n      // Buscar a etapa para verificar se existe\n      const step = await storage.getProcessStep(stepId);\n      if (!step) {\n        return res.status(404).json({ message: \"Etapa não encontrada\" });\n      }\n      \n      // Deletar a etapa\n      await storage.deleteProcessStep(stepId);\n      \n      console.log(`Etapa ${stepId} deletada com sucesso`);\n      res.status(200).json({ message: \"Etapa deletada com sucesso\" });\n    } catch (error) {\n      console.error(\"Erro ao deletar etapa:\", error);\n      res.status(500).json({ message: \"Erro ao deletar etapa\", error });\n    }\n  });\n\n  // Dashboard analytics routes\n  app.get('/api/analytics/process-statistics', isAuthenticated, async (req, res) => {\n    try {\n      // Extrair filtros da query string\n      const { pbdocNumber, modalityId, sourceId, responsibleId, status } = req.query;\n      \n      // Log para debugging\n      console.log('GET /api/analytics/process-statistics - Query params:', req.query);\n      \n      const filters = {\n        pbdocNumber: pbdocNumber as string | undefined,\n        modalityId: modalityId ? parseInt(modalityId as string) : undefined,\n        sourceId: sourceId ? parseInt(sourceId as string) : undefined,\n        responsibleId: responsibleId ? parseInt(responsibleId as string) : undefined,\n        status: status as string | undefined\n      };\n      \n      // Log dos filtros processados\n      console.log('GET /api/analytics/process-statistics - Filtros processados:', filters);\n      \n      const stats = await storage.getProcessesStatistics(filters);\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar estatísticas\", error });\n    }\n  });\n\n  app.get('/api/analytics/processes-by-month', isAuthenticated, async (req, res) => {\n    try {\n      // Extrair filtros da query string\n      const { pbdocNumber, modalityId, sourceId, responsibleId, status } = req.query;\n      \n      const filters = {\n        pbdocNumber: pbdocNumber as string | undefined,\n        modalityId: modalityId ? parseInt(modalityId as string) : undefined,\n        sourceId: sourceId ? parseInt(sourceId as string) : undefined,\n        responsibleId: responsibleId ? parseInt(responsibleId as string) : undefined,\n        status: status as string | undefined\n      };\n      \n      const data = await storage.getProcessesByMonth(filters);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar processos por mês\", error });\n    }\n  });\n\n  app.get('/api/analytics/processes-by-source', isAuthenticated, async (req, res) => {\n    try {\n      // Extrair filtros da query string\n      const { pbdocNumber, modalityId, sourceId, responsibleId, status } = req.query;\n      \n      const filters = {\n        pbdocNumber: pbdocNumber as string | undefined,\n        modalityId: modalityId ? parseInt(modalityId as string) : undefined,\n        sourceId: sourceId ? parseInt(sourceId as string) : undefined,\n        responsibleId: responsibleId ? parseInt(responsibleId as string) : undefined,\n        status: status as string | undefined\n      };\n      \n      const data = await storage.getProcessesBySource(filters);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar processos por fonte\", error });\n    }\n  });\n\n  app.get('/api/analytics/processes-by-responsible', isAuthenticated, async (req, res) => {\n    try {\n      // Extrair filtros da query string\n      const { pbdocNumber, modalityId, sourceId, responsibleId, status } = req.query;\n      \n      const filters = {\n        pbdocNumber: pbdocNumber as string | undefined,\n        modalityId: modalityId ? parseInt(modalityId as string) : undefined,\n        sourceId: sourceId ? parseInt(sourceId as string) : undefined,\n        responsibleId: responsibleId ? parseInt(responsibleId as string) : undefined,\n        status: status as string | undefined\n      };\n      \n      const data = await storage.getProcessesByResponsible(filters);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar processos por responsável\", error });\n    }\n  });\n\n  // Nova rota para distribuição temporal com status\n  app.get('/api/analytics/temporal-distribution', isAuthenticated, async (req, res) => {\n    try {\n      const { pbdocNumber, modalityId, sourceId, responsibleId, status, period = 'month' } = req.query;\n      \n      const filters = {\n        pbdocNumber: pbdocNumber as string | undefined,\n        modalityId: modalityId ? parseInt(modalityId as string) : undefined,\n        sourceId: sourceId ? parseInt(sourceId as string) : undefined,\n        responsibleId: responsibleId ? parseInt(responsibleId as string) : undefined,\n        status: status as string | undefined\n      };\n      \n      const data = await storage.getTemporalDistribution(filters, period as string);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar distribuição temporal\", error });\n    }\n  });\n\n  // Nova rota para ranking de departamentos\n  app.get('/api/analytics/department-ranking', isAuthenticated, async (req, res) => {\n    try {\n      const { pbdocNumber, modalityId, sourceId, responsibleId, status } = req.query;\n      \n      const filters = {\n        pbdocNumber: pbdocNumber as string | undefined,\n        modalityId: modalityId ? parseInt(modalityId as string) : undefined,\n        sourceId: sourceId ? parseInt(sourceId as string) : undefined,\n        responsibleId: responsibleId ? parseInt(responsibleId as string) : undefined,\n        status: status as string | undefined\n      };\n      \n      const data = await storage.getDepartmentRanking(filters);\n      res.json(data);\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao buscar ranking de departamentos\", error });\n    }\n  });\n  \n  // Configuração para meta mensal\n  let monthlyGoal = 200; // Valor padrão\n  \n  app.get('/api/settings/monthly-goal', isAuthenticated, (req, res) => {\n    res.json({ value: monthlyGoal });\n  });\n  \n  app.post('/api/settings/monthly-goal', isAdmin, (req, res) => {\n    try {\n      const { value } = req.body;\n      \n      if (typeof value !== 'number' || value <= 0) {\n        return res.status(400).json({ message: \"Valor de meta inválido. Deve ser um número positivo.\" });\n      }\n      \n      monthlyGoal = value;\n      res.json({ value: monthlyGoal });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao atualizar meta mensal\", error });\n    }\n  });\n\n  // Endpoints para meta mensal\n  app.get('/api/settings/monthly-goal', isAuthenticated, (req, res) => {\n    res.json({ value: monthlyGoal });\n  });\n  \n  app.post('/api/settings/monthly-goal', isAdmin, (req, res) => {\n    try {\n      const { value } = req.body;\n      \n      if (typeof value !== 'number' || value <= 0) {\n        return res.status(400).json({ message: \"Valor de meta inválido. Deve ser um número positivo.\" });\n      }\n      \n      monthlyGoal = value;\n      res.json({ value: monthlyGoal });\n    } catch (error) {\n      res.status(500).json({ message: \"Erro ao atualizar meta mensal\", error });\n    }\n  });\n\n  // Rota para geração de relatório de processo em PDF\n  app.get('/api/processes/:id/report', isAuthenticated, async (req, res) => {\n    try {\n      const processId = parseInt(req.params.id);\n      const userId = (req.user as any).id;\n      \n      // Verificar se o processo existe e se o usuário tem acesso\n      const process = await storage.getProcess(processId, userId);\n      if (!process) {\n        return res.status(404).json({ message: \"Processo não encontrado ou acesso negado\" });\n      }\n      \n      // Buscar dados relacionados\n      const modalities = await storage.getBiddingModalities();\n      const sources = await storage.getResourceSources();\n      const users = await storage.getUsers();\n      const departments = await storage.getDepartments();\n      const steps = await storage.getProcessSteps(processId);\n      const responsibilityHistory = await storage.getProcessResponsibilityHistoryWithDetails(processId);\n      \n      const modality = modalities.find(m => m.id === process.modalityId);\n      const source = sources.find(s => s.id === process.sourceId);\n      const responsible = users.find(u => u.id === process.responsibleId);\n      const currentDepartment = departments.find(d => d.id === process.currentDepartmentId);\n      \n      // Gerar HTML do relatório - cópia exata da página ProcessReport.tsx\n      const htmlContent = `\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset=\"UTF-8\">\n          <title>Relatório do Processo ${process.pbdocNumber}</title>\n          <style>\n            * { margin: 0; padding: 0; box-sizing: border-box; }\n            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif; line-height: 1.6; color: #374151; background: #f9fafb; }\n            .container { max-width: 64rem; margin: 0 auto; padding: 20px; }\n            .card { background: white; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }\n            .card-header { padding: 24px; border-bottom: 1px solid #e5e7eb; text-align: center; }\n            .card-content { padding: 24px; }\n            .card-title { font-size: 20px; font-weight: 600; color: #1f2937; margin-bottom: 8px; }\n            .section { margin-bottom: 32px; }\n            .section-title { font-size: 18px; font-weight: 600; color: #1e40af; border-bottom: 1px solid #dbeafe; padding-bottom: 8px; margin-bottom: 16px; }\n            .info-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px; }\n            .info-item { margin-bottom: 8px; }\n            .info-label { font-weight: 500; color: #374151; display: block; }\n            .info-value { color: #1f2937; margin-top: 2px; }\n            .description { background: #f9fafb; padding: 16px; border-radius: 6px; border-left: 4px solid #3b82f6; }\n            .separator { height: 1px; background: #e5e7eb; margin: 24px 0; }\n            .step-container { border: 1px solid #e5e7eb; border-radius: 6px; padding: 16px; margin-bottom: 16px; background: #f9fafb; }\n            .step-header { display: flex; justify-content: space-between; align-items: start; margin-bottom: 8px; }\n            .step-title { font-weight: 500; color: #1f2937; }\n            .step-badge { padding: 4px 8px; border-radius: 4px; font-size: 12px; font-weight: 500; }\n            .step-badge.completed { background: #dcfce7; color: #166534; }\n            .step-badge.pending { background: #fef3c7; color: #92400e; }\n            .step-details { font-size: 14px; color: #6b7280; }\n            .step-details p { margin-bottom: 4px; }\n            .step-details strong { color: #374151; }\n            .comments-section { background: #fef2f2; border: 1px solid #fecaca; border-radius: 6px; padding: 16px; margin-top: 16px; }\n            .comments-title { font-weight: 600; color: #991b1b; margin-bottom: 16px; }\n            .comments-content { color: #7f1d1d; }\n            .footer { text-align: center; font-size: 14px; color: #6b7280; margin-top: 32px; border-top: 1px solid #e5e7eb; padding-top: 16px; }\n            .header-org { font-size: 24px; font-weight: 700; color: #1f2937; margin-bottom: 4px; }\n            .header-subtitle { color: #6b7280; margin-bottom: 16px; }\n            .main-title { font-size: 20px; font-weight: 600; color: #1f2937; }\n            .print-only { display: none; }\n            @media print { \n              body { background: white; }\n              .container { max-width: none; margin: 0; padding: 0; }\n              .card { border-radius: 0; box-shadow: none; }\n              .print-only { display: block; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"container\">\n            <div class=\"card\">\n              <div class=\"card-header\">\n                <div class=\"header-org\">\n                  SEAP - Secretaria de Estado da Administração Penitenciária\n                </div>\n                <div class=\"header-subtitle\">Relatório de Processo Licitatório</div>\n                <div class=\"main-title\">Processo Nº ${process.pbdocNumber}</div>\n              </div>\n              \n              <div class=\"card-content\">\n                <!-- Informações Básicas -->\n                <div class=\"section\">\n                  <h2 class=\"section-title\">Informações Básicas</h2>\n                  <div class=\"info-grid\">\n                    <div class=\"info-item\">\n                      <label class=\"info-label\">Número PBDOC:</label>\n                      <p class=\"info-value\">${process.pbdocNumber}</p>\n                    </div>\n                    <div class=\"info-item\">\n                      <label class=\"info-label\">Status:</label>\n                      <p class=\"info-value\">${process.status === 'in_progress' ? 'Em Andamento' : process.status === 'completed' ? 'Concluído' : process.status === 'overdue' ? 'Atrasado' : 'Cancelado'}</p>\n                    </div>\n                    <div class=\"info-item\">\n                      <label class=\"info-label\">Modalidade:</label>\n                      <p class=\"info-value\">${modality?.name || 'Não informado'}</p>\n                    </div>\n                    <div class=\"info-item\">\n                      <label class=\"info-label\">Prioridade:</label>\n                      <p class=\"info-value\">${process.priority === 'high' ? 'Alta' : process.priority === 'medium' ? 'Média' : 'Baixa'}</p>\n                    </div>\n                    <div class=\"info-item\">\n                      <label class=\"info-label\">Fonte de Recurso:</label>\n                      <p class=\"info-value\">${source ? `${source.code} - ${source.description}` : 'Não informado'}</p>\n                    </div>\n                    <div class=\"info-item\">\n                      <label class=\"info-label\">Responsável:</label>\n                      <p class=\"info-value\">${responsible?.fullName || 'Não informado'}</p>\n                    </div>\n                    <div class=\"info-item\">\n                      <label class=\"info-label\">Departamento Atual:</label>\n                      <p class=\"info-value\">${currentDepartment?.name || 'Não informado'}</p>\n                    </div>\n                    <div class=\"info-item\">\n                      <label class=\"info-label\">Central de Compras:</label>\n                      <p class=\"info-value\">${process.centralDeCompras || 'Não informado'}</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"separator\"></div>\n\n                <!-- Objeto -->\n                <div class=\"section\">\n                  <h2 class=\"section-title\">Objeto</h2>\n                  <div class=\"description\">${process.description}</div>\n                </div>\n\n                <div class=\"separator\"></div>\n\n                <!-- Datas -->\n                <div class=\"section\">\n                  <h2 class=\"section-title\">Cronograma</h2>\n                  <div class=\"info-grid\">\n                    <div class=\"info-item\">\n                      <label class=\"info-label\">Data de Criação:</label>\n                      <p class=\"info-value\">${new Date(process.createdAt).toLocaleDateString('pt-BR')} às ${new Date(process.createdAt).toLocaleTimeString('pt-BR')}</p>\n                    </div>\n                    <div class=\"info-item\">\n                      <label class=\"info-label\">Última Atualização:</label>\n                      <p class=\"info-value\">${new Date(process.updatedAt).toLocaleDateString('pt-BR')} às ${new Date(process.updatedAt).toLocaleTimeString('pt-BR')}</p>\n                    </div>\n                    <div class=\"info-item\">\n                      <label class=\"info-label\">Prazo de Entrega:</label>\n                      <p class=\"info-value\">${process.deadline ? new Date(process.deadline).toLocaleDateString('pt-BR') : 'Não definido'}</p>\n                    </div>\n                  </div>\n                </div>\n\n                ${process.returnComments ? `\n                <div class=\"separator\"></div>\n                <div class=\"section\">\n                  <h2 class=\"section-title\" style=\"color: #991b1b; border-bottom-color: #fecaca;\">Comentários de Retorno</h2>\n                  <div class=\"comments-section\">\n                    <p class=\"comments-content\">${process.returnComments}</p>\n                  </div>\n                </div>\n                ` : ''}\n\n                ${steps.length > 0 ? `\n                <div class=\"separator\"></div>\n                <div class=\"section\">\n                  <h2 class=\"section-title\">Histórico de Etapas</h2>\n                  <div class=\"steps-container\">\n                    ${steps.map((step, index) => {\n                      const stepUser = users.find(u => u.id === step.completedBy);\n                      const stepDepartment = departments.find(d => d.id === step.departmentId);\n                      \n                      return `\n                        <div class=\"step-container\">\n                          <div class=\"step-header\">\n                            <h3 class=\"step-title\">${index + 1}. ${step.stepName}</h3>\n                            <span class=\"step-badge ${step.isCompleted ? 'completed' : 'pending'}\">\n                              ${step.isCompleted ? 'Concluída' : 'Em andamento'}\n                            </span>\n                          </div>\n                          <div class=\"step-details\">\n                            <p><strong>Departamento:</strong> ${stepDepartment?.name || 'Não informado'}</p>\n                            <p><strong>Responsável:</strong> ${stepUser?.fullName || 'Não informado'}</p>\n                            ${step.completedAt ? `<p><strong>Data de Conclusão:</strong> ${new Date(step.completedAt).toLocaleDateString('pt-BR')} às ${new Date(step.completedAt).toLocaleTimeString('pt-BR')}</p>` : ''}\n                            ${step.observations ? `<p><strong>Observações:</strong> ${step.observations}</p>` : ''}\n                          </div>\n                        </div>\n                      `;\n                    }).join('')}\n                  </div>\n                </div>\n                ` : ''}\n\n                ${responsibilityHistory.length > 0 ? `\n                <div class=\"separator\"></div>\n                <div class=\"section\">\n                  <h2 class=\"section-title\">Histórico de Responsabilidades</h2>\n                  <div class=\"steps-container\">\n                    ${responsibilityHistory.map((item, index) => {\n                      const actionLabel = item.action === 'transferred' ? 'Transferido' : \n                                         item.action === 'returned' ? 'Devolvido' : \n                                         item.action === 'created' ? 'Criado' : 'Ação';\n                      \n                      return `\n                        <div class=\"step-container\">\n                          <div class=\"step-header\">\n                            <h3 class=\"step-title\">${index + 1}. ${actionLabel}</h3>\n                            <span class=\"step-badge completed\">\n                              ${new Date(item.timestamp).toLocaleDateString('pt-BR')}\n                            </span>\n                          </div>\n                          <div class=\"step-details\">\n                            <p><strong>Departamento:</strong> ${item.department_name || 'Não informado'}</p>\n                            <p><strong>Responsável:</strong> ${item.user_name || 'Não informado'}</p>\n                            <p><strong>Data:</strong> ${new Date(item.timestamp).toLocaleDateString('pt-BR')} às ${new Date(item.timestamp).toLocaleTimeString('pt-BR')}</p>\n                            ${item.description ? `<p><strong>Descrição:</strong> ${item.description}</p>` : ''}\n                          </div>\n                        </div>\n                      `;\n                    }).join('')}\n                  </div>\n                </div>\n                ` : ''}\n\n                <div class=\"separator\"></div>\n\n                <div class=\"footer\">\n                  <p>Relatório gerado em ${new Date().toLocaleDateString('pt-BR')} às ${new Date().toLocaleTimeString('pt-BR')}</p>\n                  <p>SEAP - Secretaria de Estado da Administração Penitenciária da Paraíba</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </body>\n        </html>\n      `;\n\n      // Retornar HTML para que o frontend possa converter em PDF\n      res.setHeader('Content-Type', 'text/html; charset=utf-8');\n      res.setHeader('Content-Disposition', 'inline');\n      res.send(htmlContent);\n    } catch (error) {\n      console.error('Erro ao gerar relatório PDF:', error);\n      res.status(500).json({ message: \"Erro ao gerar relatório PDF\", error: (error as Error).message });\n    }\n  });\n  \n  const httpServer = createServer(app);\n  \n  // Configurar WebSocket Server para atualizações em tempo real\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws) => {\n    console.log('Nova conexão WebSocket estabelecida');\n    \n    // Adicionar cliente à lista\n    clients.add(ws);\n    \n    // Enviar mensagem de boas-vindas\n    ws.send(JSON.stringify({ type: 'connection', message: 'Conectado com sucesso!' }));\n    \n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        console.log('Mensagem recebida:', data);\n      } catch (error) {\n        console.error('Erro ao processar mensagem:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      console.log('Conexão WebSocket fechada');\n      clients.delete(ws);\n    });\n  });\n  \n  return httpServer;\n}\n","size_bytes":77273},"server/storage.db.ts":{"content":"import { db } from \"./db\";\nimport { \n  users, type User, type InsertUser, \n  departments, type Department, type InsertDepartment,\n  biddingModalities, type BiddingModality, type InsertBiddingModality,\n  resourceSources, type ResourceSource, type InsertResourceSource,\n  processes, type Process, type InsertProcess,\n  processSteps, type ProcessStep, type InsertProcessStep,\n  processParticipants, type ProcessParticipant, type InsertProcessParticipant,\n  processResponsibilityHistory, type ProcessResponsibilityHistory, type InsertProcessResponsibilityHistory\n} from \"@shared/schema\";\nimport { IStorage } from \"./storage\";\nimport { eq, and, or, count, sql, inArray, like, isNull, isNotNull, desc } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async updateUser(id: number, userData: Partial<InsertUser>): Promise<User | undefined> {\n    const [updatedUser] = await db\n      .update(users)\n      .set(userData)\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n  \n  async deleteUser(id: number): Promise<boolean> {\n    try {\n      const result = await db.delete(users).where(eq(users.id, id));\n      return result.rowCount !== null && result.rowCount > 0;\n    } catch (error) {\n      console.error(\"Erro ao excluir usuário:\", error);\n      return false;\n    }\n  }\n\n  async authenticateUser(username: string, password: string): Promise<User | undefined> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return undefined;\n    \n    const isValid = await bcrypt.compare(password, user.password);\n    return isValid ? user : undefined;\n  }\n\n  // Department operations\n  async getDepartment(id: number): Promise<Department | undefined> {\n    const [department] = await db.select().from(departments).where(eq(departments.id, id));\n    return department;\n  }\n\n  async getDepartments(): Promise<Department[]> {\n    return await db.select().from(departments);\n  }\n\n  async createDepartment(department: InsertDepartment): Promise<Department> {\n    const [created] = await db.insert(departments).values(department).returning();\n    return created;\n  }\n\n  // Bidding modality operations\n  async getBiddingModality(id: number): Promise<BiddingModality | undefined> {\n    const [modality] = await db.select().from(biddingModalities).where(eq(biddingModalities.id, id));\n    return modality;\n  }\n\n  async getBiddingModalities(): Promise<BiddingModality[]> {\n    return await db.select().from(biddingModalities);\n  }\n\n  async createBiddingModality(modality: InsertBiddingModality): Promise<BiddingModality> {\n    const [created] = await db.insert(biddingModalities).values(modality).returning();\n    return created;\n  }\n\n  // Resource source operations\n  async getResourceSource(id: number): Promise<ResourceSource | undefined> {\n    const [source] = await db.select().from(resourceSources).where(eq(resourceSources.id, id));\n    return source;\n  }\n\n  async getResourceSources(): Promise<ResourceSource[]> {\n    return await db.select().from(resourceSources);\n  }\n\n  async createResourceSource(source: InsertResourceSource): Promise<ResourceSource> {\n    const [created] = await db.insert(resourceSources).values(source).returning();\n    return created;\n  }\n\n  // Process operations\n  async getProcess(id: number, userId?: number): Promise<Process | undefined> {\n    const [process] = await db.select().from(processes).where(eq(processes.id, id));\n    return process;\n  }\n\n  async getProcesses(filters?: any): Promise<Process[]> {\n    let query = db.select().from(processes);\n    \n    // Always filter out deleted processes\n    let whereConditions = [isNull(processes.deletedAt)];\n    \n    if (filters?.currentDepartmentId) {\n      whereConditions.push(eq(processes.currentDepartmentId, filters.currentDepartmentId));\n    }\n    \n    query = query.where(and(...whereConditions));\n    \n    return await query;\n  }\n\n  async createProcess(process: InsertProcess): Promise<Process> {\n    const [created] = await db.insert(processes).values(process).returning();\n    return created;\n  }\n\n  // Process participant operations\n  async getProcessParticipants(processId: number): Promise<ProcessParticipant[]> {\n    return await db.select().from(processParticipants).where(eq(processParticipants.processId, processId));\n  }\n\n  async addProcessParticipant(participant: InsertProcessParticipant): Promise<ProcessParticipant> {\n    const [created] = await db.insert(processParticipants).values(participant).returning();\n    return created;\n  }\n\n  async removeProcessParticipant(processId: number, userId: number): Promise<boolean> {\n    const result = await db.delete(processParticipants)\n      .where(and(\n        eq(processParticipants.processId, processId),\n        eq(processParticipants.userId, userId)\n      ));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async transferProcessToDepartment(processId: number, departmentId: number, userId: number): Promise<Process | undefined> {\n    const [updatedProcess] = await db\n      .update(processes)\n      .set({ currentDepartmentId: departmentId })\n      .where(eq(processes.id, processId))\n      .returning();\n    return updatedProcess;\n  }\n\n  // Required interface methods - stub implementations\n  async returnProcess(processId: number, returnComment: string, userId: number, targetDepartmentId?: number): Promise<Process | undefined> {\n    try {\n      console.log(`Tentando retornar processo ${processId} com comentário: ${returnComment}`);\n      \n      // Buscar o processo atual\n      const [currentProcess] = await db\n        .select()\n        .from(processes)\n        .where(eq(processes.id, processId));\n      \n      if (!currentProcess) {\n        console.log(`Processo ${processId} não encontrado`);\n        return undefined;\n      }\n      \n      console.log(`Processo encontrado. Departamento atual: ${currentProcess.currentDepartmentId}`);\n      \n      // Buscar informações do usuário que está retornando\n      const user = await this.getUser(userId);\n      if (!user) {\n        console.log(`Usuário ${userId} não encontrado`);\n        return undefined;\n      }\n      \n      let previousDepartmentId: number;\n      \n      // Se o usuário é admin e especificou um departamento de destino, usar esse\n      if (user.role === 'admin' && targetDepartmentId) {\n        previousDepartmentId = targetDepartmentId;\n        console.log(`Admin retornando processo para departamento específico: ${previousDepartmentId}`);\n      } else if (user.role === 'admin') {\n        // Admin sem departamento específico pode retornar para qualquer departamento do fluxo\n        const departmentFlow = [1, 2, 3, 4, 5]; // Setor Demandante, Divisão, NPP, Orçamento, Secretário\n        \n        // Encontrar o índice do departamento atual\n        const currentIndex = departmentFlow.findIndex(id => id === currentProcess.currentDepartmentId);\n        \n        if (currentIndex <= 0) {\n          // Para admin, permitir retorno do primeiro departamento para o último\n          console.log(`Admin pode retornar processo do primeiro departamento`);\n          previousDepartmentId = departmentFlow[departmentFlow.length - 1]; // Último departamento\n        } else {\n          // Departamento anterior no fluxo\n          previousDepartmentId = departmentFlow[currentIndex - 1];\n        }\n      } else {\n        // Fluxo normal para usuários não admin - departamento anterior no fluxo\n        const departmentFlow = [1, 2, 3, 4, 5]; // Setor Demandante, Divisão, NPP, Orçamento, Secretário\n        \n        // Encontrar o índice do departamento atual\n        const currentIndex = departmentFlow.findIndex(id => id === currentProcess.currentDepartmentId);\n        \n        if (currentIndex <= 0) {\n          console.log(`Usuário comum: Processo no primeiro departamento, não pode ser retornado`);\n          return undefined; // Processo já está no primeiro departamento\n        }\n        \n        // Departamento anterior no fluxo\n        previousDepartmentId = departmentFlow[currentIndex - 1];\n      }\n      \n      console.log(`Retornando processo do departamento ${currentProcess.currentDepartmentId} para ${previousDepartmentId}`);\n      \n      // Buscar informações do departamento para incluir no comentário\n      const returnCommentWithUser = `${returnComment} - Retornado por: ${user.username} (${user.department})`;\n      \n      // Atualizar o processo com o novo departamento e comentário de retorno\n      const [updatedProcess] = await db\n        .update(processes)\n        .set({\n          currentDepartmentId: previousDepartmentId,\n          returnComments: returnCommentWithUser,\n          status: 'in_progress', // Garantir que o status seja adequado\n          updatedAt: new Date()\n        })\n        .where(eq(processes.id, processId))\n        .returning();\n      \n      console.log(`Processo ${processId} retornado com sucesso para departamento ${previousDepartmentId}`);\n      \n      return updatedProcess;\n    } catch (error) {\n      console.error('Erro ao retornar processo:', error);\n      return undefined;\n    }\n  }\n\n  async updateProcess(id: number, processData: Partial<InsertProcess>): Promise<Process | undefined> {\n    const [updated] = await db\n      .update(processes)\n      .set(processData)\n      .where(eq(processes.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProcess(id: number, userId: number, deletionReason?: string): Promise<boolean> {\n    const result = await db.update(processes)\n      .set({ \n        deletedAt: new Date(),\n        deletedBy: userId,\n        deletionReason,\n        updatedAt: new Date()\n      })\n      .where(eq(processes.id, id));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  async getDeletedProcesses(): Promise<any[]> {\n    console.log('Buscando processos excluídos...');\n    try {\n      // Usando ORM do Drizzle ao invés de SQL direto\n      const deletedProcesses = await db\n        .select({\n          id: processes.id,\n          pbdocNumber: processes.pbdocNumber,\n          description: processes.description,\n          deletedAt: processes.deletedAt,\n          deletedBy: processes.deletedBy,\n          deletionReason: processes.deletionReason,\n          modalityId: processes.modalityId,\n          sourceId: processes.sourceId,\n          responsibleId: processes.responsibleId,\n          currentDepartmentId: processes.currentDepartmentId,\n          priority: processes.priority,\n          status: processes.status,\n          createdAt: processes.createdAt,\n          updatedAt: processes.updatedAt,\n          deletedByName: users.fullName\n        })\n        .from(processes)\n        .leftJoin(users, eq(processes.deletedBy, users.id))\n        .where(isNotNull(processes.deletedAt))\n        .orderBy(desc(processes.deletedAt));\n      \n      console.log(`Encontrados ${deletedProcesses.length} processos excluídos`);\n      \n      return deletedProcesses;\n    } catch (error) {\n      console.error('Erro ao buscar processos excluídos:', error);\n      return [];\n    }\n  }\n\n  async restoreProcess(id: number, userId: number): Promise<Process | undefined> {\n    try {\n      console.log(`Tentando restaurar processo ID ${id} pelo usuário ${userId}`);\n      \n      // Verificar se o processo existe e está excluído\n      const [existingProcess] = await db\n        .select()\n        .from(processes)\n        .where(and(eq(processes.id, id), isNotNull(processes.deletedAt)));\n      \n      if (!existingProcess) {\n        console.log(`Processo ${id} não encontrado ou não está na lixeira`);\n        return undefined;\n      }\n\n      console.log(`Processo ${id} encontrado na lixeira, restaurando...`);\n\n      // Restaurar processo (limpar campos de exclusão)\n      const [restoredProcess] = await db\n        .update(processes)\n        .set({\n          deletedAt: null,\n          deletedBy: null,\n          deletionReason: null\n        })\n        .where(eq(processes.id, id))\n        .returning();\n\n      console.log(`Processo ${id} restaurado com sucesso`);\n      return restoredProcess;\n    } catch (error) {\n      console.error('Erro ao restaurar processo:', error);\n      return undefined;\n    }\n  }\n\n  async permanentlyDeleteProcess(id: number): Promise<boolean> {\n    try {\n      console.log(`Tentando excluir permanentemente processo ID ${id}`);\n      \n      // Verificar se o processo existe e está excluído\n      const [existingProcess] = await db\n        .select()\n        .from(processes)\n        .where(and(eq(processes.id, id), isNotNull(processes.deletedAt)));\n      \n      if (!existingProcess) {\n        console.log(`Processo ${id} não encontrado ou não está na lixeira`);\n        return false;\n      }\n\n      console.log(`Processo ${id} encontrado na lixeira, excluindo permanentemente...`);\n\n      // Primeiro, excluir registros relacionados\n      await db.delete(processSteps).where(eq(processSteps.processId, id));\n      await db.delete(processParticipants).where(eq(processParticipants.processId, id));\n      await db.delete(processResponsibilityHistory).where(eq(processResponsibilityHistory.processId, id));\n\n      // Excluir permanentemente o processo\n      const result = await db\n        .delete(processes)\n        .where(eq(processes.id, id));\n\n      console.log(`Resultado da exclusão: ${result.rowCount} linhas afetadas`);\n      return result.rowCount !== null && result.rowCount > 0;\n    } catch (error) {\n      console.error('Erro ao excluir processo permanentemente:', error);\n      return false;\n    }\n  }\n\n  async getProcessSteps(processId: number): Promise<ProcessStep[]> {\n    return await db.select().from(processSteps).where(\n      and(\n        eq(processSteps.processId, processId),\n        eq(processSteps.isVisible, true)\n      )\n    );\n  }\n\n  async getAllProcessSteps(processId: number): Promise<ProcessStep[]> {\n    return await db.select().from(processSteps).where(eq(processSteps.processId, processId));\n  }\n\n  async createProcessStep(step: InsertProcessStep): Promise<ProcessStep> {\n    const [created] = await db.insert(processSteps).values(step).returning();\n    return created;\n  }\n\n  async getProcessStep(id: number): Promise<ProcessStep | undefined> {\n    const [step] = await db.select().from(processSteps).where(eq(processSteps.id, id));\n    return step;\n  }\n\n  async updateProcessStep(id: number, stepData: Partial<InsertProcessStep>): Promise<ProcessStep | undefined> {\n    const [updated] = await db\n      .update(processSteps)\n      .set(stepData)\n      .where(eq(processSteps.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Analytics methods - implementações reais\n  async getProcessesStatistics(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{\n    total: number;\n    inProgress: number;\n    overdue: number;\n    completed: number;\n    canceled: number;\n  }> {\n    console.log('getProcessesStatistics - Filtros recebidos:', filters);\n\n    try {\n      // Construir query base\n      let query = db\n        .select({\n          status: processes.status,\n          deadline: processes.deadline,\n        })\n        .from(processes);\n\n      // Aplicar filtros\n      const conditions = [];\n      \n      // SEMPRE excluir processos na lixeira\n      conditions.push(isNull(processes.deletedAt));\n      \n      if (filters?.pbdocNumber) {\n        conditions.push(like(processes.pbdocNumber, `%${filters.pbdocNumber}%`));\n      }\n      if (filters?.modalityId) {\n        conditions.push(eq(processes.modalityId, filters.modalityId));\n      }\n      if (filters?.sourceId) {\n        conditions.push(eq(processes.sourceId, filters.sourceId));\n      }\n      if (filters?.responsibleId) {\n        conditions.push(eq(processes.responsibleId, filters.responsibleId));\n      }\n      if (filters?.status) {\n        conditions.push(eq(processes.status, filters.status));\n      }\n\n      if (conditions.length > 0) {\n        query = query.where(and(...conditions));\n      }\n\n      const results = await query;\n      console.log('getProcessesStatistics - Resultados brutos:', results.length);\n\n      // Calcular estatísticas\n      const stats = {\n        total: results.length,\n        inProgress: 0,\n        overdue: 0,\n        completed: 0,\n        canceled: 0,\n      };\n\n      const now = new Date();\n\n      results.forEach(process => {\n        switch (process.status) {\n          case 'completed':\n            stats.completed++;\n            break;\n          case 'canceled':\n            stats.canceled++;\n            break;\n          case 'overdue':\n            stats.overdue++;\n            break;\n          default:\n            // Verificar se está atrasado baseado na deadline\n            if (process.deadline && new Date(process.deadline) < now) {\n              stats.overdue++;\n            } else {\n              stats.inProgress++;\n            }\n        }\n      });\n\n      console.log('getProcessesStatistics - Estatísticas finais:', stats);\n      return stats;\n\n    } catch (error) {\n      console.error('Erro em getProcessesStatistics:', error);\n      return {\n        total: 0,\n        inProgress: 0,\n        overdue: 0,\n        completed: 0,\n        canceled: 0,\n      };\n    }\n  }\n\n  async getProcessesByMonth(): Promise<any[]> {\n    return [];\n  }\n\n  async getProcessesBySource(): Promise<any[]> {\n    return [];\n  }\n\n  async getProcessesByResponsible(): Promise<any[]> {\n    return [];\n  }\n\n  async getTemporalDistribution(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }, period?: string): Promise<{\n    period: string;\n    inProgress: number;\n    overdue: number;\n    completed: number;\n  }[]> {\n    console.log('getTemporalDistribution - Filtros recebidos:', filters);\n    console.log('getTemporalDistribution - Período:', period);\n\n    try {\n      // Construir query base\n      let query = db\n        .select({\n          createdAt: processes.createdAt,\n          status: processes.status,\n          deadline: processes.deadline,\n        })\n        .from(processes);\n\n      // Aplicar filtros\n      const conditions = [];\n      \n      // SEMPRE excluir processos na lixeira\n      conditions.push(isNull(processes.deletedAt));\n      \n      if (filters?.pbdocNumber) {\n        conditions.push(like(processes.pbdocNumber, `%${filters.pbdocNumber}%`));\n      }\n      if (filters?.modalityId) {\n        conditions.push(eq(processes.modalityId, filters.modalityId));\n      }\n      if (filters?.sourceId) {\n        conditions.push(eq(processes.sourceId, filters.sourceId));\n      }\n      if (filters?.responsibleId) {\n        conditions.push(eq(processes.responsibleId, filters.responsibleId));\n      }\n      if (filters?.status) {\n        conditions.push(eq(processes.status, filters.status));\n      }\n\n      if (conditions.length > 0) {\n        query = query.where(and(...conditions));\n      }\n\n      const results = await query;\n      console.log('getTemporalDistribution - Resultados brutos:', results.length);\n\n      // Agrupar por período (mês/ano)\n      const grouped = new Map<string, {\n        inProgress: number;\n        overdue: number;\n        completed: number;\n      }>();\n\n      const now = new Date();\n\n      results.forEach(process => {\n        const date = new Date(process.createdAt);\n        const periodKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n        \n        if (!grouped.has(periodKey)) {\n          grouped.set(periodKey, {\n            inProgress: 0,\n            overdue: 0,\n            completed: 0\n          });\n        }\n\n        const stats = grouped.get(periodKey)!;\n        \n        // Classificar status\n        if (process.status === 'completed') {\n          stats.completed++;\n        } else if (process.status === 'overdue' || (process.deadline && new Date(process.deadline) < now)) {\n          stats.overdue++;\n        } else {\n          stats.inProgress++;\n        }\n      });\n\n      // Converter para array ordenado\n      const temporalData = Array.from(grouped.entries())\n        .map(([period, stats]) => ({\n          period,\n          ...stats\n        }))\n        .sort((a, b) => a.period.localeCompare(b.period));\n\n      console.log('getTemporalDistribution - Dados finais:', temporalData);\n      return temporalData;\n\n    } catch (error) {\n      console.error('Erro em getTemporalDistribution:', error);\n      return [];\n    }\n  }\n\n  async getDepartmentRanking(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{\n    departmentId: number;\n    departmentName: string;\n    total: number;\n    inProgress: number;\n    overdue: number;\n    completed: number;\n  }[]> {\n    console.log('getDepartmentRanking - Filtros recebidos:', filters);\n\n    try {\n      // Construir query base\n      let query = db\n        .select({\n          currentDepartmentId: processes.currentDepartmentId,\n          status: processes.status,\n          deadline: processes.deadline,\n        })\n        .from(processes);\n\n      // Aplicar filtros\n      const conditions = [];\n      \n      // SEMPRE excluir processos na lixeira\n      conditions.push(isNull(processes.deletedAt));\n      \n      if (filters?.pbdocNumber) {\n        conditions.push(like(processes.pbdocNumber, `%${filters.pbdocNumber}%`));\n      }\n      if (filters?.modalityId) {\n        conditions.push(eq(processes.modalityId, filters.modalityId));\n      }\n      if (filters?.sourceId) {\n        conditions.push(eq(processes.sourceId, filters.sourceId));\n      }\n      if (filters?.responsibleId) {\n        conditions.push(eq(processes.responsibleId, filters.responsibleId));\n      }\n      if (filters?.status) {\n        conditions.push(eq(processes.status, filters.status));\n      }\n\n      if (conditions.length > 0) {\n        query = query.where(and(...conditions));\n      }\n\n      const results = await query;\n      console.log('getDepartmentRanking - Resultados brutos:', results.length);\n\n      // Buscar departamentos\n      const departmentsList = await db.select().from(departments);\n      const departmentMap = new Map(departmentsList.map(d => [d.id, d.name]));\n\n      // Agrupar por departamento\n      const grouped = new Map<number, {\n        total: number;\n        inProgress: number;\n        overdue: number;\n        completed: number;\n      }>();\n\n      const now = new Date();\n\n      results.forEach(process => {\n        const deptId = process.currentDepartmentId;\n        \n        if (!grouped.has(deptId)) {\n          grouped.set(deptId, {\n            total: 0,\n            inProgress: 0,\n            overdue: 0,\n            completed: 0\n          });\n        }\n\n        const stats = grouped.get(deptId)!;\n        stats.total++;\n        \n        // Classificar status\n        if (process.status === 'completed') {\n          stats.completed++;\n        } else if (process.status === 'overdue' || (process.deadline && new Date(process.deadline) < now)) {\n          stats.overdue++;\n        } else {\n          stats.inProgress++;\n        }\n      });\n\n      // Converter para array ordenado\n      const rankingData = Array.from(grouped.entries())\n        .map(([departmentId, stats]) => ({\n          departmentId,\n          departmentName: departmentMap.get(departmentId) || 'Departamento não encontrado',\n          ...stats\n        }))\n        .sort((a, b) => b.total - a.total);\n\n      console.log('getDepartmentRanking - Dados finais:', rankingData);\n      return rankingData;\n\n    } catch (error) {\n      console.error('Erro em getDepartmentRanking:', error);\n      return [];\n    }\n  }\n\n  // Convenio operations - stub implementations\n  async getConvenios(): Promise<any[]> {\n    return [];\n  }\n\n  async getConvenio(id: number): Promise<any | undefined> {\n    return undefined;\n  }\n\n  async createConvenio(convenio: any): Promise<any> {\n    return {};\n  }\n\n  async updateConvenio(id: number, convenioData: any): Promise<any | undefined> {\n    return undefined;\n  }\n\n  async deleteConvenio(id: number): Promise<boolean> {\n    return false;\n  }\n\n  // Process responsibility history operations\n  async addProcessResponsibilityHistory(history: InsertProcessResponsibilityHistory): Promise<ProcessResponsibilityHistory> {\n    try {\n      console.log(`Tentando adicionar histórico de responsabilidade:`, history);\n      \n      // Verificar se já existe um registro muito similar (mesmo processo, usuário, ação e descrição nos últimos 5 segundos)\n      const recentHistory = await db\n        .select()\n        .from(processResponsibilityHistory)\n        .where(\n          and(\n            eq(processResponsibilityHistory.processId, history.processId),\n            eq(processResponsibilityHistory.userId, history.userId),\n            eq(processResponsibilityHistory.action, history.action),\n            eq(processResponsibilityHistory.description, history.description)\n          )\n        )\n        .orderBy(desc(processResponsibilityHistory.timestamp))\n        .limit(1);\n      \n      if (recentHistory.length > 0) {\n        const lastRecord = recentHistory[0];\n        const timeDiff = Date.now() - new Date(lastRecord.timestamp).getTime();\n        \n        // Se há um registro idêntico nos últimos 5 segundos, não criar duplicata\n        if (timeDiff < 5000) {\n          console.log(`Registro duplicado detectado, retornando registro existente`);\n          return lastRecord;\n        }\n      }\n      \n      const [created] = await db.insert(processResponsibilityHistory).values(history).returning();\n      console.log(`Histórico de responsabilidade criado com sucesso:`, created);\n      return created;\n    } catch (error) {\n      console.error('Erro ao adicionar histórico de responsabilidade:', error);\n      throw error;\n    }\n  }\n\n  async getProcessResponsibilityHistory(processId: number): Promise<ProcessResponsibilityHistory[]> {\n    return await db\n      .select()\n      .from(processResponsibilityHistory)\n      .where(eq(processResponsibilityHistory.processId, processId))\n      .orderBy(processResponsibilityHistory.timestamp);\n  }\n\n  async getProcessResponsibilityHistoryWithDetails(processId: number): Promise<any[]> {\n    try {\n      console.log(`Buscando histórico detalhado para processo ${processId}`);\n      \n      const history = await db\n        .select({\n          id: processResponsibilityHistory.id,\n          processId: processResponsibilityHistory.processId,\n          userId: processResponsibilityHistory.userId,\n          username: users.username,\n          fullName: users.fullName,\n          userDepartment: users.department,\n          action: processResponsibilityHistory.action,\n          description: processResponsibilityHistory.description,\n          timestamp: processResponsibilityHistory.timestamp,\n          departmentId: processResponsibilityHistory.departmentId,\n          departmentName: departments.name,\n        })\n        .from(processResponsibilityHistory)\n        .leftJoin(users, eq(processResponsibilityHistory.userId, users.id))\n        .leftJoin(departments, eq(processResponsibilityHistory.departmentId, departments.id))\n        .where(eq(processResponsibilityHistory.processId, processId))\n        .orderBy(processResponsibilityHistory.timestamp);\n      \n      console.log(`Histórico bruto encontrado:`, history.length);\n      \n      // Remove duplicatas baseado em ID único (mais confiável)\n      const uniqueHistory = history.filter((item, index, self) => \n        index === self.findIndex(h => h.id === item.id)\n      );\n      \n      console.log(`Histórico após remoção de duplicatas:`, uniqueHistory.length);\n      \n      return uniqueHistory;\n    } catch (error) {\n      console.error('Erro ao buscar histórico de responsabilidades:', error);\n      return [];\n    }\n  }\n\n  async getRejectedSteps(): Promise<any[]> {\n    try {\n      console.log('Buscando etapas rejeitadas...');\n      \n      const rejectedSteps = await db\n        .select({\n          id: processSteps.id,\n          processId: processSteps.processId,\n          stepName: processSteps.stepName,\n          observations: processSteps.observations,\n          rejectedAt: processSteps.rejectedAt,\n          rejectionStatus: processSteps.rejectionStatus,\n          process: {\n            pbdocNumber: processes.pbdocNumber,\n            description: processes.description,\n          },\n          department: {\n            name: departments.name,\n          },\n          completedBy: {\n            username: users.username,\n          },\n        })\n        .from(processSteps)\n        .leftJoin(processes, eq(processSteps.processId, processes.id))\n        .leftJoin(departments, eq(processSteps.departmentId, departments.id))\n        .leftJoin(users, eq(processSteps.completedBy, users.id))\n        .where(\n          and(\n            eq(processSteps.rejectionStatus, 'rejected_with_approval'),\n            isNotNull(processSteps.rejectedAt)\n          )\n        )\n        .orderBy(desc(processSteps.rejectedAt));\n      \n      console.log(`Etapas rejeitadas encontradas: ${rejectedSteps.length}`);\n      \n      return rejectedSteps;\n    } catch (error) {\n      console.error('Erro ao buscar etapas rejeitadas:', error);\n      return [];\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":29889},"server/storage.ts":{"content":"import { \n  users, type User, type InsertUser, \n  departments, type Department, type InsertDepartment,\n  biddingModalities, type BiddingModality, type InsertBiddingModality,\n  resourceSources, type ResourceSource, type InsertResourceSource,\n  processes, type Process, type InsertProcess,\n  processSteps, type ProcessStep, type InsertProcessStep\n} from \"@shared/schema\";\nimport { compareSync, hashSync } from \"bcrypt\";\nimport { addBusinessDays } from \"./business-days\";\n\n// Storage interface with CRUD operations\n// Temporary type definitions for missing types\ntype ProcessParticipant = {\n  id: number;\n  processId: number;\n  userId: number;\n  role?: string;\n  isActive?: boolean;\n  departmentId?: number | null;\n  addedAt: Date;\n};\n\ntype InsertProcessParticipant = Omit<ProcessParticipant, 'id' | 'addedAt'>;\n\ntype Convenio = {\n  id: number;\n  numero: string;\n  objeto: string;\n  valor: number;\n  dataInicio: Date;\n  dataFim: Date;\n  status: string;\n  observacoes?: string | null;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\ntype InsertConvenio = Omit<Convenio, 'id' | 'createdAt' | 'updatedAt'>;\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getUsers(): Promise<User[]>;\n  updateUser(id: number, userData: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: number): Promise<boolean>;\n  authenticateUser(username: string, password: string): Promise<User | undefined>;\n\n  // Department operations\n  getDepartment(id: number): Promise<Department | undefined>;\n  getDepartments(): Promise<Department[]>;\n  createDepartment(department: InsertDepartment): Promise<Department>;\n\n  // Bidding modality operations\n  getBiddingModality(id: number): Promise<BiddingModality | undefined>;\n  getBiddingModalities(): Promise<BiddingModality[]>;\n  createBiddingModality(modality: InsertBiddingModality): Promise<BiddingModality>;\n\n  // Resource source operations\n  getResourceSource(id: number): Promise<ResourceSource | undefined>;\n  getResourceSources(): Promise<ResourceSource[]>;\n  createResourceSource(source: InsertResourceSource): Promise<ResourceSource>;\n\n  // Process operations\n  getProcess(id: number, userId?: number): Promise<Process | undefined>;\n  getProcesses(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n    currentDepartmentId?: number; // Filtrar por departamento atual do processo\n    userId?: number; // Adicionado userId para filtrar por participante\n    includeDeleted?: boolean; // Incluir processos excluídos\n  }): Promise<Process[]>;\n  \n  // Process participant operations\n  getProcessParticipants(processId: number): Promise<ProcessParticipant[]>;\n  addProcessParticipant(participant: InsertProcessParticipant): Promise<ProcessParticipant>;\n  removeProcessParticipant(processId: number, userId: number): Promise<boolean>;\n  \n  // Transferência entre setores\n  transferProcessToDepartment(processId: number, departmentId: number, userId: number): Promise<Process | undefined>;\n  \n  // Funcionalidade de retorno de processo\n  returnProcess(processId: number, returnComment: string, userId: number): Promise<Process | undefined>;\n  createProcess(process: InsertProcess): Promise<Process>;\n  updateProcess(id: number, processData: Partial<InsertProcess>): Promise<Process | undefined>;\n  deleteProcess(id: number, userId: number, deletionReason?: string): Promise<boolean>;\n  \n  // Lixeira eletrônica\n  getDeletedProcesses(): Promise<any[]>;\n  restoreProcess(id: number, userId: number): Promise<Process | undefined>;\n  permanentlyDeleteProcess(id: number): Promise<boolean>;\n\n  // Process step operations\n  getProcessSteps(processId: number): Promise<ProcessStep[]>;\n  getAllProcessSteps(processId: number): Promise<ProcessStep[]>;\n  createProcessStep(step: InsertProcessStep): Promise<ProcessStep>;\n  updateProcessStep(id: number, stepData: Partial<InsertProcessStep>): Promise<ProcessStep | undefined>;\n  deleteProcessStep(id: number): Promise<boolean>;\n  \n  // Dashboard analytics\n  getProcessesStatistics(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{\n    total: number;\n    completed: number;\n    inProgress: number;\n    canceled: number;\n  }>;\n  getProcessesByMonth(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{month: number; count: number}[]>;\n  getProcessesBySource(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{sourceId: number; count: number}[]>;\n  getProcessesByResponsible(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{responsibleId: number; total: number; completed: number}[]>;\n\n  // Novos métodos de analytics\n  getTemporalDistribution(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }, period?: string): Promise<{\n    period: string;\n    inProgress: number;\n    overdue: number;\n    completed: number;\n  }[]>;\n\n  getDepartmentRanking(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{\n    departmentId: number;\n    departmentName: string;\n    total: number;\n    inProgress: number;\n    overdue: number;\n    completed: number;\n  }[]>;\n\n  // Convenio operations\n  getConvenios(): Promise<Convenio[]>;\n  getConvenio(id: number): Promise<Convenio | undefined>;\n  createConvenio(convenio: InsertConvenio): Promise<Convenio>;\n  updateConvenio(id: number, convenioData: Partial<InsertConvenio>): Promise<Convenio | undefined>;\n  deleteConvenio(id: number): Promise<boolean>;\n\n  // Process responsibility history operations\n  addProcessResponsibilityHistory(history: any): Promise<any>;\n  \n  // Rejected steps operations\n  getRejectedSteps(): Promise<any[]>;\n  getProcessResponsibilityHistory(processId: number): Promise<any[]>;\n  getProcessResponsibilityHistoryWithDetails(processId: number): Promise<any[]>;\n}\n\n// Memory storage implementation\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private departments: Map<number, Department>;\n  private biddingModalities: Map<number, BiddingModality>;\n  private resourceSources: Map<number, ResourceSource>;\n  private processes: Map<number, Process>;\n  private processSteps: Map<number, ProcessStep>;\n  private convenios: Map<number, Convenio>;\n  \n  private currentUserId: number;\n  private currentDepartmentId: number;\n  private currentModalityId: number;\n  private currentSourceId: number;\n  private currentProcessId: number;\n  private currentStepId: number;\n  private currentConvenioId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.departments = new Map();\n    this.biddingModalities = new Map();\n    this.resourceSources = new Map();\n    this.processes = new Map();\n    this.processSteps = new Map();\n    \n    this.currentUserId = 1;\n    this.currentDepartmentId = 1;\n    this.currentModalityId = 1;\n    this.currentSourceId = 1;\n    this.currentProcessId = 1;\n    this.currentStepId = 1;\n    \n    this.seedInitialData();\n  }\n\n  // Initialize with some demo data\n  private seedInitialData() {\n    // Create departments\n    const departments = [\n      { name: \"Licitação\", description: \"Departamento responsável pelas licitações\" },\n      { name: \"Contratos\", description: \"Departamento responsável pelos contratos\" },\n      { name: \"Engenharia\", description: \"Departamento responsável pelos projetos de engenharia\" },\n      { name: \"Planejamento\", description: \"Departamento responsável pelo planejamento\" }\n    ];\n    \n    departments.forEach(dept => this.createDepartment(dept));\n    \n    // Create admin user\n    this.createUser({\n      username: \"admin\",\n      password: hashSync(\"admin123\", 10),\n      fullName: \"Administrador Sistema\",\n      email: \"admin@seap.pb.gov.br\",\n      department: \"Planejamento\",\n      role: \"admin\",\n      isActive: true\n    });\n    \n    // Create common user\n    this.createUser({\n      username: \"gabriel\",\n      password: hashSync(\"gabriel123\", 10),\n      fullName: \"Gabriel Lucas de Oliveira Silva\",\n      email: \"gabriel@seap.pb.gov.br\",\n      department: \"Licitação\",\n      role: \"common\",\n      isActive: true\n    });\n    \n    // Create bidding modalities with automatic deadline days\n    const modalities = [\n      { name: \"Pregão Eletrônico\", description: \"Modalidade de licitação para aquisição de bens e serviços comuns\", deadlineDays: 3 },\n      { name: \"Concorrência\", description: \"Modalidade de licitação entre quaisquer interessados que comprovem possuir os requisitos mínimos\", deadlineDays: 5 },\n      { name: \"Dispensa\", description: \"Contratação direta sem licitação\", deadlineDays: 7 },\n      { name: \"Inexigibilidade\", description: \"Contratação direta quando há inviabilidade de competição\", deadlineDays: 7 }\n    ];\n    \n    modalities.forEach(mod => this.createBiddingModality(mod));\n    \n    // Create resource sources\n    const sources = [\n      { code: \"500\", description: \"Recursos do Tesouro Estadual\" },\n      { code: \"700\", description: \"Recursos do FUNPEN\" },\n      { code: \"760\", description: \"Recursos de Convênios\" }\n    ];\n    \n    sources.forEach(source => this.createResourceSource(source));\n  }\n\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentUserId++;\n    const hashedPassword = insertUser.password.startsWith('$2') \n      ? insertUser.password \n      : hashSync(insertUser.password, 10);\n    \n    const user: User = { \n      ...insertUser, \n      id,\n      password: hashedPassword,\n    };\n    \n    this.users.set(id, user);\n    return { ...user, password: '***' } as User;\n  }\n\n  async getUsers(): Promise<User[]> {\n    return Array.from(this.users.values()).map(user => ({ ...user, password: '***' }) as User);\n  }\n\n  async updateUser(id: number, userData: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n\n    const updatedUser: User = {\n      ...user,\n      ...userData,\n      password: userData.password ? hashSync(userData.password, 10) : user.password,\n    };\n\n    this.users.set(id, updatedUser);\n    return { ...updatedUser, password: '***' } as User;\n  }\n\n  async authenticateUser(username: string, password: string): Promise<User | undefined> {\n    const user = await this.getUserByUsername(username);\n    if (!user) return undefined;\n    \n    const passwordMatch = compareSync(password, user.password);\n    if (!passwordMatch) return undefined;\n    \n    return { ...user, password: '***' } as User;\n  }\n\n  // Department methods\n  async getDepartment(id: number): Promise<Department | undefined> {\n    return this.departments.get(id);\n  }\n\n  async getDepartments(): Promise<Department[]> {\n    return Array.from(this.departments.values());\n  }\n\n  async createDepartment(department: InsertDepartment): Promise<Department> {\n    const id = this.currentDepartmentId++;\n    const newDepartment: Department = { ...department, id };\n    this.departments.set(id, newDepartment);\n    return newDepartment;\n  }\n\n  // Bidding modality methods\n  async getBiddingModality(id: number): Promise<BiddingModality | undefined> {\n    return this.biddingModalities.get(id);\n  }\n\n  async getBiddingModalities(): Promise<BiddingModality[]> {\n    return Array.from(this.biddingModalities.values());\n  }\n\n  async createBiddingModality(modality: InsertBiddingModality): Promise<BiddingModality> {\n    const id = this.currentModalityId++;\n    const newModality: BiddingModality = { ...modality, id };\n    this.biddingModalities.set(id, newModality);\n    return newModality;\n  }\n\n  // Resource source methods\n  async getResourceSource(id: number): Promise<ResourceSource | undefined> {\n    return this.resourceSources.get(id);\n  }\n\n  async getResourceSources(): Promise<ResourceSource[]> {\n    return Array.from(this.resourceSources.values());\n  }\n\n  async createResourceSource(source: InsertResourceSource): Promise<ResourceSource> {\n    const id = this.currentSourceId++;\n    const newSource: ResourceSource = { ...source, id };\n    this.resourceSources.set(id, newSource);\n    return newSource;\n  }\n\n  // Process methods\n  async getProcess(id: number): Promise<Process | undefined> {\n    return this.processes.get(id);\n  }\n\n  async getProcesses(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n    currentDepartmentId?: number;\n  }): Promise<Process[]> {\n    let processes = Array.from(this.processes.values());\n    \n    // Por padrão, filtrar processos excluídos (soft delete)\n    if (!filters?.includeDeleted) {\n      processes = processes.filter(p => p.deletedAt === null || p.deletedAt === undefined);\n    }\n    \n    if (filters) {\n      if (filters.pbdocNumber) {\n        processes = processes.filter(p => p.pbdocNumber.includes(filters.pbdocNumber!));\n        console.log(`Após filtro pbdocNumber (${filters.pbdocNumber}):`, processes.length);\n      }\n      \n      if (filters.modalityId) {\n        processes = processes.filter(p => p.modalityId === filters.modalityId);\n        console.log(`Após filtro modalityId (${filters.modalityId}):`, processes.length);\n      }\n      \n      if (filters.sourceId) {\n        processes = processes.filter(p => p.sourceId === filters.sourceId);\n        console.log(`Após filtro sourceId (${filters.sourceId}):`, processes.length);\n      }\n      \n      if (filters.responsibleId) {\n        console.log(`Aplicando filtro responsibleId (${filters.responsibleId}). Processos antes:`, processes.length);\n        console.log(`Valores de responsibleId nos processos:`, processes.map(p => p.responsibleId));\n        \n        // Vamos garantir que a comparação seja entre números\n        const responsibleIdNum = Number(filters.responsibleId);\n        processes = processes.filter(p => p.responsibleId === responsibleIdNum);\n        console.log(`Após filtro responsibleId (${responsibleIdNum}):`, processes.length);\n        console.log(\"Processos filtrados:\", processes.map(p => ({\n          id: p.id,\n          pbdoc: p.pbdocNumber,\n          responsible: p.responsibleId\n        })));\n      }\n      \n      if (filters.status) {\n        processes = processes.filter(p => p.status === filters.status);\n        console.log(`Após filtro status (${filters.status}):`, processes.length);\n      }\n\n      if (filters.currentDepartmentId) {\n        console.log(`Aplicando filtro por departamento. Departamento solicitado: ${filters.currentDepartmentId}`);\n        console.log(`Processos antes do filtro:`, processes.map(p => ({\n          id: p.id,\n          pbdoc: p.pbdocNumber,\n          currentDepartmentId: p.currentDepartmentId\n        })));\n        \n        processes = processes.filter(p => p.currentDepartmentId === filters.currentDepartmentId);\n        console.log(`Após filtro currentDepartmentId (${filters.currentDepartmentId}):`, processes.length);\n        \n        if (processes.length === 0) {\n          console.log(`Nenhum processo encontrado para o departamento ${filters.currentDepartmentId}`);\n        }\n      }\n    }\n    \n    console.log(`Retornando ${processes.length} processos após aplicação de todos os filtros`);\n    return processes;\n  }\n\n  async createProcess(process: InsertProcess): Promise<Process> {\n    const id = this.currentProcessId++;\n    const now = new Date();\n    \n    // Busca a modalidade para calcular o prazo\n    const modality = this.biddingModalities.get(process.modalityId);\n    let deadline: Date | null = null;\n    \n    if (modality && modality.deadlineDays) {\n      // Calcula o prazo usando apenas dias úteis\n      deadline = addBusinessDays(now, modality.deadlineDays);\n    }\n    \n    const newProcess: Process = { \n      ...process, \n      id,\n      createdAt: now,\n      updatedAt: now,\n      status: process.status || \"draft\",\n      priority: process.priority || \"medium\",\n      currentDepartmentId: process.currentDepartmentId || null,\n      centralDeCompras: process.centralDeCompras || null,\n      returnComments: process.returnComments || null,\n      deadline: deadline,\n      deletedAt: null,\n      deletedBy: null,\n    };\n    \n    this.processes.set(id, newProcess);\n    return newProcess;\n  }\n\n  async updateProcess(id: number, processData: Partial<InsertProcess>): Promise<Process | undefined> {\n    const process = this.processes.get(id);\n    if (!process) return undefined;\n\n    const updatedProcess: Process = {\n      ...process,\n      ...processData,\n      updatedAt: new Date()\n    };\n\n    this.processes.set(id, updatedProcess);\n    return updatedProcess;\n  }\n\n  async deleteProcess(id: number, userId: number, deletionReason?: string): Promise<boolean> {\n    const process = this.processes.get(id);\n    if (!process) return false;\n    \n    // Soft delete - marca como excluído\n    const updatedProcess: Process = {\n      ...process,\n      deletedAt: new Date(),\n      deletedBy: userId,\n      deletionReason,\n      updatedAt: new Date(),\n    };\n    \n    this.processes.set(id, updatedProcess);\n    return true;\n  }\n\n  async getDeletedProcesses(): Promise<Process[]> {\n    const allProcesses = Array.from(this.processes.values());\n    console.log(`Total de processos no storage: ${allProcesses.length}`);\n    \n    const deletedProcesses = allProcesses.filter(p => {\n      console.log(`Processo ${p.id}: deletedAt = ${p.deletedAt}, deletedBy = ${p.deletedBy}`);\n      return p.deletedAt !== null;\n    });\n    \n    console.log(`Processos excluídos encontrados: ${deletedProcesses.length}`);\n    return deletedProcesses;\n  }\n\n  async restoreProcess(id: number, userId: number): Promise<Process | undefined> {\n    const process = this.processes.get(id);\n    if (!process || !process.deletedAt) return undefined;\n    \n    const restoredProcess: Process = {\n      ...process,\n      deletedAt: null,\n      deletedBy: null,\n      updatedAt: new Date(),\n    };\n    \n    this.processes.set(id, restoredProcess);\n    return restoredProcess;\n  }\n\n  async permanentlyDeleteProcess(id: number): Promise<boolean> {\n    return this.processes.delete(id);\n  }\n\n  // Process step methods\n  async getProcessSteps(processId: number): Promise<ProcessStep[]> {\n    return Array.from(this.processSteps.values()).filter(\n      step => step.processId === processId && step.isVisible !== false\n    );\n  }\n\n  async getAllProcessSteps(processId: number): Promise<ProcessStep[]> {\n    return Array.from(this.processSteps.values()).filter(\n      step => step.processId === processId\n    );\n  }\n\n  async createProcessStep(step: InsertProcessStep): Promise<ProcessStep> {\n    const id = this.currentStepId++;\n    const newStep: ProcessStep = { ...step, id };\n    this.processSteps.set(id, newStep);\n    return newStep;\n  }\n\n  async updateProcessStep(id: number, stepData: Partial<InsertProcessStep>): Promise<ProcessStep | undefined> {\n    const step = this.processSteps.get(id);\n    if (!step) return undefined;\n\n    let completedAt = step.completedAt;\n    if (stepData.isCompleted && !step.isCompleted) {\n      completedAt = new Date();\n    }\n\n    const updatedStep: ProcessStep = {\n      ...step,\n      ...stepData,\n      completedAt\n    };\n\n    this.processSteps.set(id, updatedStep);\n    return updatedStep;\n  }\n\n  async deleteProcessStep(id: number): Promise<boolean> {\n    return this.processSteps.delete(id);\n  }\n\n  // Dashboard analytics methods\n  async getProcessesStatistics(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{\n    total: number;\n    completed: number;\n    inProgress: number;\n    canceled: number;\n  }> {\n    console.log('getProcessesStatistics - Filtros recebidos:', filters);\n    \n    // Vamos fazer a filtragem diretamente aqui para fins de depuração\n    let processes = Array.from(this.processes.values());\n    console.log('Processos antes da filtragem:', processes.length);\n    \n    if (filters && filters.responsibleId) {\n      const responsibleId = Number(filters.responsibleId);\n      console.log(`Filtrando por responsibleId=${responsibleId} (numérico)`);\n      \n      processes = processes.filter(p => {\n        const result = p.responsibleId === responsibleId;\n        console.log(`Processo ${p.id}: responsibleId=${p.responsibleId} (${typeof p.responsibleId}) === ${responsibleId} (${typeof responsibleId}) => ${result}`);\n        return result;\n      });\n      \n      console.log('Processos após filtragem por responsibleId:', processes.length);\n      console.log('Processos filtrados:', processes.map(p => ({id: p.id, pbdoc: p.pbdocNumber})));\n    }\n    \n    return {\n      total: processes.length,\n      completed: processes.filter(p => p.status === 'completed').length,\n      inProgress: processes.filter(p => p.status === 'in_progress').length,\n      canceled: processes.filter(p => p.status === 'canceled').length\n    };\n  }\n\n  async getProcessesByMonth(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{month: number; count: number}[]> {\n    // Usar o método getProcesses que já implementa a lógica de filtragem\n    const processes = await this.getProcesses(filters);\n    const processesByMonth = new Map<number, number>();\n    \n    // Initialize all months with zero\n    for (let i = 0; i < 12; i++) {\n      processesByMonth.set(i, 0);\n    }\n    \n    // Count processes by month\n    processes.forEach(process => {\n      const month = new Date(process.createdAt).getMonth();\n      processesByMonth.set(month, (processesByMonth.get(month) || 0) + 1);\n    });\n    \n    return Array.from(processesByMonth.entries()).map(([month, count]) => ({\n      month,\n      count\n    }));\n  }\n\n  async getProcessesBySource(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{sourceId: number; count: number}[]> {\n    // Usar o método getProcesses que já implementa a lógica de filtragem\n    const processes = await this.getProcesses(filters);\n    const processesBySource = new Map<number, number>();\n    \n    // Count processes by source\n    processes.forEach(process => {\n      processesBySource.set(\n        process.sourceId, \n        (processesBySource.get(process.sourceId) || 0) + 1\n      );\n    });\n    \n    return Array.from(processesBySource.entries()).map(([sourceId, count]) => ({\n      sourceId,\n      count\n    }));\n  }\n\n  async getProcessesByResponsible(filters?: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  }): Promise<{responsibleId: number; total: number; completed: number}[]> {\n    // Usar o método getProcesses que já implementa a lógica de filtragem\n    const processes = await this.getProcesses(filters);\n    const processesByResponsible = new Map<number, {total: number; completed: number}>();\n    \n    // Initialize with all users\n    this.users.forEach((user) => {\n      processesByResponsible.set(user.id, {total: 0, completed: 0});\n    });\n    \n    // Count processes by responsible\n    processes.forEach(process => {\n      const responsible = processesByResponsible.get(process.responsibleId) || {total: 0, completed: 0};\n      responsible.total += 1;\n      \n      if (process.status === 'completed') {\n        responsible.completed += 1;\n      }\n      \n      processesByResponsible.set(process.responsibleId, responsible);\n    });\n    \n    return Array.from(processesByResponsible.entries())\n      .map(([responsibleId, stats]) => ({\n        responsibleId,\n        ...stats\n      }))\n      .filter(item => item.total > 0); // Only include users with processes\n  }\n  \n  // Implementação da função deleteUser\n  async deleteUser(id: number): Promise<boolean> {\n    // Não permitir exclusão do admin padrão (ID 1)\n    if (id === 1) return false;\n    \n    if (!this.users.has(id)) return false;\n    \n    return this.users.delete(id);\n  }\n\n\n\n  // Métodos de participantes do processo (stubs para compatibilidade)\n  async getProcessParticipants(processId: number): Promise<ProcessParticipant[]> {\n    return [];\n  }\n\n  async addProcessParticipant(participant: InsertProcessParticipant): Promise<ProcessParticipant> {\n    // Para o MemStorage, vamos apenas retornar um participante fake\n    // Na prática, este sistema não usa participantes múltiplos\n    const newParticipant: ProcessParticipant = {\n      id: Date.now(),\n      processId: participant.processId,\n      userId: participant.userId,\n      role: participant.role,\n      isActive: participant.isActive ?? true,\n      departmentId: participant.departmentId,\n      addedAt: new Date(),\n    };\n    return newParticipant;\n  }\n\n  async removeProcessParticipant(processId: number, userId: number): Promise<boolean> {\n    return false;\n  }\n\n  async transferProcessToDepartment(processId: number, departmentId: number, userId: number): Promise<Process | undefined> {\n    const process = this.processes.get(processId);\n    if (!process) return undefined;\n\n    const updatedProcess: Process = {\n      ...process,\n      currentDepartmentId: departmentId,\n      updatedAt: new Date(),\n    };\n\n    this.processes.set(processId, updatedProcess);\n    return updatedProcess;\n  }\n\n  async returnProcess(processId: number, returnComment: string, userId: number): Promise<Process | undefined> {\n    const process = this.processes.get(processId);\n    if (!process) return undefined;\n\n    const updatedProcess: Process = {\n      ...process,\n      returnComments: returnComment,\n      updatedAt: new Date(),\n    };\n\n    this.processes.set(processId, updatedProcess);\n    return updatedProcess;\n  }\n\n  // Métodos de convênios (stubs para compatibilidade)\n  async getConvenios(): Promise<Convenio[]> {\n    return [];\n  }\n\n  async getConvenio(id: number): Promise<Convenio | undefined> {\n    return undefined;\n  }\n\n  async createConvenio(convenio: InsertConvenio): Promise<Convenio> {\n    throw new Error(\"Not implemented in MemStorage\");\n  }\n\n  async updateConvenio(id: number, convenioData: Partial<InsertConvenio>): Promise<Convenio | undefined> {\n    return undefined;\n  }\n\n  async deleteConvenio(id: number): Promise<boolean> {\n    return false;\n  }\n\n  // Process responsibility history operations (stub implementations)\n  async addProcessResponsibilityHistory(history: any): Promise<any> {\n    return {\n      id: Date.now(),\n      ...history,\n      timestamp: new Date()\n    };\n  }\n\n  async getProcessResponsibilityHistory(processId: number): Promise<any[]> {\n    return [];\n  }\n\n  async getProcessResponsibilityHistoryWithDetails(processId: number): Promise<any[]> {\n    return [];\n  }\n}\n\n// O método deleteUser agora está implementado diretamente na classe MemStorage\n\n// Import DatabaseStorage implementation\n// import { DatabaseStorage } from './storage.db';\n\n// Use MemStorage for development/testing\n// Importar DatabaseStorage do arquivo db\nimport { DatabaseStorage } from './storage.db';\n\nexport const storage = new DatabaseStorage();\n","size_bytes":27810},"server/trash-demo.ts":{"content":"// Simplified trash functionality for demonstration\nimport { storage } from './storage';\n\n// Add some demo deleted processes\nexport async function seedTrashData() {\n  try {\n    // Create a process first\n    const demoProcess = await storage.createProcess({\n      pbdocNumber: \"DEMO-TRASH-001\",\n      description: \"Processo de Teste para Lixeira\",\n      modalityId: 1,\n      sourceId: 1,\n      responsibleId: 1,\n      status: \"draft\",\n      priority: \"medium\",\n      currentDepartmentId: 1,\n      centralDeCompras: null,\n      estimatedValue: null,\n      returnComments: null,\n      deadline: null,\n    });\n\n    // Then delete it to move to trash\n    await storage.deleteProcess(demoProcess.id, 1);\n    \n    console.log(\"Demo trash data seeded successfully\");\n  } catch (error) {\n    console.error(\"Error seeding trash data:\", error);\n  }\n}","size_bytes":839},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, pgEnum, varchar, decimal, date, unique } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enum definitions\nexport const roleEnum = pgEnum('role', ['common', 'admin']);\nexport const processStatusEnum = pgEnum('process_status', ['draft', 'in_progress', 'completed', 'canceled', 'overdue']);\nexport const priorityEnum = pgEnum('priority', ['low', 'medium', 'high']);\n\n// Users table\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  username: text('username').notNull().unique(),\n  password: text('password').notNull(),\n  fullName: text('full_name').notNull(),\n  email: text('email'),\n  department: text('department').notNull(),\n  role: roleEnum('role').notNull().default('common'),\n  isActive: boolean('is_active').notNull().default(true),\n});\n\n// Departments table\nexport const departments = pgTable('departments', {\n  id: serial('id').primaryKey(),\n  name: text('name').notNull().unique(),\n  description: text('description'),\n});\n\n// Bidding modalities table\nexport const biddingModalities = pgTable('bidding_modalities', {\n  id: serial('id').primaryKey(),\n  name: text('name').notNull().unique(),\n  description: text('description'),\n  deadlineDays: integer('deadline_days').notNull().default(7), // Prazo em dias para esta modalidade\n});\n\n// Resource sources table\nexport const resourceSources = pgTable('resource_sources', {\n  id: serial('id').primaryKey(),\n  code: text('code').notNull().unique(),\n  description: text('description'),\n});\n\n// Processes table\nexport const processes = pgTable('processes', {\n  id: serial('id').primaryKey(),\n  pbdocNumber: text('pbdoc_number').notNull().unique(),\n  description: text('description').notNull(),\n  modalityId: integer('modality_id').notNull(),\n  sourceId: integer('source_id').notNull(),\n  responsibleId: integer('responsible_id').notNull(),\n  currentDepartmentId: integer('current_department_id'), // Setor atualmente responsável pelo processo\n  centralDeCompras: text('central_de_compras'), // Número do processo da Central de Compras\n  priority: priorityEnum('priority').notNull().default('medium'),\n  status: processStatusEnum('status').notNull().default('draft'),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n  responsibleSince: timestamp('responsible_since'), // Data em que o responsável assumiu o processo\n  deadline: timestamp('deadline'), // Prazo de entrega do processo\n  returnComments: text('return_comments'), // Comentários de retorno do processo\n  deletedAt: timestamp('deleted_at'), // Data de exclusão (soft delete)\n  deletedBy: integer('deleted_by'), // ID do usuário que excluiu\n  deletionReason: text('deletion_reason'), // Motivo da exclusão\n});\n\n// Process steps table\nexport const processSteps = pgTable('process_steps', {\n  id: serial('id').primaryKey(),\n  processId: integer('process_id').notNull(),\n  stepName: text('step_name').notNull(),\n  departmentId: integer('department_id').notNull(),\n  isCompleted: boolean('is_completed').notNull().default(false),\n  observations: text('observations'),\n  completedAt: timestamp('completed_at'),\n  completedBy: integer('completed_by'),\n  dueDate: timestamp('due_date'),\n  rejectedAt: timestamp('rejected_at'), // Data da rejeição\n  rejectionStatus: text('rejection_status'), // 'rejected_with_approval' para rejeições que permitem continuidade\n  isLocked: boolean('is_locked').default(false), // Para etapas que ficam bloqueadas até serem liberadas por uma decisão\n  isVisible: boolean('is_visible').notNull().default(true), // Controla se a etapa é visível no frontend\n});\n\n// Process participants table - controla quais usuários e setores têm acesso a cada processo\nexport const processParticipants = pgTable('process_participants', {\n  id: serial('id').primaryKey(),\n  processId: integer('process_id').notNull(),\n  userId: integer('user_id').notNull(),\n  departmentId: integer('department_id'), // ID do setor participante\n  role: text('role').notNull().default('viewer'), // viewer, editor, owner\n  addedAt: timestamp('added_at').notNull().defaultNow(),\n  isActive: boolean('is_active').notNull().default(true), // Indica se o participante tem acesso ativo\n});\n\n// Process responsibility history table\nexport const processResponsibilityHistory = pgTable('process_responsibility_history', {\n  id: serial('id').primaryKey(),\n  processId: integer('process_id').notNull(),\n  userId: integer('user_id').notNull(),\n  action: text('action').notNull(), // 'created', 'updated', 'transferred', 'returned', etc.\n  description: text('description'), // Descrição da ação\n  timestamp: timestamp('timestamp').notNull().defaultNow(),\n  departmentId: integer('department_id'), // Departamento no momento da ação\n});\n\nexport const convenios = pgTable('convenios', {\n  id: serial('id').primaryKey(),\n  numero: text('numero').notNull(),\n  nome: text('nome').notNull(),\n  orgaoConvenente: text('orgao_convenente').notNull(),\n  valor: text('valor').notNull(), // Storing as text for simplicity\n  dataInicio: text('data_inicio').notNull(), // Storing as text for date\n  dataFim: text('data_fim').notNull(), // Storing as text for date\n  status: text('status').notNull().default('ativo'),\n  observacoes: text('observacoes'),\n  createdAt: timestamp('created_at').defaultNow(),\n  updatedAt: timestamp('updated_at').defaultNow(),\n});\n\n// Export Zod schemas for insert operations\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n});\n\nexport const insertDepartmentSchema = createInsertSchema(departments).omit({\n  id: true,\n});\n\nexport const insertBiddingModalitySchema = createInsertSchema(biddingModalities).omit({\n  id: true,\n});\n\nexport const insertResourceSourceSchema = createInsertSchema(resourceSources).omit({\n  id: true,\n});\n\nexport const insertProcessSchema = createInsertSchema(processes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProcessStepSchema = createInsertSchema(processSteps).omit({\n  id: true,\n  completedAt: true,\n}).extend({\n  rejectedAt: z.string().optional(),\n  rejectionStatus: z.string().optional(),\n});\n\nexport const insertProcessParticipantSchema = createInsertSchema(processParticipants).omit({\n  id: true,\n  addedAt: true,\n});\n\nexport const insertProcessResponsibilityHistorySchema = createInsertSchema(processResponsibilityHistory).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertConvenioSchema = createInsertSchema(convenios).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Department = typeof departments.$inferSelect;\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\n\nexport type BiddingModality = typeof biddingModalities.$inferSelect;\nexport type InsertBiddingModality = z.infer<typeof insertBiddingModalitySchema>;\n\nexport type ResourceSource = typeof resourceSources.$inferSelect;\nexport type InsertResourceSource = z.infer<typeof insertResourceSourceSchema>;\n\nexport type Process = typeof processes.$inferSelect;\nexport type InsertProcess = z.infer<typeof insertProcessSchema>;\n\nexport type ProcessStep = typeof processSteps.$inferSelect;\nexport type InsertProcessStep = z.infer<typeof insertProcessStepSchema>;\n\nexport type ProcessParticipant = typeof processParticipants.$inferSelect;\nexport type InsertProcessParticipant = z.infer<typeof insertProcessParticipantSchema>;\n\nexport type ProcessResponsibilityHistory = typeof processResponsibilityHistory.$inferSelect;\nexport type InsertProcessResponsibilityHistory = z.infer<typeof insertProcessResponsibilityHistorySchema>;\n\nexport type Convenio = typeof convenios.$inferSelect;\nexport type InsertConvenio = z.infer<typeof insertConvenioSchema>;\n\n// Tabela para processos excluídos (lixeira)\nexport const deletedProcesses = pgTable('deleted_processes', {\n  id: serial('id').primaryKey(),\n  originalProcessId: integer('original_process_id').notNull(),\n  pbdocNumber: text('pbdoc_number').notNull(),\n  description: text('description').notNull(),\n  modalityId: integer('modality_id').notNull(),\n  sourceId: integer('source_id').notNull(),\n  responsibleId: integer('responsible_id').notNull(),\n  currentDepartmentId: integer('current_department_id'),\n  centralDeCompras: text('central_de_compras'),\n  priority: priorityEnum('priority').notNull(),\n  status: processStatusEnum('status').notNull(),\n  createdAt: timestamp('created_at').notNull(),\n  updatedAt: timestamp('updated_at').notNull(),\n  responsibleSince: timestamp('responsible_since'),\n  deadline: timestamp('deadline'),\n  returnComments: text('return_comments'),\n  deletedAt: timestamp('deleted_at').notNull().defaultNow(),\n  deletedBy: integer('deleted_by').notNull(),\n  deletionReason: text('deletion_reason')\n});\n\nexport const insertDeletedProcessSchema = createInsertSchema(deletedProcesses);\nexport type DeletedProcess = typeof deletedProcesses.$inferSelect;\nexport type InsertDeletedProcess = z.infer<typeof insertDeletedProcessSchema>;\n","size_bytes":9177},"client/src/App.tsx":{"content":"import { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Layout from \"@/components/Layout\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Login from \"@/pages/Login\";\nimport Processes from \"@/pages/Processes\";\nimport ProcessDetail from \"@/pages/ProcessDetail\";\nimport ProcessCreate from \"@/pages/ProcessCreate\";\nimport ProcessEdit from \"@/pages/ProcessEdit\";\nimport ProcessTransfer from \"@/pages/ProcessTransfer\";\n\nimport ProcessReport from \"@/pages/ProcessReport\";\nimport BiddingFlow from \"@/pages/BiddingFlow\";\nimport BiddingFlowchart from \"@/pages/BiddingFlowchart\";\nimport Reports from \"@/pages/Reports\";\nimport Users from \"@/pages/Users\";\nimport Settings from \"@/pages/Settings\";\nimport Download from \"@/pages/Download\";\nimport TermsOfUse from \"@/pages/TermsOfUse\";\nimport Convenios from \"@/pages/Convenios\";\nimport FRP from \"@/pages/FRP\";\nimport ReportExport from \"@/pages/ReportExport\";\nimport Trash from \"@/pages/Trash\";\nimport RejectedSteps from \"@/pages/RejectedSteps\";\nimport ReportDownloads from \"@/pages/ReportDownloads\";\nimport { useEffect, useState } from \"react\";\nimport { apiRequest } from \"./lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminProtectedRoute from \"@/lib/admin-protected-route\";\nimport { NotificationProvider } from \"@/hooks/use-notifications\";\n\nfunction Router() {\n  const [location, setLocation] = useLocation();\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);\n  const { toast } = useToast();\n  \n  // Verificar se é uma rota pública\n  const isDownloadPage = location.startsWith(\"/download/\");\n  const isTermsPage = location === \"/termos\";\n  \n  // Lista de rotas públicas que não precisam de autenticação\n  const publicRoutes = [\n    \"/login\",\n    \"/download/seappb2025\",\n    \"/termos\"\n  ];\n\n  // Verificar status da autenticação e atualizar dados quando o usuário retorna à aba\n  useEffect(() => {\n    let visibilityChangeHandler: () => void;\n    \n    const checkAuthStatus = async () => {\n      try {\n        // Adicionando timestamp para evitar cache\n        const timestamp = Date.now();\n        const res = await fetch(`/api/auth/status?_t=${timestamp}`, {\n          credentials: \"include\",\n          cache: \"no-store\" // Forçar sempre atualizar \n        });\n        \n        console.log(\"Resposta de verificação de autenticação:\", res.status);\n        \n        if (res.ok) {\n          const userData = await res.json();\n          console.log(\"User is authenticated:\", userData.username);\n          setIsAuthenticated(true);\n          \n          // Se o usuário estiver na página de login e já estiver autenticado, redireciona para o dashboard\n          if (location === \"/login\") {\n            console.log(\"Redirecionando usuário autenticado para o dashboard\");\n            setLocation(\"/\");\n            // Fallback se o redirecionamento via wouter falhar\n            setTimeout(() => {\n              if (window.location.pathname === \"/login\") {\n                console.log(\"Fallback: usando window.location para redirecionar\");\n                window.location.href = \"/\";\n              }\n            }, 300);\n          }\n        } else {\n          console.log(\"User is not authenticated, status:\", res.status);\n          setIsAuthenticated(false);\n          \n          if (location !== \"/login\") {\n            console.log(\"Redirecionando para tela de login\");\n            setLocation(\"/login\");\n            // Adicionar um fallback se o redirecionamento via setLocation falhar\n            setTimeout(() => {\n              if (window.location.pathname !== \"/login\") {\n                console.log(\"Fallback: usando window.location para redirecionar para login\");\n                window.location.href = \"/login\";\n              }\n            }, 300);\n          }\n        }\n      } catch (error) {\n        console.error(\"Error checking auth status:\", error);\n        setIsAuthenticated(false);\n        toast({\n          title: \"Erro de conexão\",\n          description: \"Não foi possível conectar ao servidor\",\n          variant: \"destructive\",\n        });\n        \n        // Em caso de erro, redirecionar para login\n        if (location !== \"/login\") {\n          setTimeout(() => setLocation(\"/login\"), 100);\n        }\n      }\n    };\n\n    // Configurar o manipulador de mudança de visibilidade\n    visibilityChangeHandler = () => {\n      // Quando o usuário retorna à aba, verificar autenticação e atualizar os dados\n      if (!document.hidden) {\n        console.log(\"Aba tornou-se visível, atualizando dados\");\n        \n        // Verificar autenticação\n        checkAuthStatus();\n        \n        // Invalidar cache de consultas para forçar atualização dos dados\n        if (isAuthenticated) {\n          // Verificar a localização atual para invalidar as consultas relevantes\n          if (location === \"/\") {\n            // Invalidar consultas da página inicial/dashboard\n            import(\"./lib/queryClient\").then(({ queryClient }) => {\n              queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n              queryClient.invalidateQueries({ queryKey: [\"/api/analytics/process-statistics\"] });\n              queryClient.invalidateQueries({ queryKey: [\"/api/analytics/processes-by-source\"] });\n              queryClient.invalidateQueries({ queryKey: [\"/api/analytics/processes-by-responsible\"] });\n              queryClient.invalidateQueries({ queryKey: [\"/api/settings/monthly-goal\"] });\n              console.log(\"Dados do dashboard atualizados\");\n            });\n          } else if (location.includes(\"/processes\")) {\n            // Invalidar consultas relacionadas a processos\n            import(\"./lib/queryClient\").then(({ queryClient }) => {\n              queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n              console.log(\"Dados de processos atualizados\");\n            });\n          } else if (location === \"/users\") {\n            // Invalidar consultas relacionadas a usuários\n            import(\"./lib/queryClient\").then(({ queryClient }) => {\n              queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n              console.log(\"Dados de usuários atualizados\");\n            });\n          }\n        }\n      }\n    };\n\n    // Iniciar verificação de autenticação\n    checkAuthStatus();\n    \n    // Adicionar event listener para mudança de visibilidade\n    document.addEventListener(\"visibilitychange\", visibilityChangeHandler);\n    \n    // Limpar event listener ao desmontar\n    return () => {\n      document.removeEventListener(\"visibilitychange\", visibilityChangeHandler);\n    };\n  }, [location, setLocation, toast, isAuthenticated]);\n\n  // Show nothing while checking authentication\n  if (isAuthenticated === null) {\n    return null;\n  }\n\n  // Construir o componente de roteamento direto para rotas públicas\n  if (isDownloadPage || isTermsPage) {\n    return (\n      <Switch>\n        <Route path=\"/download/:token\">\n          {(params) => {\n            const validToken = \"seappb2025\";\n            if (params.token === validToken) {\n              return <Download />;\n            } else {\n              return <NotFound />;\n            }\n          }}\n        </Route>\n        <Route path=\"/termos\" component={TermsOfUse} />\n        <Route component={NotFound} />\n      </Switch>\n    );\n  }\n  \n  // Para outras rotas, verificar autenticação\n  if (!isAuthenticated && location !== \"/login\") {\n    console.log(\"Not authenticated and not on login page, redirecting to login\");\n    setTimeout(() => {\n      setLocation(\"/login\");\n    }, 0);\n    return null;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/login\" component={Login} />\n      \n      {/* Página de download protegida por token, acessível apenas por link direto */}\n      <Route path=\"/download/:token\">\n        {(params) => {\n          // Token de acesso fixo para validação - na prática pode vir do banco de dados\n          const validToken = \"seappb2025\";\n          if (params.token === validToken) {\n            return <Download />;\n          } else {\n            return <NotFound />;\n          }\n        }}\n      </Route>\n      \n      {/* Página de termos de uso */}\n      <Route path=\"/termos\" component={TermsOfUse} />\n      \n      <Route path=\"/\">\n        <Layout>\n          <Dashboard />\n        </Layout>\n      </Route>\n      \n      <Route path=\"/processes\">\n        <Layout>\n          <Processes />\n        </Layout>\n      </Route>\n      \n      <Route path=\"/processes/new\">\n        <Layout>\n          <ProcessCreate />\n        </Layout>\n      </Route>\n      \n      <Route path=\"/processes/:id\">\n        {params => (\n          <Layout>\n            <ProcessDetail id={params.id} />\n          </Layout>\n        )}\n      </Route>\n      \n      <Route path=\"/processes/:id/edit\">\n        {params => (\n          <Layout>\n            <ProcessEdit id={params.id} />\n          </Layout>\n        )}\n      </Route>\n      \n      <Route path=\"/processes/:id/transfer\">\n        {params => (\n          <Layout>\n            <ProcessTransfer id={params.id} />\n          </Layout>\n        )}\n      </Route>\n      \n      <Route path=\"/processes/:id/report\">\n        {params => (\n          <Layout>\n            <ProcessReport id={params.id} />\n          </Layout>\n        )}\n      </Route>\n      \n      <Route path=\"/bidding-flow\">\n        <Layout>\n          <BiddingFlow />\n        </Layout>\n      </Route>\n      \n      <Route path=\"/flowchart\">\n        <Layout>\n          <BiddingFlowchart />\n        </Layout>\n      </Route>\n      \n      <Route path=\"/reports\">\n        <Layout>\n          <AdminProtectedRoute>\n            <Reports />\n          </AdminProtectedRoute>\n        </Layout>\n      </Route>\n      \n      <Route path=\"/trash\">\n        <Layout>\n          <Trash />\n        </Layout>\n      </Route>\n      \n      <Route path=\"/rejected-steps\">\n        <Layout>\n          <AdminProtectedRoute>\n            <RejectedSteps />\n          </AdminProtectedRoute>\n        </Layout>\n      </Route>\n      \n      <Route path=\"/users\">\n        <Layout>\n          <Users />\n        </Layout>\n      </Route>\n      \n      <Route path=\"/settings\">\n        <Layout>\n          <Settings />\n        </Layout>\n      </Route>\n      \n      <Route path=\"/conv\">\n        <Layout>\n          <AdminProtectedRoute>\n            <Convenios />\n          </AdminProtectedRoute>\n        </Layout>\n      </Route>\n      \n      <Route path=\"/frp\">\n        <Layout>\n          <AdminProtectedRoute>\n            <FRP />\n          </AdminProtectedRoute>\n        </Layout>\n      </Route>\n      \n      <Route path=\"/relatorio\">\n        <Layout>\n          <ReportExport />\n        </Layout>\n      </Route>\n      \n      <Route path=\"/downloads\">\n        <Layout>\n          <ReportDownloads />\n        </Layout>\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\n// Componente para forçar carregamento correto de imagens\nfunction ImagePreloader() {\n  useEffect(() => {\n    // Funções para pré-carregar imagens críticas\n    const preloadImages = () => {\n      // Lista de imagens que precisam ser pré-carregadas\n      const imagesToPreload = [\n        \"https://paraiba.pb.gov.br/marca-do-governo/GovPBT.png\"\n      ];\n      \n      // Pré-carregar cada imagem\n      imagesToPreload.forEach(src => {\n        const img = new Image();\n        img.src = src;\n        \n        // Garantir que a imagem seja armazenada em cache\n        img.onload = () => console.log(`Imagem pré-carregada: ${src}`);\n        img.onerror = () => console.error(`Erro ao carregar imagem: ${src}`);\n      });\n    };\n    \n    // Carregar imagens quando o componente for montado\n    preloadImages();\n    \n    // Recarregar imagens quando a página estiver totalmente carregada\n    window.addEventListener('load', preloadImages);\n    \n    return () => {\n      window.removeEventListener('load', preloadImages);\n    };\n  }, []);\n  \n  return null;\n}\n\n// Componente principal da aplicação\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <NotificationProvider>\n          <ImagePreloader />\n          <Router />\n        </NotificationProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":12437},"client/src/index.css":{"content":"@import url(\"./components/ui/dark-text-fix.css\");\n@import url(\"./components/ui/table-text-fix.css\");\n@import url(\"./components/ui/dark-mode-stats-fix.css\");\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: 0 0% 100%;\n  --foreground: 20 14.3% 4.1%;\n  --muted: 60 4.8% 95.9%;\n  --muted-foreground: 25 5.3% 44.7%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 20 14.3% 4.1%;\n  --card: 0 0% 100%;\n  --card-foreground: 20 14.3% 4.1%;\n  --border: 20 5.9% 90%;\n  --input: 20 5.9% 90%;\n  --primary: 207 90% 54%;\n  --primary-foreground: 211 100% 99%;\n  --secondary: 222 47% 20%;\n  --secondary-foreground: 0 0% 98%;\n  --accent: 60 4.8% 95.9%;\n  --accent-foreground: 24 9.8% 10%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 60 9.1% 97.8%;\n  --ring: 20 14.3% 4.1%;\n  --radius: 0.5rem;\n\n  /* Chart colors */\n  --chart-1: 207 90% 54%;\n  --chart-2: 120 100% 40%;\n  --chart-3: 45 100% 50%;\n  --chart-4: 330 100% 50%;\n  --chart-5: 270 100% 50%;\n\n  /* Status colors */\n  --status-pending: 45 100% 50%;\n  --status-progress: 207 90% 54%;\n  --status-completed: 120 100% 40%;\n  --status-canceled: 0 84.2% 60.2%;\n\n  /* Sidebar specific colors - SteelBlue (#4682B4) */\n  --sidebar-background: 207 44% 49%;\n  --sidebar-foreground: 0 0% 100%;\n  --sidebar-primary: 207 90% 54%;\n  --sidebar-primary-foreground: 211 100% 99%;\n  --sidebar-accent: 207 44% 40%;\n  --sidebar-accent-foreground: 0 0% 100%;\n  --sidebar-border: 207 44% 40%;\n  --sidebar-ring: 0 0% 83.9%;\n}\n\n.dark {\n  --background: 240 10% 3.9%;\n  --foreground: 0 0% 100%;\n  --muted: 240 3.7% 15.9%;\n  --muted-foreground: 240 5% 90%;\n  --popover: 240 10% 3.9%;\n  --popover-foreground: 0 0% 100%;\n  --card: 240 10% 3.9%;\n  --card-foreground: 0 0% 100%;\n  --border: 240 3.7% 15.9%;\n  --input: 240 3.7% 15.9%;\n  --primary: 256 100% 6.5%;\n  --primary-foreground: 211 100% 99%;\n  --secondary: 240 3.7% 15.9%;\n  --secondary-foreground: 210 40% 98%;\n  --accent: 240 3.7% 15.9%;\n  --accent-foreground: 210 40% 98%;\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 210 40% 98%;\n  --ring: 240 4.9% 83.9%;\n\n  /* Sidebar colors in dark mode - #010021 */\n  --sidebar-background: 256 100% 6.5%;\n  --sidebar-foreground: 0 0% 100%;\n  --sidebar-primary: 256 100% 16.5%;\n  --sidebar-primary-foreground: 211 100% 99%;\n  --sidebar-accent: 256 100% 10.5%;\n  --sidebar-accent-foreground: 0 0% 100%;\n  --sidebar-border: 256 100% 10.5%;\n  --sidebar-ring: 0 0% 83.9%;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    font-family: 'Roboto', sans-serif;\n    @apply antialiased bg-background text-foreground;\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-muted;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-muted-foreground/50;\n    border-radius: 4px;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-muted-foreground/70;\n  }\n}\n\n.status-badge {\n  @apply px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full;\n}\n\n.status-badge-draft {\n  @apply bg-gray-100 text-gray-800;\n}\n\n.status-badge-in_progress {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.status-badge-completed {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-badge-canceled {\n  @apply bg-gray-100 text-gray-800;\n}\n\n.status-badge-overdue {\n  @apply bg-red-100 text-red-800;\n}\n\n/* Status classes for general use */\n.status-in-progress {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.status-completed {\n  @apply bg-green-100 text-green-800;\n}\n\n.status-canceled {\n  @apply bg-gray-100 text-gray-800;\n}\n\n.status-overdue {\n  @apply bg-red-100 text-red-800;\n}\n\n.status-default {\n  @apply bg-gray-100 text-gray-800;\n}\n\n.priority-badge {\n  @apply px-2 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full;\n}\n\n.priority-badge-low {\n  @apply bg-blue-100 text-blue-800;\n}\n\n.priority-badge-medium {\n  @apply bg-yellow-100 text-yellow-800;\n}\n\n.priority-badge-high {\n  @apply bg-red-100 text-red-800;\n}\n\n/* Melhorias globais para qualidade de imagem */\nimg {\n  image-rendering: -webkit-optimize-contrast;\n  image-rendering: crisp-edges;\n  image-rendering: pixelated;\n}\n\n/* Específico para fluxogramas */\n.flowchart-image,\nimg[src*=\"fluxograma\"] {\n  image-rendering: high-quality !important;\n  image-rendering: -webkit-optimize-contrast !important;\n  image-rendering: crisp-edges !important;\n  -ms-interpolation-mode: bicubic !important;\n}","size_bytes":4392},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { ThemeProvider } from \"next-themes\";\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <ThemeProvider attribute=\"class\" defaultTheme=\"light\">\n    <App />\n    <Toaster />\n  </ThemeProvider>\n);\n","size_bytes":351},"client/src/components/Header.tsx":{"content":"import { RefreshCw } from \"lucide-react\";\nimport { useLocation, Link } from \"wouter\";\nimport { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"@shared/schema\";\nimport { ThemeToggle } from \"./theme-toggle\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport NotificationDropdown from \"./notifications/NotificationDropdown\";\nimport { useNotifications } from \"@/hooks/use-notifications\";\n\ninterface HeaderProps {\n  title: string;\n}\n\nconst Header = ({ title }: HeaderProps) => {\n  const [location, setLocation] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const { toast } = useToast();\n  const { notifications, unreadCount, markAsRead, markAllAsRead, clearAllNotifications } =\n    useNotifications();\n\n  // Get current user data\n  const { data: user } = useQuery<User>({\n    queryKey: [\"/api/auth/status\"],\n    refetchOnWindowFocus: false,\n  });\n\n  // Função para atualizar todos os dados\n  const refreshData = () => {\n    // Invalidar as consultas mais comuns para forçar a atualização\n    queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n    queryClient.invalidateQueries({\n      queryKey: [\"/api/analytics/process-statistics\"],\n    });\n    queryClient.invalidateQueries({\n      queryKey: [\"/api/analytics/processes-by-source\"],\n    });\n    queryClient.invalidateQueries({\n      queryKey: [\"/api/analytics/processes-by-responsible\"],\n    });\n    queryClient.invalidateQueries({ queryKey: [\"/api/settings/monthly-goal\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/modalities\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/sources\"] });\n\n    // Mostrar notificação de dados atualizados\n    toast({\n      title: \"Dados atualizados\",\n      description: \"Todas as informações foram atualizadas com sucesso.\",\n      duration: 3000,\n    });\n  };\n\n  // Get user initials for the avatar\n  const userInitials = user?.fullName\n    ? user.fullName\n        .split(\" \")\n        .map((n) => n[0])\n        .slice(0, 2)\n        .join(\"\")\n        .toUpperCase()\n    : \"US\";\n\n  return (\n    <header className=\"bg-background shadow-sm\">\n      <div className=\"flex justify-between items-center px-4 py-3\">\n        <div className=\"flex items-center\">\n          {/* Mobile Menu Button */}\n          <button\n            type=\"button\"\n            className=\"md:hidden text-secondary-500 mr-3\"\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n          >\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              className=\"h-6 w-6\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n              stroke=\"currentColor\"\n            >\n              <path\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M4 6h16M4 12h16M4 18h16\"\n              />\n            </svg>\n          </button>\n\n          <div className=\"text-lg font-medium text-secondary-500 dark:text-white\">\n            {title}\n          </div>\n\n          {/* Botão de atualização */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={refreshData}\n            className=\"ml-3 flex items-center gap-1 h-8\"\n            title=\"Atualizar dados\"\n          >\n            <RefreshCw className=\"h-4 w-4\" />\n            <span className=\"hidden sm:inline text-sm\">Atualizar</span>\n          </Button>\n        </div>\n\n        <div className=\"flex items-center\">\n          <NotificationDropdown\n            notifications={notifications}\n            unreadCount={unreadCount}\n            onMarkAllAsRead={markAllAsRead}\n            onClearAll={clearAllNotifications}\n            onReadNotification={markAsRead}\n          />\n\n          <button\n            type=\"button\"\n            className=\"ml-3 flex items-center text-sm focus:outline-none\"\n          >\n            <span className=\"mr-2 hidden md:block text-foreground\">\n              {user?.fullName}\n            </span>\n            <div className=\"w-8 h-8 rounded-full bg-secondary-500 flex items-center justify-center text-white\">\n              <span>{userInitials}</span>\n            </div>\n          </button>\n        </div>\n      </div>\n\n      {/* Mobile Menu */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden bg-background shadow-lg absolute z-10 w-full\">\n          <nav className=\"px-4 py-2\">\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/\">\n                  <a className=\"block px-4 py-2 text-sm text-foreground hover:bg-muted rounded-md\">\n                    Dashboard\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/processes\">\n                  <a className=\"block px-4 py-2 text-sm text-foreground hover:bg-muted rounded-md\">\n                    Processos\n                  </a>\n                </Link>\n              </li>\n              {user?.role === \"admin\" && (\n                <li>\n                  <Link href=\"/reports\">\n                    <a className=\"block px-4 py-2 text-sm text-foreground hover:bg-muted rounded-md\">\n                      Relatórios\n                    </a>\n                  </Link>\n                </li>\n              )}\n              {user?.role === \"admin\" && (\n                <li>\n                  <Link href=\"/users\">\n                    <a className=\"block px-4 py-2 text-sm text-foreground hover:bg-muted rounded-md\">\n                      Usuários\n                    </a>\n                  </Link>\n                </li>\n              )}\n            </ul>\n          </nav>\n        </div>\n      )}\n    </header>\n  );\n};\n\nexport default Header;\n","size_bytes":5861},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport Header from \"./Header\";\nimport MobileNav from \"./MobileNav\";\nimport { useLocation } from \"wouter\";\nimport { DeadlineAlert } from \"./alerts/DeadlineAlert\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nconst Layout = ({ children }: LayoutProps) => {\n  const [location] = useLocation();\n  \n  // Get the current page title based on the route\n  const getPageTitle = () => {\n    const path = location.split(\"/\")[1];\n    \n    switch (path) {\n      case \"\":\n        return \"Dashboard\";\n      case \"processes\":\n        if (location.includes(\"new\")) return \"Novo Processo\";\n        if (location.split(\"/\").length > 2) return \"Detalhes do Processo\";\n        return \"Processos\";\n      case \"bidding-flow\":\n        return \"Fluxo de Licitação\";\n      case \"reports\":\n        return \"Relatórios\";\n      case \"users\":\n        return \"Usuários\";\n      case \"settings\":\n        return \"Configurações\";\n      case \"rejected-steps\":\n        return \"Etapas Rejeitadas\";\n      case \"downloads\":\n        return \"Downloads de Relatórios\";\n      default:\n        return \"Sistema de Controle de Processos de Licitação\";\n    }\n  };\n  \n  return (\n    <div className=\"flex h-screen overflow-hidden\" id=\"app-container\">\n      {/* Componente para verificar prazos e mostrar alertas */}\n      <DeadlineAlert />\n      \n      {/* Sidebar - hidden on mobile */}\n      <Sidebar />\n      \n      {/* Mobile Navigation - shown only on smaller screens */}\n      <MobileNav />\n      \n      {/* Main Content */}\n      <main className=\"flex-1 overflow-y-auto pb-16 md:pb-0\">\n        <Header title={getPageTitle()} />\n        \n        {/* Page Content */}\n        <div className=\"p-4 md:p-6\">\n          {children}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;\n","size_bytes":1832},"client/src/components/MobileNav.tsx":{"content":"import { useLocation, Link } from \"wouter\";\nimport { Home, FileText, BarChart2, Users } from \"lucide-react\";\n\nconst MobileNav = () => {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"md:hidden fixed bottom-0 left-0 right-0 z-10 bg-[#105e8f] dark:bg-[#010021] shadow-lg\">\n      <div className=\"flex justify-around\">\n        <Link\n          href=\"/\"\n          className={`flex flex-col items-center py-3 text-white ${location === \"/\" ? \"bg-[#396a9c] dark:bg-[#01001A] px-4 rounded-t-lg\" : \"\"}`}\n        >\n          <Home className=\"h-6 w-6\" />\n          <span className=\"text-xs mt-1\">Dashboard</span>\n        </Link>\n\n        <Link\n          href=\"/processes\"\n          className={`flex flex-col items-center py-3 text-white ${location.startsWith(\"/processes\") ? \"bg-[#396a9c] dark:bg-[#01001A] px-4 rounded-t-lg\" : \"\"}`}\n        >\n          <FileText className=\"h-6 w-6\" />\n          <span className=\"text-xs mt-1\">Processos</span>\n        </Link>\n\n        <Link\n          href=\"/reports\"\n          className={`flex flex-col items-center py-3 text-white ${location === \"/reports\" ? \"bg-[#396a9c] dark:bg-[#01001A] px-4 rounded-t-lg\" : \"\"}`}\n        >\n          <BarChart2 className=\"h-6 w-6\" />\n          <span className=\"text-xs mt-1\">Relatórios</span>\n        </Link>\n\n        <Link\n          href=\"/users\"\n          className={`flex flex-col items-center py-3 text-white ${location === \"/users\" ? \"bg-[#396a9c] dark:bg-[#01001A] px-4 rounded-t-lg\" : \"\"}`}\n        >\n          <Users className=\"h-6 w-6\" />\n          <span className=\"text-xs mt-1\">Usuários</span>\n        </Link>\n      </div>\n    </div>\n  );\n};\n\nexport default MobileNav;\n","size_bytes":1664},"client/src/components/Sidebar.tsx":{"content":"import { useLocation, Link } from \"wouter\";\nimport {\n  Home,\n  FileText,\n  GitMerge,\n  BarChart2,\n  Users,\n  Settings,\n  LogOut,\n  Workflow,\n  FileSpreadsheet,\n  ChevronDown,\n  ChevronRight,\n  ArchiveIcon,\n  AlertTriangle,\n  Download,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMemo, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"@shared/schema\";\nimport { ThemeToggle } from \"./theme-toggle\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport govPBTLogo from \"@assets/GovPBT.png\";\n\nconst Sidebar = () => {\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const isMobile = useIsMobile();\n  const [instrumentoRepasseOpen, setInstrumentoRepasseOpen] = useState(false);\n\n  // Get current user data\n  const { data: user } = useQuery<User>({\n    queryKey: [\"/api/auth/status\"],\n    refetchOnWindowFocus: false,\n  });\n\n  const handleLogout = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/auth/logout\", {});\n      setLocation(\"/login\");\n    } catch (error) {\n      toast({\n        title: \"Erro ao sair\",\n        description: \"Não foi possível encerrar a sessão\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const navItems = useMemo(\n    () => [\n      {\n        path: \"/\",\n        icon: <Home className=\"h-5 w-5 mr-3\" />,\n        label: \"Dashboard\",\n      },\n      {\n        path: \"/processes\",\n        icon: <FileText className=\"h-5 w-5 mr-3\" />,\n        label: \"Processos\",\n      },\n\n      {\n        path: \"/reports\",\n        icon: <BarChart2 className=\"h-5 w-5 mr-3\" />,\n        label: \"Relatórios\",\n        adminOnly: true,\n      },\n      {\n        path: \"/rejected-steps\",\n        icon: <AlertTriangle className=\"h-5 w-5 mr-3\" />,\n        label: \"Etapas Rejeitadas\",\n        adminOnly: true,\n      },\n      {\n        path: \"/downloads\",\n        icon: <Download className=\"h-5 w-5 mr-3\" />,\n        label: \"Downloads\",\n      },\n      {\n        path: \"/users\",\n        icon: <Users className=\"h-5 w-5 mr-3\" />,\n        label: \"Usuários\",\n        adminOnly: true,\n      },\n    ],\n    [],\n  );\n\n  // Filter out admin-only items if user is not admin\n  const filteredNavItems = navItems.filter(\n    (item) => !item.adminOnly || user?.role === \"admin\",\n  );\n\n  // Get user initials for the avatar\n  const userInitials = useMemo(() => {\n    if (!user?.fullName) return \"US\";\n    return user.fullName\n      .split(\" \")\n      .map((n) => n[0])\n      .slice(0, 2)\n      .join(\"\")\n      .toUpperCase();\n  }, [user?.fullName]);\n\n  // Se estiver em dispositivo móvel, não renderiza a sidebar\n  if (isMobile) {\n    return null;\n  }\n\n  return (\n    <aside className=\"hidden md:flex flex-shrink-0\">\n      <div className=\"flex flex-col w-64 dark:bg-[#010021] bg-[#105e8f] shadow-lg\">\n        {/* Logo */}\n        <a href=\"/\">\n          <div className=\"flex flex-col items-center justify-center h-auto px-6 py-4 dark:bg-[#01001A] bg-[#396a9c]\">\n            <img\n              src={govPBTLogo}\n              alt=\"Logo GovPBT\"\n              className=\"w-32 h-auto mb-2\"\n            />\n            <div className=\"flex items-center\">\n              <span className=\"text-white font-medium text-lg\">SEAP-PB</span>\n            </div>\n          </div>\n        </a>\n        {/* User Info */}\n        <div className=\"flex flex-col items-center py-4 border-b dark:border-[#090935] border-[#5892c2]\">\n          <div className=\"w-12 h-12 rounded-full bg-white flex items-center justify-center mb-2\">\n            <span className=\"dark:text-[#010021] text-[#4682B4] font-bold text-lg\">\n              {userInitials}\n            </span>\n          </div>\n          <div className=\"text-white text-sm font-medium\">{user?.fullName}</div>\n          <div className=\"dark:text-blue-200 text-blue-100 text-xs capitalize\">\n            {user?.department}\n          </div>\n        </div>\n\n        {/* Navigation Links */}\n        <nav className=\"flex-1 overflow-y-auto py-4\">\n          <ul className=\"space-y-1\">\n            {filteredNavItems.map((item) => (\n              <li key={item.path} className=\"px-2\">\n                <Link\n                  href={item.path}\n                  className={`flex items-center px-4 py-3 rounded-md group transition-colors ${\n                    location === item.path\n                      ? \"text-white dark:bg-[#01001A] bg-[#396a9c] font-medium\"\n                      : \"text-white dark:hover:bg-[#020035] hover:bg-[#5892c2]\"\n                  }`}\n                >\n                  {item.icon}\n                  <span>{item.label}</span>\n                </Link>\n              </li>\n            ))}\n\n            {/* Instrumento de repasse (dropdown) - only for admin */}\n            {user?.role === \"admin\" && (\n              <li className=\"px-2\">\n                <button\n                  onClick={() =>\n                    setInstrumentoRepasseOpen(!instrumentoRepasseOpen)\n                  }\n                  className=\"flex items-center justify-between w-full px-4 py-3 rounded-md group transition-colors text-white dark:hover:bg-[#020035] hover:bg-[#5892c2]\"\n                >\n                  <div className=\"flex items-center\">\n                    <FileSpreadsheet className=\"h-5 w-5 mr-3\" />\n                    <span className=\"text-sm\">Instrumento de repasse</span>\n                  </div>\n                  {instrumentoRepasseOpen ? (\n                    <ChevronDown className=\"h-4 w-4\" />\n                  ) : (\n                    <ChevronRight className=\"h-4 w-4\" />\n                  )}\n                </button>\n\n                {/* Submenu */}\n                {instrumentoRepasseOpen && (\n                  <ul className=\"ml-8 mt-1 space-y-1\">\n                    <li>\n                      <Link\n                        href=\"/conv\"\n                        className={`flex items-center px-4 py-2 rounded-md group transition-colors text-sm ${\n                          location === \"/conv\"\n                            ? \"text-white dark:bg-[#01001A] bg-[#396a9c] font-medium\"\n                            : \"text-white dark:hover:bg-[#020035] hover:bg-[#5892c2]\"\n                        }`}\n                      >\n                        <span>Convênios</span>\n                      </Link>\n                    </li>\n                    <li>\n                      <Link\n                        href=\"/frp\"\n                        className={`flex items-center px-4 py-2 rounded-md group transition-colors text-sm ${\n                          location === \"/frp\"\n                            ? \"text-white dark:bg-[#01001A] bg-[#396a9c] font-medium\"\n                            : \"text-white dark:hover:bg-[#020035] hover:bg-[#5892c2]\"\n                        }`}\n                      >\n                        <span>FRP</span>\n                      </Link>\n                    </li>\n                  </ul>\n                )}\n              </li>\n            )}\n\n            {/* Lixeira/Arquivados - visible for all users */}\n            <li className=\"px-2\">\n              <Link\n                href=\"/trash\"\n                className={`flex items-center px-4 py-3 rounded-md group transition-colors ${\n                  location === \"/ar\"\n                    ? \"text-white dark:bg-[#01001A] bg-[#396a9c] font-medium\"\n                    : \"text-white dark:hover:bg-[#020035] hover:bg-[#5892c2]\"\n                }`}\n              >\n                <ArchiveIcon className=\"h-5 w-5 mr-3\" />\n                <span>Arquivados</span>\n              </Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* Version and Theme */}\n        <div className=\"p-2 border-t dark:border-[#090935] border-[#5892c2]\">\n          <div className=\"flex items-center justify-between px-4 py-2 text-white text-xs\">\n            <span>v1.1.0</span>\n            {/* <div className=\"hidden md:block\">\n              <ThemeToggle />\n            </div>\n            */}\n          </div>\n        </div>\n\n        {/* Logout Link */}\n        <div className=\"p-2 border-t dark:border-[#090935] border-[#5892c2]\">\n          <button\n            onClick={handleLogout}\n            className=\"flex items-center w-full px-4 py-2 text-white dark:hover:bg-[#01001A] hover:bg-[#396a9c] rounded-md group transition-colors\"\n          >\n            <LogOut className=\"h-5 w-5 mr-3\" />\n            <span>Sair</span>\n          </button>\n        </div>\n      </div>\n    </aside>\n  );\n};\n\nexport default Sidebar;\n","size_bytes":8505},"client/src/components/SimpleImageZoom.tsx":{"content":"import { useState } from \"react\";\nimport { ZoomIn, ZoomOut, RotateCcw } from \"lucide-react\";\n\ninterface SimpleImageZoomProps {\n  imageSrc: string;\n  alt: string;\n}\n\nconst SimpleImageZoom = ({ imageSrc, alt }: SimpleImageZoomProps) => {\n  const [scale, setScale] = useState(1);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  // Níveis de zoom fixos: 100%, 300%, 500%\n  const zoomLevels = [1, 4, 6];\n  const getCurrentZoomIndex = () => zoomLevels.indexOf(scale);\n\n  const zoomIn = () => {\n    const currentIndex = getCurrentZoomIndex();\n    if (currentIndex < zoomLevels.length - 1) {\n      setScale(zoomLevels[currentIndex + 1]);\n    }\n  };\n\n  const zoomOut = () => {\n    const currentIndex = getCurrentZoomIndex();\n    if (currentIndex > 0) {\n      setScale(zoomLevels[currentIndex - 1]);\n    }\n  };\n\n  const resetZoom = () => {\n    setScale(1);\n    setPosition({ x: 0, y: 0 });\n  };\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    if (scale <= 1) return;\n\n    const startX = e.clientX - position.x;\n    const startY = e.clientY - position.y;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      setPosition({\n        x: e.clientX - startX,\n        y: e.clientY - startY,\n      });\n    };\n\n    const handleMouseUp = () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"mouseup\", handleMouseUp);\n  };\n\n  return (\n    <div className=\"relative w-full h-full border-2 border-gray-200 rounded overflow-hidden bg-gray-50\">\n      {/* Controles de Zoom */}\n      <div className=\"absolute top-4 right-4 z-10 flex gap-2\">\n        <button\n          onClick={zoomIn}\n          disabled={getCurrentZoomIndex() >= zoomLevels.length - 1}\n          className=\"bg-white hover:bg-gray-50 border border-gray-300 rounded p-2 shadow-sm disabled:opacity-50\"\n          title=\"Aumentar zoom\"\n        >\n          <ZoomIn className=\"h-4 w-4\" />\n        </button>\n        <button\n          onClick={zoomOut}\n          disabled={getCurrentZoomIndex() <= 0}\n          className=\"bg-white hover:bg-gray-50 border border-gray-300 rounded p-2 shadow-sm disabled:opacity-50\"\n          title=\"Diminuir zoom\"\n        >\n          <ZoomOut className=\"h-4 w-4\" />\n        </button>\n        <button\n          onClick={resetZoom}\n          className=\"bg-white hover:bg-gray-50 border border-gray-300 rounded p-2 shadow-sm\"\n          title=\"Resetar zoom\"\n        >\n          <RotateCcw className=\"h-4 w-4\" />\n        </button>\n      </div>\n\n      {/* Indicador de Zoom */}\n      <div className=\"absolute bottom-4 right-4 z-10 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-xs\">\n        {(scale * 100).toFixed(0)}%\n      </div>\n\n      {/* Instruções */}\n      {scale > 1 && (\n        <div className=\"absolute bottom-4 left-4 z-10 bg-black bg-opacity-70 text-white px-2 py-1 rounded text-xs\">\n          Arraste para mover a imagem\n        </div>\n      )}\n\n      {/* Imagem */}\n      <div className=\"w-full h-full flex items-center justify-center\">\n        <img\n          src={imageSrc}\n          alt={alt}\n          className=\"max-w-full max-h-full object-contain select-none transition-transform duration-200\"\n          style={{\n            transform: `scale(${scale}) translate(${position.x / scale}px, ${position.y / scale}px)`,\n            cursor: scale > 1 ? \"grab\" : \"default\",\n            imageRendering: \"crisp-edges\",\n          }}\n          onMouseDown={handleMouseDown}\n          draggable={false}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleImageZoom;\n","size_bytes":3666},"client/src/components/WebSocketProvider.tsx":{"content":"import { createContext, ReactNode, useContext, useEffect } from 'react';\nimport { useWebSocket } from '@/hooks/use-websocket';\nimport { queryClient } from '@/lib/queryClient';\n\n// Contexto do WebSocket\nconst WebSocketContext = createContext<ReturnType<typeof useWebSocket> | null>(null);\n\nexport function WebSocketProvider({ children }: { children: ReactNode }) {\n  const websocketState = useWebSocket();\n  \n  return (\n    <WebSocketContext.Provider value={websocketState}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}\n\n// Hook para usar o websocket\nexport function useWebSocketContext() {\n  const context = useContext(WebSocketContext);\n  if (!context) {\n    throw new Error('useWebSocketContext deve ser usado dentro de um WebSocketProvider');\n  }\n  return context;\n}","size_bytes":781},"client/src/components/login-theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"next-themes\";\nimport { useEffect, useState } from \"react\";\n\nexport function LoginThemeToggle() {\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  // Evitar problema de hidratação\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return null;\n  }\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n      className=\"w-8 h-8 rounded-full opacity-50 hover:opacity-100 transition-opacity absolute top-3 right-3\"\n      title={theme === \"dark\" ? \"Mudar para modo claro\" : \"Mudar para modo escuro\"}\n    >\n      {theme === \"dark\" ? (\n        <Sun className=\"h-4 w-4\" />\n      ) : (\n        <Moon className=\"h-4 w-4\" />\n      )}\n      <span className=\"sr-only\">Alternar tema</span>\n    </Button>\n  );\n}","size_bytes":962},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"next-themes\";\nimport { useEffect, useState } from \"react\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  // Evitar problema de hidratação\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    return null;\n  }\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n      className=\"rounded-full\"\n      title={theme === \"dark\" ? \"Mudar para modo claro\" : \"Mudar para modo escuro\"}\n    >\n      {theme === \"dark\" ? (\n        <Sun className=\"h-[1.5rem] w-[1.5rem]\" />\n      ) : (\n        <Moon className=\"h-[1.5rem] w-[1.5rem]\" />\n      )}\n      <span className=\"sr-only\">Alternar tema</span>\n    </Button>\n  );\n}","size_bytes":906},"client/src/hooks/use-interval.tsx":{"content":"import { useEffect, useRef } from 'react';\n\n/**\n * Hook para executar uma função em intervalos regulares. \n * Baseado na implementação de Dan Abramov: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n * \n * @param callback Função a ser executada no intervalo\n * @param delay Intervalo em milissegundos (null para pausar)\n */\nexport function useInterval(callback: () => void, delay: number | null) {\n  const savedCallback = useRef<() => void>(callback);\n\n  // Salva a última callback\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Configura o intervalo\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","size_bytes":826},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-notifications.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode, useRef } from \"react\";\nimport { \n  Notification, \n  NotificationState, \n  NotificationType \n} from \"@/types/notification\";\nimport { generateId } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useInterval } from \"./use-interval\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\n\n// API simulada - no futuro pode ser substituída por chamadas reais à API\nconst MOCK_NOTIFICATIONS: Notification[] = [];\n\n// Intervalo para verificar novos processos com prazo próximo (15 minutos)\nconst CHECK_DEADLINES_INTERVAL = 15 * 60 * 1000;\n\n// Contexto para gerenciar o estado das notificações\ninterface NotificationContextType {\n  notifications: Notification[];\n  unreadCount: number;\n  markAsRead: (id: string) => void;\n  markAllAsRead: () => void;\n  clearAllNotifications: () => void;\n  addNotification: (notification: Omit<Notification, \"id\" | \"createdAt\" | \"read\">) => void;\n}\n\nconst NotificationContext = createContext<NotificationContextType | null>(null);\n\nexport function NotificationProvider({ children }: { children: ReactNode }) {\n  const [state, setState] = useState<NotificationState>({\n    notifications: [...MOCK_NOTIFICATIONS],\n    unreadCount: MOCK_NOTIFICATIONS.filter(n => !n.read).length\n  });\n  \n  const { toast } = useToast();\n  \n  // Buscar processos\n  const { data: processes } = useQuery({\n    queryKey: ['/api/processes'],\n    refetchOnWindowFocus: false,\n  });\n  \n  // Estado do WebSocket\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  \n  // Verificar processos com prazo próximo\n  useInterval(() => {\n    checkDeadlines();\n  }, CHECK_DEADLINES_INTERVAL);\n  \n  // Função para verificar processos com prazo próximo\n  const checkDeadlines = () => {\n    if (!processes || !Array.isArray(processes)) return;\n    \n    const today = new Date();\n    const threeDaysFromNow = new Date(today);\n    threeDaysFromNow.setDate(today.getDate() + 3);\n    \n    // Verificar processos com passos que vencem em até 3 dias\n    processes.forEach(process => {\n      if (process.steps && Array.isArray(process.steps)) {\n        process.steps.forEach((step: any) => {\n          if (step.dueDate && !step.isCompleted) {\n            const dueDate = new Date(step.dueDate);\n            \n            if (dueDate <= threeDaysFromNow && dueDate >= today) {\n              // Verificar se já existe notificação para este passo\n              const existingNotification = state.notifications.find(\n                n => n.type === \"deadline\" && n.entityId === step.id\n              );\n              \n              if (!existingNotification) {\n                // Criar nova notificação\n                addNotification({\n                  title: `Prazo próximo: ${process.pbdocNumber}`,\n                  message: `O passo \"${step.stepName}\" vence em ${Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24))} dias`,\n                  type: \"deadline\",\n                  link: `/processes/${process.id}`,\n                  entityId: step.id\n                });\n              }\n            }\n          }\n        });\n      }\n    });\n  };\n  \n  // Efeito para carregar notificações salvas no localStorage e configurar WebSocket\n  useEffect(() => {\n    // Carregar notificações do localStorage\n    const savedNotifications = localStorage.getItem('notifications');\n    if (savedNotifications) {\n      try {\n        const parsed = JSON.parse(savedNotifications);\n        \n        // Converter strings de data para objetos Date\n        const notifications = parsed.notifications.map((n: any) => ({\n          ...n,\n          createdAt: new Date(n.createdAt)\n        }));\n        \n        setState({\n          notifications,\n          unreadCount: notifications.filter((n: Notification) => !n.read).length\n        });\n      } catch (e) {\n        console.error(\"Erro ao carregar notificações do localStorage:\", e);\n      }\n    }\n    \n    // Configurar WebSocket para atualizações em tempo real\n    const connectWebSocket = () => {\n      try {\n        // Determinar o protocolo correto (ws ou wss)\n        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n        const wsUrl = `${protocol}//${window.location.host}/ws`;\n        \n        console.log('Conectando ao WebSocket para notificações:', wsUrl);\n        const ws = new WebSocket(wsUrl);\n        \n        ws.onopen = () => {\n          console.log('Conexão WebSocket estabelecida para notificações');\n          setIsConnected(true);\n          setSocket(ws);\n        };\n        \n        ws.onclose = () => {\n          console.log('Conexão WebSocket fechada, tentando reconectar em 5 segundos...');\n          setIsConnected(false);\n          setSocket(null);\n          \n          // Tentar reconectar após 5 segundos\n          setTimeout(connectWebSocket, 5000);\n        };\n        \n        ws.onerror = (error) => {\n          console.error('Erro na conexão WebSocket:', error);\n        };\n        \n        ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            console.log('Mensagem WebSocket recebida:', data);\n            \n            // Processar diferentes tipos de mensagens\n            switch (data.type) {\n              case 'new_process':\n                // Adicionar nova notificação para o processo criado\n                addNotification({\n                  title: \"Novo processo criado\",\n                  message: data.message,\n                  type: \"new_process\",\n                  link: `/processes/${data.process.id}`,\n                  entityId: data.process.id\n                });\n                break;\n                \n              case 'process_updated':\n                // Adicionar notificação para atualização de processo\n                addNotification({\n                  title: \"Processo atualizado\",\n                  message: data.message,\n                  type: \"update\",\n                  link: `/processes/${data.process.id}`,\n                  entityId: data.process.id\n                });\n                break;\n                \n              case 'user_created':\n                // Adicionar notificação para novo usuário\n                addNotification({\n                  title: \"Novo usuário registrado (tempo real)\",\n                  message: data.message,\n                  type: \"admin\",\n                  link: \"/users\"\n                });\n                break;\n            }\n          } catch (error) {\n            console.error('Erro ao processar mensagem WebSocket:', error);\n          }\n        };\n        \n        return ws;\n      } catch (error) {\n        console.error('Erro ao criar conexão WebSocket:', error);\n        return null;\n      }\n    };\n    \n    // Iniciar conexão WebSocket\n    const ws = connectWebSocket();\n    \n    // Verificar prazos na inicialização\n    checkDeadlines();\n    \n    // Limpar conexão ao desmontar\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, []);\n  \n  // Salvar notificações no localStorage quando o estado mudar\n  useEffect(() => {\n    localStorage.setItem('notifications', JSON.stringify({\n      notifications: state.notifications\n    }));\n  }, [state]);\n  \n  // Função para marcar uma notificação como lida\n  const markAsRead = (id: string) => {\n    setState(prevState => {\n      const updatedNotifications = prevState.notifications.map(notification =>\n        notification.id === id ? { ...notification, read: true } : notification\n      );\n      \n      return {\n        notifications: updatedNotifications,\n        unreadCount: updatedNotifications.filter(n => !n.read).length\n      };\n    });\n  };\n  \n  // Função para marcar todas as notificações como lidas\n  const markAllAsRead = () => {\n    setState(prevState => ({\n      notifications: prevState.notifications.map(notification => ({\n        ...notification,\n        read: true\n      })),\n      unreadCount: 0\n    }));\n  };\n\n  // Função para limpar todas as notificações\n  const clearAllNotifications = () => {\n    setState({\n      notifications: [],\n      unreadCount: 0\n    });\n    // Limpar também do localStorage\n    localStorage.removeItem('notifications');\n  };\n  \n  // Função para adicionar uma nova notificação\n  const addNotification = (notification: Omit<Notification, \"id\" | \"createdAt\" | \"read\">) => {\n    const newNotification: Notification = {\n      ...notification,\n      id: generateId(),\n      createdAt: new Date(),\n      read: false\n    };\n    \n    setState(prevState => ({\n      notifications: [newNotification, ...prevState.notifications],\n      unreadCount: prevState.unreadCount + 1\n    }));\n    \n    // Mostrar toast para notificação\n    toast({\n      title: notification.title,\n      description: notification.message,\n      duration: 5000,\n    });\n  };\n  \n  // Referência para armazenar o último count conhecido\n  const processCountRef = React.useRef<number>(0);\n  const userCountRef = React.useRef<number>(0);\n  \n  // Buscar usuários\n  const { data: users } = useQuery({\n    queryKey: ['/api/users'],\n    refetchOnWindowFocus: false,\n  });\n  \n  // Adicionar observadores para eventos no sistema\n  useEffect(() => {\n    if (!processes || !Array.isArray(processes)) return;\n    \n    const currentCount = processes.length;\n    \n    // Verificar se é a primeira carga\n    if (processCountRef.current === 0) {\n      processCountRef.current = currentCount;\n      return;\n    }\n    \n    // Se temos mais processos do que antes, novos foram adicionados\n    if (currentCount > processCountRef.current) {\n      // Encontrar os novos processos\n      const newProcesses = processes\n        .slice(0, currentCount - processCountRef.current)\n        .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n      \n      // Gerar notificações para novos processos\n      newProcesses.forEach((process: any) => {\n        addNotification({\n          title: \"Novo processo criado\",\n          message: `O processo ${process.pbdocNumber} foi adicionado ao sistema`,\n          type: \"new_process\",\n          link: `/processes/${process.id}`,\n          entityId: process.id\n        });\n      });\n    }\n    \n    // Atualizar a referência\n    processCountRef.current = currentCount;\n  }, [processes]);\n  \n  // Monitorar mudanças em usuários\n  useEffect(() => {\n    if (!users || !Array.isArray(users)) return;\n    \n    const currentCount = users.length;\n    \n    // Verificar se é a primeira carga\n    if (userCountRef.current === 0) {\n      userCountRef.current = currentCount;\n      return;\n    }\n    \n    // Se temos mais usuários do que antes, novos foram adicionados\n    if (currentCount > userCountRef.current) {\n      // Encontrar os novos usuários, presumindo que estão no começo do array\n      const newUsers = users\n        .slice(0, currentCount - userCountRef.current)\n        .sort((a, b) => b.id - a.id); // Presumindo que IDs mais altos são mais recentes\n      \n      // Gerar notificações para novos usuários\n      newUsers.forEach((user: any) => {\n        addNotification({\n          title: \"Novo usuário registrado\",\n          message: `${user.fullName} (${user.username}) se registrou no sistema`,\n          type: \"admin\",\n          link: `/users`,\n        });\n      });\n    }\n    \n    // Atualizar a referência\n    userCountRef.current = currentCount;\n  }, [users]);\n  \n  return (\n    <NotificationContext.Provider\n      value={{\n        notifications: state.notifications,\n        unreadCount: state.unreadCount,\n        markAsRead,\n        markAllAsRead,\n        clearAllNotifications,\n        addNotification\n      }}\n    >\n      {children}\n    </NotificationContext.Provider>\n  );\n}\n\n// Extraindo o hook em uma variável constante para evitar problemas com Fast Refresh\nconst useNotifications = () => {\n  const context = useContext(NotificationContext);\n  \n  if (!context) {\n    throw new Error(\"useNotifications deve ser usado dentro de um NotificationProvider\");\n  }\n  \n  return context;\n}\n\nexport { useNotifications };","size_bytes":12166},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-websocket.tsx":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { useToast } from './use-toast';\nimport { queryClient } from '@/lib/queryClient';\n\nexport function useWebSocket() {\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const { toast } = useToast();\n\n  // Estabelecer conexão WebSocket\n  useEffect(() => {\n    const connect = () => {\n      try {\n        // Determinar o protocolo correto (ws ou wss) baseado no protocolo da página\n        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n        const wsUrl = `${protocol}//${window.location.host}/ws`;\n        \n        console.log('Tentando conectar ao WebSocket:', wsUrl);\n        const ws = new WebSocket(wsUrl);\n        \n        ws.onopen = () => {\n          console.log('Conexão WebSocket estabelecida');\n          setIsConnected(true);\n          setSocket(ws);\n        };\n        \n        ws.onclose = () => {\n          console.log('Conexão WebSocket fechada');\n          setIsConnected(false);\n          setSocket(null);\n          \n          // Tentar reconectar em 5 segundos\n          setTimeout(connect, 5000);\n        };\n        \n        ws.onerror = (error) => {\n          console.error('Erro na conexão WebSocket:', error);\n          ws.close();\n        };\n        \n        ws.onmessage = (event) => {\n          try {\n            const data = JSON.parse(event.data);\n            console.log('Mensagem WebSocket recebida:', data);\n            \n            // Verificar se os dados são válidos antes de processar\n            if (data && typeof data === 'object') {\n              handleWebSocketMessage(data);\n            }\n          } catch (error) {\n            console.error('Erro ao processar mensagem WebSocket:', error);\n          }\n        };\n        \n        return ws;\n      } catch (error) {\n        console.error('Erro ao criar conexão WebSocket:', error);\n        return null;\n      }\n    };\n    \n    const ws = connect();\n    \n    // Limpar conexão ao desmontar o componente\n    return () => {\n      if (ws) {\n        ws.close();\n      }\n    };\n  }, []);\n  \n  // Função para processar as mensagens recebidas\n  const handleWebSocketMessage = useCallback((data: any) => {\n    switch (data.type) {\n      case 'connection':\n        console.log('Conexão WebSocket confirmada:', data.message);\n        break;\n        \n      case 'new_process':\n        // Invalidar cache de processos para refletir o novo processo\n        queryClient.invalidateQueries({ queryKey: ['/api/processes'] });\n        \n        // Mostrar notificação\n        toast({\n          title: 'Novo Processo',\n          description: data.message,\n          duration: 5000,\n        });\n        \n        // Atualizar estatísticas do dashboard\n        queryClient.invalidateQueries({ queryKey: ['/api/analytics/process-statistics'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/analytics/processes-by-month'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/analytics/processes-by-source'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/analytics/processes-by-responsible'] });\n        break;\n        \n      case 'process_updated':\n        // Similar ao caso anterior, mas para atualizações\n        queryClient.invalidateQueries({ queryKey: ['/api/processes'] });\n        if (data.processId) {\n          queryClient.invalidateQueries({ queryKey: [`/api/processes/${data.processId}`] });\n        }\n        queryClient.invalidateQueries({ queryKey: ['/api/analytics/process-statistics'] });\n        \n        if (data.message) {\n          toast({\n            title: 'Processo Atualizado',\n            description: data.message,\n            duration: 5000,\n          });\n        }\n        break;\n        \n      case 'user_created':\n        // Invalidar cache de usuários\n        queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n        \n        toast({\n          title: 'Novo Usuário',\n          description: data.message,\n          duration: 5000,\n        });\n        break;\n        \n      default:\n        console.log('Mensagem não tratada:', data);\n    }\n  }, [toast]);\n  \n  // Função para enviar mensagens\n  const sendMessage = useCallback((message: any) => {\n    if (socket && isConnected) {\n      socket.send(JSON.stringify(message));\n    } else {\n      console.warn('Não foi possível enviar mensagem: WebSocket não conectado');\n    }\n  }, [socket, isConnected]);\n  \n  return { isConnected, sendMessage };\n}","size_bytes":4526},"client/src/lib/admin-protected-route.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { ReactNode, useEffect } from \"react\";\nimport { Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdminProtectedRouteProps {\n  children: ReactNode;\n}\n\nexport function AdminProtectedRoute({ children }: AdminProtectedRouteProps) {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  \n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['/api/auth/status'],\n    queryFn: async () => {\n      const response = await fetch('/api/auth/status');\n      if (!response.ok) {\n        throw new Error('Não autenticado');\n      }\n      return response.json();\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !error) {\n      if (!user) {\n        setLocation('/login');\n        toast({\n          title: \"Acesso negado\",\n          description: \"Você precisa estar autenticado para acessar esta página\",\n          variant: \"destructive\",\n        });\n      } else if (user.role !== 'admin') {\n        setLocation('/');\n        toast({\n          title: \"Acesso restrito\",\n          description: \"Esta área é restrita apenas para administradores\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  }, [user, isLoading, error, setLocation, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    setLocation('/login');\n    return null;\n  }\n\n  if (!user || user.role !== 'admin') {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n\nexport default AdminProtectedRoute;","size_bytes":1708},"client/src/lib/auth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"./queryClient\";\nimport { User } from \"@shared/schema\";\n\n// Custom hook to get the current authenticated user\nexport function useCurrentUser() {\n  return useQuery<User>({\n    queryKey: ['/api/auth/status'],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n}\n\n// Login function\nexport async function login(username: string, password: string): Promise<User> {\n  const response = await apiRequest(\"POST\", \"/api/auth/login\", { username, password });\n  return response.json();\n}\n\n// Logout function\nexport async function logout(): Promise<void> {\n  await apiRequest(\"POST\", \"/api/auth/logout\", {});\n}\n\n// Check if user is admin\nexport function isAdmin(user: User | undefined | null): boolean {\n  return user?.role === \"admin\";\n}\n","size_bytes":809},"client/src/lib/constants.ts":{"content":"// Process statuses\nexport const PROCESS_STATUS = {\n  DRAFT: \"draft\",\n  IN_PROGRESS: \"in_progress\",\n  COMPLETED: \"completed\",\n  CANCELED: \"canceled\"\n} as const;\n\n// Process priorities\nexport const PROCESS_PRIORITY = {\n  LOW: \"low\",\n  MEDIUM: \"medium\",\n  HIGH: \"high\"\n} as const;\n\n// User roles\nexport const USER_ROLE = {\n  COMMON: \"common\",\n  ADMIN: \"admin\"\n} as const;\n\n// File types for exports\nexport const FILE_TYPE = {\n  PDF: \"pdf\",\n  EXCEL: \"xlsx\"\n} as const;\n\n// Months names for reports and filters\nexport const MONTHS = [\n  \"Janeiro\",\n  \"Fevereiro\",\n  \"Março\",\n  \"Abril\",\n  \"Maio\",\n  \"Junho\",\n  \"Julho\",\n  \"Agosto\",\n  \"Setembro\",\n  \"Outubro\",\n  \"Novembro\",\n  \"Dezembro\"\n];\n\n// Chart colors for reports\nexport const CHART_COLORS = {\n  PRIMARY: \"#0066cc\",\n  SUCCESS: \"#4CAF50\",\n  WARNING: \"#FFC107\",\n  DANGER: \"#D32F2F\",\n  INFO: \"#2196F3\",\n  PURPLE: \"#9C27B0\",\n  PINK: \"#E91E63\",\n  ORANGE: \"#FF9800\",\n  GRAY: \"#9E9E9E\"\n};\n\n// Table pagination options\nexport const PAGINATION_OPTIONS = [10, 20, 30, 50, 100];\n\n// Default route after login\nexport const DEFAULT_ROUTE = \"/\";\n\n// Date format options\nexport const DATE_FORMAT = {\n  FULL: \"dd 'de' MMMM 'de' yyyy\",\n  SHORT: \"dd/MM/yyyy\",\n  WITH_TIME: \"dd/MM/yyyy HH:mm\",\n  ISO: \"yyyy-MM-dd\"\n};\n","size_bytes":1246},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    // Tenta obter o corpo da resposta como JSON, se falhar, usa o texto\n    try {\n      const errorData = await res.json();\n      throw new Error(errorData.message || `${res.status}: ${res.statusText}`);\n    } catch (e) {\n      // Se não conseguir parsear como JSON, tenta obter como texto\n      const text = (await res.text().catch(() => res.statusText)) || res.statusText;\n      throw new Error(`${res.status}: ${text}`);\n    }\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Adiciona um timestamp para evitar cache\n  const cacheBusterUrl = url.includes('?') \n    ? `${url}&_t=${Date.now()}` \n    : `${url}?_t=${Date.now()}`;\n  \n  console.log(`Requisição ${method} para ${cacheBusterUrl}`, data);\n  \n  const res = await fetch(cacheBusterUrl, {\n    method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n      \"Pragma\": \"no-cache\"\n    },\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n    cache: \"no-store\",\n  });\n\n  console.log(`Resposta ${method} ${url}: status=${res.status}`);\n  \n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Adiciona um cache buster para evitar caches indesejados\n    const url = (queryKey[0] as string).includes('?') \n      ? `${queryKey[0]}&_t=${Date.now()}` \n      : `${queryKey[0]}?_t=${Date.now()}`;\n      \n    console.log(`Realizando consulta para ${url}`);\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n    \n    console.log(`Resposta de consulta ${url}: status=${res.status}`);\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      console.log(`Retornando null para erro 401 em ${url}`);\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    const data = await res.json();\n    return data;\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2538},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\n/**\n * Combines classnames using clsx and tailwind-merge\n */\nexport function cn(...inputs: ClassValue[]): string {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Format a date to a string using the provided options\n */\nexport function formatDate(date: Date | string, options: Intl.DateTimeFormatOptions = {}): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return dateObj.toLocaleDateString('pt-BR', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    ...options\n  });\n}\n\n/**\n * Format a date to include time\n */\nexport function formatDateTime(date: Date | string): string {\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\n  return dateObj.toLocaleDateString('pt-BR', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n}\n\n/**\n * Format a number as currency (BRL)\n */\nexport function formatCurrency(value: number): string {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'currency',\n    currency: 'BRL'\n  }).format(value);\n}\n\n/**\n * Format a number with the specified number of decimal places\n */\nexport function formatNumber(value: number, decimals: number = 2): string {\n  return new Intl.NumberFormat('pt-BR', {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals\n  }).format(value);\n}\n\n/**\n * Format a percentage value (e.g., 0.35 becomes 35%)\n */\nexport function formatPercentage(value: number): string {\n  return new Intl.NumberFormat('pt-BR', {\n    style: 'percent',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 1\n  }).format(value / 100);\n}\n\n/**\n * Truncate text with ellipsis if it exceeds the maximum length\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.slice(0, maxLength) + '...';\n}\n\n/**\n * Get the initials from a name (e.g., \"John Doe\" becomes \"JD\")\n */\nexport function getInitials(name: string): string {\n  if (!name) return '';\n  return name\n    .split(' ')\n    .map(part => part[0])\n    .filter(Boolean)\n    .slice(0, 2)\n    .join('')\n    .toUpperCase();\n}\n\n/**\n * Check if a value is empty (null, undefined, empty string, empty array, or empty object)\n */\nexport function isEmpty(value: any): boolean {\n  if (value === null || value === undefined) return true;\n  if (typeof value === 'string') return value.trim() === '';\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === 'object') return Object.keys(value).length === 0;\n  return false;\n}\n\n/**\n * Generate a random string ID\n */\nexport function generateId(length: number = 8): string {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n\n/**\n * Convert a string to title case\n */\nexport function toTitleCase(str: string): string {\n  return str\n    .toLowerCase()\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n\n/**\n * Apply debounce to a function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: ReturnType<typeof setTimeout> | null = null;\n  \n  return function(...args: Parameters<T>): void {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n    \n    if (timeout !== null) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Sort an array of objects by a specific property\n */\nexport function sortByProperty<T>(array: T[], property: keyof T, direction: 'asc' | 'desc' = 'asc'): T[] {\n  return [...array].sort((a, b) => {\n    if (a[property] < b[property]) return direction === 'asc' ? -1 : 1;\n    if (a[property] > b[property]) return direction === 'asc' ? 1 : -1;\n    return 0;\n  });\n}\n\n/**\n * Download a file from a blob\n */\nexport function downloadBlob(blob: Blob, filename: string): void {\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n}\n","size_bytes":4356},"client/src/pages/BiddingFlow.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport BiddingFlowchart from \"@/components/bidding/BiddingFlowchart\";\n\nconst BiddingFlow = () => {\n  const [selectedModalityId, setSelectedModalityId] = useState<number>(0);\n  \n  return (\n    <div>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-gray-800\">Fluxo de Licitação</h1>\n        <p className=\"text-gray-600\">Visualize o fluxograma das modalidades de licitação</p>\n      </div>\n      \n      <Card className=\"mb-6\">\n        <CardContent className=\"p-6\">\n          <p>\n            O fluxograma abaixo apresenta as etapas de cada modalidade de licitação conforme a \n            legislação vigente. Selecione uma modalidade para visualizar seu fluxo específico.\n          </p>\n        </CardContent>\n      </Card>\n      \n      <BiddingFlowchart \n        selectedModalityId={selectedModalityId} \n        onModalitySelect={setSelectedModalityId} \n      />\n      \n      {selectedModalityId > 0 && (\n        <Card className=\"mt-6\">\n          <CardContent className=\"p-6\">\n            <h2 className=\"text-lg font-medium mb-4\">Informações Adicionais</h2>\n            \n            {selectedModalityId === 1 && (\n              <div className=\"space-y-4\">\n                <p>\n                  <strong>Pregão Eletrônico</strong> - Modalidade de licitação para aquisição \n                  de bens e serviços comuns, qualquer que seja o valor estimado da contratação, \n                  em que a disputa pelo fornecimento é feita por meio de propostas e lances em \n                  sessão pública eletrônica.\n                </p>\n                <p>\n                  Regulamentado pela Lei nº 10.520/2002 e Decreto nº 10.024/2019.\n                </p>\n              </div>\n            )}\n            \n            {selectedModalityId === 2 && (\n              <div className=\"space-y-4\">\n                <p>\n                  <strong>Concorrência</strong> - Modalidade de licitação entre quaisquer \n                  interessados que, na fase inicial de habilitação preliminar, comprovem \n                  possuir os requisitos mínimos de qualificação exigidos no edital para \n                  execução de seu objeto.\n                </p>\n                <p>\n                  Regulamentada pela Lei nº 8.666/1993.\n                </p>\n              </div>\n            )}\n            \n            {selectedModalityId === 3 && (\n              <div className=\"space-y-4\">\n                <p>\n                  <strong>Dispensa</strong> - Contratação direta, sem licitação, nos casos \n                  específicos previstos em lei, como em situações de emergência, quando o \n                  valor for abaixo do limite legal, ou quando a licitação for considerada \n                  inviável.\n                </p>\n                <p>\n                  Prevista no Art. 24 da Lei nº 8.666/1993.\n                </p>\n              </div>\n            )}\n            \n            {selectedModalityId === 4 && (\n              <div className=\"space-y-4\">\n                <p>\n                  <strong>Inexigibilidade</strong> - Contratação direta, sem licitação, \n                  quando houver inviabilidade de competição, como na contratação de \n                  serviços técnicos de natureza singular, com profissionais ou empresas \n                  de notória especialização.\n                </p>\n                <p>\n                  Prevista no Art. 25 da Lei nº 8.666/1993.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default BiddingFlow;\n","size_bytes":3715},"client/src/pages/BiddingFlowchart.tsx":{"content":"import React, { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  FileText,\n  Search,\n  DollarSign,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Users,\n  Archive,\n  AlertTriangle,\n  ChevronRight,\n  Info,\n  ZoomIn,\n  ZoomOut,\n  Image as ImageIcon,\n} from \"lucide-react\";\n\ninterface FlowStep {\n  id: string;\n  title: string;\n  description: string;\n  sector: string;\n  timeLimit?: string;\n  type: \"process\" | \"decision\" | \"document\" | \"archive\";\n  status: \"pending\" | \"approved\" | \"rejected\" | \"completed\";\n  nextSteps?: string[];\n  icon: React.ReactNode;\n}\n\nconst BiddingFlowchart = () => {\n  const [selectedStep, setSelectedStep] = useState<string | null>(null);\n  const [currentPhase, setCurrentPhase] = useState<\n    \"initiation\" | \"preparation\" | \"execution\" | \"completion\"\n  >(\"initiation\");\n  const [isFlowchartExpanded, setIsFlowchartExpanded] = useState(false);\n  const [activeTab, setActiveTab] = useState<\"steps\" | \"flowchart\">(\"steps\");\n  const flowchartRef = useRef<HTMLDivElement>(null);\n\n  const flowSteps: FlowStep[] = [\n    // Fase 1: Iniciação\n    {\n      id: \"dfd\",\n      title: \"Documento de Formalização da Demanda - DFD\",\n      description:\n        \"Setor demandante elabora o documento formalizando a necessidade de contratação\",\n      sector: \"Setor Demandante\",\n      type: \"document\",\n      status: \"completed\",\n      nextSteps: [\"etp\"],\n      icon: <FileText className=\"w-4 h-4\" />,\n    },\n    {\n      id: \"etp\",\n      title: \"Estudo Técnico Preliminar - ETP\",\n      description: \"Análise técnica da demanda e viabilidade da contratação\",\n      sector: \"Setor Demandante\",\n      type: \"process\",\n      status: \"completed\",\n      nextSteps: [\"mr\"],\n      icon: <Search className=\"w-4 h-4\" />,\n    },\n    {\n      id: \"mr\",\n      title: \"Mapa de Risco - MR\",\n      description: \"Identificação e análise dos riscos específicos do processo\",\n      sector: \"Setor Demandante\",\n      type: \"document\",\n      status: \"completed\",\n      nextSteps: [\"tr\"],\n      icon: <AlertTriangle className=\"w-4 h-4\" />,\n    },\n    {\n      id: \"tr\",\n      title: \"Termo de Referência - TR\",\n      description: \"Documento técnico detalhando o objeto da contratação\",\n      sector: \"Setor Demandante\",\n      type: \"document\",\n      status: \"pending\",\n      nextSteps: [\"decision1\"],\n      icon: <FileText className=\"w-4 h-4\" />,\n    },\n    {\n      id: \"decision1\",\n      title: \"Autorização pelo Ordenador de Despesa\",\n      description: \"Decisão sobre autorização ou arquivamento do processo\",\n      sector: \"Ordenador de Despesa\",\n      timeLimit: \"10 dias\",\n      type: \"decision\",\n      status: \"pending\",\n      nextSteps: [\"create_process\", \"archive\"],\n      icon: <CheckCircle className=\"w-4 h-4\" />,\n    },\n\n    // Fase 2: Preparação\n    {\n      id: \"create_process\",\n      title: \"Criar Processo no Órgão\",\n      description: \"Formalização do processo administrativo\",\n      sector: \"Divisão de Licitação\",\n      timeLimit: \"2 dias\",\n      type: \"process\",\n      status: \"pending\",\n      nextSteps: [\"price_research\"],\n      icon: <FileText className=\"w-4 h-4\" />,\n    },\n    {\n      id: \"price_research\",\n      title: \"Pesquisa de Preços\",\n      description: \"Levantamento de preços no mercado\",\n      sector: \"Núcleo de Pesquisa de Preços – NPP\",\n      timeLimit: \"10 dias\",\n      type: \"process\",\n      status: \"pending\",\n      nextSteps: [\"budget_analysis\"],\n      icon: <Search className=\"w-4 h-4\" />,\n    },\n    {\n      id: \"budget_analysis\",\n      title: \"Análise Orçamentária\",\n      description: \"Verificação da disponibilidade orçamentária\",\n      sector: \"Divisão de Licitação\",\n      timeLimit: \"1 dia\",\n      type: \"process\",\n      status: \"pending\",\n      nextSteps: [\"ro_emission\"],\n      icon: <DollarSign className=\"w-4 h-4\" />,\n    },\n    {\n      id: \"ro_emission\",\n      title: \"Emissão de Reserva Orçamentária - RO\",\n      description: \"Reserva do valor no orçamento para a contratação\",\n      sector: \"Unidade de Orçamento e Finanças\",\n      timeLimit: \"1 dia\",\n      type: \"document\",\n      status: \"pending\",\n      nextSteps: [\"seap_authorization\"],\n      icon: <DollarSign className=\"w-4 h-4\" />,\n    },\n\n    // Fase 3: Execução\n    {\n      id: \"seap_authorization\",\n      title: \"Autorização SEAP\",\n      description: \"Autorização final pelo Secretário de Estado\",\n      sector: \"Secretário de Estado da Administração Penitenciária - SEAP\",\n      type: \"decision\",\n      status: \"pending\",\n      nextSteps: [\"edital_elaboration\", \"return_correction\"],\n      icon: <CheckCircle className=\"w-4 h-4\" />,\n    },\n    {\n      id: \"edital_elaboration\",\n      title: \"Elaboração do Edital\",\n      description: \"Preparação do edital e seus anexos\",\n      sector: \"Divisão de Licitação\",\n      timeLimit: \"10 dias\",\n      type: \"document\",\n      status: \"pending\",\n      nextSteps: [\"committee_consultation\"],\n      icon: <FileText className=\"w-4 h-4\" />,\n    },\n    {\n      id: \"committee_consultation\",\n      title: \"Consulta ao Comitê Gestor\",\n      description: \"Consulta ao Comitê Gestor de Gasto Público\",\n      sector: \"Divisão de Licitação\",\n      timeLimit: \"2 dias\",\n      type: \"process\",\n      status: \"pending\",\n      nextSteps: [\"technical_note\"],\n      icon: <Users className=\"w-4 h-4\" />,\n    },\n\n    // Opções de desvio\n    {\n      id: \"return_correction\",\n      title: \"Devolver para Correção\",\n      description: \"Retorno ao setor demandante para correções\",\n      sector: \"Secretário de Estado da Administração Penitenciária - SEAP\",\n      type: \"process\",\n      status: \"pending\",\n      nextSteps: [\"dfd\"],\n      icon: <XCircle className=\"w-4 h-4\" />,\n    },\n    {\n      id: \"archive\",\n      title: \"Arquivar Processo\",\n      description: \"Arquivamento por não autorização ou cancelamento\",\n      sector: \"Diversos\",\n      type: \"archive\",\n      status: \"pending\",\n      nextSteps: [],\n      icon: <Archive className=\"w-4 h-4\" />,\n    },\n    {\n      id: \"technical_note\",\n      title: \"Elaboração de Nota Técnica\",\n      description: \"Elaboração de nota técnica pelo setor competente\",\n      sector: \"Setor Competente\",\n      type: \"document\",\n      status: \"pending\",\n      nextSteps: [],\n      icon: <FileText className=\"w-4 h-4\" />,\n    },\n  ];\n\n  const phases = [\n    { id: \"initiation\", name: \"Iniciação\", color: \"bg-blue-100 text-blue-800\" },\n    {\n      id: \"preparation\",\n      name: \"Preparação\",\n      color: \"bg-yellow-100 text-yellow-800\",\n    },\n    { id: \"execution\", name: \"Execução\", color: \"bg-green-100 text-green-800\" },\n    {\n      id: \"completion\",\n      name: \"Finalização\",\n      color: \"bg-purple-100 text-purple-800\",\n    },\n  ];\n\n  const getStepsByPhase = (phase: string) => {\n    const phaseSteps = {\n      initiation: [\"dfd\", \"etp\", \"mr\", \"tr\", \"decision1\"],\n      preparation: [\n        \"create_process\",\n        \"price_research\",\n        \"budget_analysis\",\n        \"ro_emission\",\n      ],\n      execution: [\n        \"seap_authorization\",\n        \"edital_elaboration\",\n        \"committee_consultation\",\n        \"technical_note\",\n      ],\n      completion: [\"return_correction\", \"archive\"],\n    };\n    return flowSteps.filter((step) =>\n      phaseSteps[phase as keyof typeof phaseSteps]?.includes(step.id),\n    );\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-100 text-green-800 border-green-200\";\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"rejected\":\n        return \"bg-red-100 text-red-800 border-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case \"document\":\n        return \"bg-blue-50 border-blue-200\";\n      case \"decision\":\n        return \"bg-orange-50 border-orange-200\";\n      case \"process\":\n        return \"bg-green-50 border-green-200\";\n      case \"archive\":\n        return \"bg-red-50 border-red-200\";\n      default:\n        return \"bg-gray-50 border-gray-200\";\n    }\n  };\n\n  const toggleFlowchartView = () => {\n    setIsFlowchartExpanded(!isFlowchartExpanded);\n  };\n\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isFlowchartExpanded) {\n        setIsFlowchartExpanded(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => document.removeEventListener('keydown', handleEscape);\n  }, [isFlowchartExpanded]);\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 py-4\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl md:text-3xl font-bold text-gray-800 mb-2\">\n          Fluxograma - Pregão Eletrônico\n        </h1>\n        <p className=\"text-gray-600\">\n          SEAP/PB - Procedimentos conforme Lei nº 14.133/2021\n        </p>\n      </div>\n\n      {/* Navegação por Abas */}\n      <div className=\"mb-6\">\n        <div className=\"flex gap-2 mb-4\">\n          <Button\n            variant={activeTab === \"steps\" ? \"default\" : \"outline\"}\n            onClick={() => setActiveTab(\"steps\")}\n            className=\"flex items-center gap-2\"\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n            Etapas\n          </Button>\n          <Button\n            variant={activeTab === \"flowchart\" ? \"default\" : \"outline\"}\n            onClick={() => setActiveTab(\"flowchart\")}\n            className=\"flex items-center gap-2\"\n          >\n            <ImageIcon className=\"h-4 w-4\" />\n            Fluxograma Visual\n          </Button>\n        </div>\n      </div>\n\n      {activeTab === \"steps\" && (\n        <>\n          {/* Navegação por Fases */}\n      <div className=\"mb-6\">\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {phases.map((phase) => (\n            <Button\n              key={phase.id}\n              variant={currentPhase === phase.id ? \"default\" : \"outline\"}\n              onClick={() => setCurrentPhase(phase.id as any)}\n              className=\"flex items-center gap-2\"\n            >\n              {phase.name}\n              <Badge className={phase.color}>\n                {getStepsByPhase(phase.id).length}\n              </Badge>\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Legenda */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Info className=\"w-5 h-5\" />\n            Legenda\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-blue-50 border-2 border-blue-200 rounded\"></div>\n              <span className=\"text-sm\">Documento</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-orange-50 border-2 border-orange-200 rounded\"></div>\n              <span className=\"text-sm\">Decisão</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-green-50 border-2 border-green-200 rounded\"></div>\n              <span className=\"text-sm\">Processo</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 bg-red-50 border-2 border-red-200 rounded\"></div>\n              <span className=\"text-sm\">Arquivamento</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Fluxograma */}\n      <div className=\"grid gap-4\">\n        {getStepsByPhase(currentPhase).map((step) => (\n          <Card\n            key={step.id}\n            className={`cursor-pointer transition-all hover:shadow-md ${getTypeColor(step.type)} ${\n              selectedStep === step.id ? \"ring-2 ring-blue-500\" : \"\"\n            }`}\n            onClick={() =>\n              setSelectedStep(selectedStep === step.id ? null : step.id)\n            }\n          >\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start gap-3 flex-1\">\n                  <div className=\"mt-1\">{step.icon}</div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <h3 className=\"font-semibold text-gray-800\">\n                        {step.title}\n                      </h3>\n                      <Badge className={getStatusColor(step.status)}>\n                        {step.status === \"completed\"\n                          ? \"Concluído\"\n                          : step.status === \"pending\"\n                            ? \"Pendente\"\n                            : step.status === \"rejected\"\n                              ? \"Rejeitado\"\n                              : \"Em Análise\"}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-2\">\n                      {step.description}\n                    </p>\n                    <div className=\"flex items-center gap-4 text-xs text-gray-500\">\n                      <span className=\"flex items-center gap-1\">\n                        <Users className=\"w-3 h-3\" />\n                        {step.sector}\n                      </span>\n                      {step.timeLimit && (\n                        <span className=\"flex items-center gap-1\">\n                          <Clock className=\"w-3 h-3\" />\n                          Prazo: {step.timeLimit}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                <ChevronRight\n                  className={`w-5 h-5 text-gray-400 transition-transform ${\n                    selectedStep === step.id ? \"rotate-90\" : \"\"\n                  }`}\n                />\n              </div>\n\n              {selectedStep === step.id &&\n                step.nextSteps &&\n                step.nextSteps.length > 0 && (\n                  <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                    <p className=\"text-sm font-medium text-gray-700 mb-2\">\n                      Próximas etapas:\n                    </p>\n                    <div className=\"space-y-1\">\n                      {step.nextSteps.map((nextStepId) => {\n                        const nextStep = flowSteps.find(\n                          (s) => s.id === nextStepId,\n                        );\n                        return nextStep ? (\n                          <div\n                            key={nextStepId}\n                            className=\"text-sm text-gray-600 flex items-center gap-2\"\n                          >\n                            <ChevronRight className=\"w-3 h-3\" />\n                            {nextStep.title}\n                          </div>\n                        ) : null;\n                      })}\n                    </div>\n                  </div>\n                )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Setores Envolvidos */}\n      <Card className=\"mt-6\">\n        <CardHeader>\n          <CardTitle>Setores Envolvidos no Processo</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[\n              \"Setor Demandante\",\n              \"Ordenador de Despesa\",\n              \"Divisão de Licitação\",\n              \"Núcleo de Pesquisa de Preços - NPP\",\n              \"Unidade de Orçamento e Finanças\",\n              \"Secretário SEAP\",\n              \"Comitê Gestor de Gasto Público\",\n            ].map((sector) => (\n              <div key={sector} className=\"p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center gap-2\">\n                  <Users className=\"w-4 h-4 text-gray-600\" />\n                  <span className=\"text-sm font-medium\">{sector}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n        </>\n      )}\n\n      {activeTab === \"flowchart\" && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <ImageIcon className=\"h-5 w-5\" />\n                Fluxograma Visual do Processo\n              </div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={toggleFlowchartView}\n                className=\"flex items-center gap-2\"\n              >\n                {isFlowchartExpanded ? <ZoomOut className=\"h-4 w-4\" /> : <ZoomIn className=\"h-4 w-4\" />}\n                {isFlowchartExpanded ? \"Minimizar\" : \"Expandir\"}\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div \n              ref={flowchartRef}\n              className={`flowchart-container ${isFlowchartExpanded ? 'expanded' : 'focused'}`}\n              onClick={toggleFlowchartView}\n            >\n              <img \n                src=\"/fluxograma_seap_min.png\"\n                alt=\"Fluxograma do Processo de Licitação SEAP\"\n                className=\"flowchart-image\"\n                draggable={false}\n                style={{ \n                  imageRendering: 'crisp-edges',\n                  WebkitImageRendering: 'high-quality',\n                  msInterpolationMode: 'bicubic'\n                }}\n              />\n              <div className=\"flowchart-overlay\">\n                <div className=\"zoom-hint\">\n                  {isFlowchartExpanded ? \"Clique para focar\" : \"Clique para expandir\"}\n                </div>\n              </div>\n            </div>\n            \n            <style jsx>{`\n              .flowchart-container {\n                position: relative;\n                cursor: pointer;\n                overflow: hidden;\n                border-radius: 12px;\n                border: 2px solid #e5e7eb;\n                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n                background: #f9fafb;\n              }\n              \n              .flowchart-container.focused {\n                height: 400px;\n                transform: scale(1);\n              }\n              \n              .flowchart-container.expanded {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100vw;\n                height: 100vh;\n                z-index: 1000;\n                background: rgba(0, 0, 0, 0.95);\n                border: none;\n                border-radius: 0;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n              }\n              \n              .flowchart-image {\n                width: 100%;\n                height: 100%;\n                object-fit: contain;\n                transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n                user-select: none;\n                image-rendering: -webkit-optimize-contrast;\n                image-rendering: crisp-edges;\n                image-rendering: pixelated;\n              }\n              \n              .flowchart-container.focused .flowchart-image {\n                object-fit: contain;\n                object-position: center;\n                transform: scale(1);\n              }\n              \n              .flowchart-container.expanded .flowchart-image {\n                max-width: 95vw;\n                max-height: 95vh;\n                object-fit: contain;\n                transform: scale(1);\n              }\n              \n              .flowchart-overlay {\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n                bottom: 0;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                background: rgba(0, 0, 0, 0);\n                transition: all 0.3s ease;\n                opacity: 0;\n              }\n              \n              .flowchart-container:hover .flowchart-overlay {\n                background: rgba(0, 0, 0, 0.3);\n                opacity: 1;\n              }\n              \n              .zoom-hint {\n                background: rgba(255, 255, 255, 0.95);\n                color: #1f2937;\n                padding: 12px 24px;\n                border-radius: 8px;\n                font-weight: 500;\n                box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);\n                transform: translateY(10px);\n                transition: transform 0.3s ease;\n              }\n              \n              .flowchart-container:hover .zoom-hint {\n                transform: translateY(0);\n              }\n              \n              .flowchart-container.expanded .flowchart-overlay {\n                background: transparent;\n              }\n              \n              .flowchart-container.expanded:hover .flowchart-overlay {\n                background: rgba(0, 0, 0, 0.2);\n              }\n              \n              @media (max-width: 768px) {\n                .flowchart-container.focused {\n                  height: 250px;\n                }\n                \n                .flowchart-container.focused .flowchart-image {\n                  transform: scale(1.5);\n                }\n                \n                .zoom-hint {\n                  padding: 8px 16px;\n                  font-size: 14px;\n                }\n              }\n            `}</style>\n            \n            <div className=\"mt-6 text-center text-sm text-gray-600\">\n              <p className=\"mb-2\">\n                <strong>Dica:</strong> Clique na imagem para alternar entre visualização focada e completa\n              </p>\n              <p className=\"text-xs\">\n                Pressione <kbd className=\"px-2 py-1 bg-gray-200 rounded text-xs\">ESC</kbd> para sair do modo expandido\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default BiddingFlowchart;\n","size_bytes":22252},"client/src/pages/Convenios.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Eye, Edit, Trash2 } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Convenio {\n  id: number;\n  numero: string;\n  nome: string;\n  orgaoConvenente: string;\n  valor: string;\n  dataInicio: string;\n  dataFim: string;\n  status: string;\n  observacoes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst Convenios = () => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingConvenio, setEditingConvenio] = useState<Convenio | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  // Carregar convênios salvos do localStorage\n  const [convenios, setConvenios] = useState<Convenio[]>(() => {\n    try {\n      const saved = localStorage.getItem(\"convenios-seap\");\n      if (saved) {\n        return JSON.parse(saved);\n      }\n    } catch (error) {\n      console.error(\"Erro ao carregar convênios:\", error);\n    }\n    // Iniciar com lista vazia se não houver dados salvos\n    return [];\n  });\n\n  // Salvar convênios no localStorage sempre que a lista mudar\n  useEffect(() => {\n    localStorage.setItem(\"convenios-seap\", JSON.stringify(convenios));\n  }, [convenios]);\n\n  // Função para limpar todos os convênios\n  const handleClearAll = () => {\n    setConvenios([]);\n    localStorage.removeItem(\"convenios-seap\");\n    toast({\n      title: \"Dados limpos\",\n      description: \"Todos os convênios foram removidos.\",\n    });\n  };\n\n  const [newConvenio, setNewConvenio] = useState({\n    numero: \"\",\n    nome: \"\",\n    orgaoConvenente: \"\",\n    valor: \"\",\n    dataInicio: \"\",\n    dataFim: \"\",\n    status: \"ativo\",\n    observacoes: \"\",\n  });\n\n  const filteredConvenios = convenios.filter(\n    (convenio) =>\n      convenio.nome.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      convenio.numero.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      convenio.orgaoConvenente.toLowerCase().includes(searchTerm.toLowerCase()),\n  );\n\n  const handleAddConvenio = () => {\n    // Validate required fields\n    if (\n      !newConvenio.numero ||\n      !newConvenio.nome ||\n      !newConvenio.orgaoConvenente ||\n      !newConvenio.valor ||\n      !newConvenio.dataInicio ||\n      !newConvenio.dataFim\n    ) {\n      toast({\n        title: \"Erro\",\n        description: \"Todos os campos obrigatórios devem ser preenchidos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Create new convenio with generated ID\n    const novoConvenio: Convenio = {\n      id: Math.max(...convenios.map((c) => c.id)) + 1,\n      numero: newConvenio.numero,\n      nome: newConvenio.nome,\n      orgaoConvenente: newConvenio.orgaoConvenente,\n      valor: newConvenio.valor.startsWith(\"R$\")\n        ? newConvenio.valor\n        : `R$ ${newConvenio.valor}`,\n      dataInicio: newConvenio.dataInicio,\n      dataFim: newConvenio.dataFim,\n      status: newConvenio.status,\n      observacoes: newConvenio.observacoes,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    // Add to the list\n    setConvenios([...convenios, novoConvenio]);\n\n    toast({\n      title: \"Convênio adicionado\",\n      description: `Convênio ${newConvenio.numero} foi criado com sucesso.`,\n    });\n\n    // Reset form and close dialog\n    setNewConvenio({\n      numero: \"\",\n      nome: \"\",\n      orgaoConvenente: \"\",\n      valor: \"\",\n      dataInicio: \"\",\n      dataFim: \"\",\n      status: \"ativo\",\n      observacoes: \"\",\n    });\n    setIsAddDialogOpen(false);\n  };\n\n  // Função para editar convênio\n  const handleEditConvenio = (convenio: Convenio) => {\n    setEditingConvenio(convenio);\n    setNewConvenio({\n      numero: convenio.numero,\n      nome: convenio.nome,\n      orgaoConvenente: convenio.orgaoConvenente,\n      valor: convenio.valor.replace(\"R$ \", \"\"),\n      dataInicio: convenio.dataInicio,\n      dataFim: convenio.dataFim,\n      status: convenio.status,\n      observacoes: convenio.observacoes || \"\",\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  // Função para salvar edição\n  const handleSaveEdit = () => {\n    if (!editingConvenio) return;\n\n    // Validate required fields\n    if (!newConvenio.numero || !newConvenio.nome || !newConvenio.orgaoConvenente || \n        !newConvenio.valor || !newConvenio.dataInicio || !newConvenio.dataFim) {\n      toast({\n        title: \"Erro\",\n        description: \"Todos os campos obrigatórios devem ser preenchidos.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const updatedConvenios = convenios.map(conv =>\n      conv.id === editingConvenio.id\n        ? {\n            ...conv,\n            numero: newConvenio.numero,\n            nome: newConvenio.nome,\n            orgaoConvenente: newConvenio.orgaoConvenente,\n            valor: newConvenio.valor.startsWith(\"R$\") ? newConvenio.valor : `R$ ${newConvenio.valor}`,\n            dataInicio: newConvenio.dataInicio,\n            dataFim: newConvenio.dataFim,\n            status: newConvenio.status,\n            observacoes: newConvenio.observacoes,\n            updatedAt: new Date().toISOString(),\n          }\n        : conv\n    );\n\n    setConvenios(updatedConvenios);\n    setIsEditDialogOpen(false);\n    setEditingConvenio(null);\n    setNewConvenio({\n      numero: \"\",\n      nome: \"\",\n      orgaoConvenente: \"\",\n      valor: \"\",\n      dataInicio: \"\",\n      dataFim: \"\",\n      status: \"ativo\",\n      observacoes: \"\",\n    });\n\n    toast({\n      title: \"Convênio atualizado\",\n      description: `Convênio ${newConvenio.numero} foi atualizado com sucesso.`,\n    });\n  };\n\n  // Função para excluir convênio\n  const handleDeleteConvenio = (id: number) => {\n    if (confirm(\"Tem certeza que deseja excluir este convênio?\")) {\n      const updatedConvenios = convenios.filter(conv => conv.id !== id);\n      setConvenios(updatedConvenios);\n      \n      toast({\n        title: \"Convênio excluído\",\n        description: \"O convênio foi removido com sucesso.\",\n      });\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"ativo\":\n        return \"default\";\n      case \"encerrado\":\n        return \"secondary\";\n      case \"suspenso\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const formatCurrency = (value: string) => {\n    return value.startsWith(\"R$\") ? value : `R$ ${value}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"pt-BR\");\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Convênios</h1>\n          <p className=\"text-gray-600 mt-1\">Gerencie os convênios da SEAP-PB</p>\n        </div>\n\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Adicionar Convênio\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Adicionar Novo Convênio</DialogTitle>\n            </DialogHeader>\n            <div className=\"grid grid-cols-2 gap-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"numero\">Número do Convênio *</Label>\n                <Input\n                  id=\"numero\"\n                  value={newConvenio.numero}\n                  onChange={(e) =>\n                    setNewConvenio({ ...newConvenio, numero: e.target.value })\n                  }\n                  placeholder=\"Ex: CV001/2025\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"nome\">Nome do Convênio *</Label>\n                <Input\n                  id=\"nome\"\n                  value={newConvenio.nome}\n                  onChange={(e) =>\n                    setNewConvenio({ ...newConvenio, nome: e.target.value })\n                  }\n                  placeholder=\"Nome do convênio\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"orgaoConvenente\">Órgão Convenente *</Label>\n                <Input\n                  id=\"orgaoConvenente\"\n                  value={newConvenio.orgaoConvenente}\n                  onChange={(e) =>\n                    setNewConvenio({\n                      ...newConvenio,\n                      orgaoConvenente: e.target.value,\n                    })\n                  }\n                  placeholder=\"Órgão convenente\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"valor\">Valor *</Label>\n                <Input\n                  id=\"valor\"\n                  value={newConvenio.valor}\n                  onChange={(e) =>\n                    setNewConvenio({ ...newConvenio, valor: e.target.value })\n                  }\n                  placeholder=\"Ex: 150000.00\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dataInicio\">Data de Início *</Label>\n                <Input\n                  id=\"dataInicio\"\n                  type=\"date\"\n                  value={newConvenio.dataInicio}\n                  onChange={(e) =>\n                    setNewConvenio({\n                      ...newConvenio,\n                      dataInicio: e.target.value,\n                    })\n                  }\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"dataFim\">Data de Fim *</Label>\n                <Input\n                  id=\"dataFim\"\n                  type=\"date\"\n                  value={newConvenio.dataFim}\n                  onChange={(e) =>\n                    setNewConvenio({ ...newConvenio, dataFim: e.target.value })\n                  }\n                />\n              </div>\n              <div className=\"col-span-2 space-y-2\">\n                <Label htmlFor=\"observacoes\">Observações</Label>\n                <Input\n                  id=\"observacoes\"\n                  value={newConvenio.observacoes}\n                  onChange={(e) =>\n                    setNewConvenio({\n                      ...newConvenio,\n                      observacoes: e.target.value,\n                    })\n                  }\n                  placeholder=\"Observações adicionais\"\n                />\n              </div>\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsAddDialogOpen(false)}\n              >\n                Cancelar\n              </Button>\n              <Button\n                onClick={handleAddConvenio}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                Adicionar\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle>Lista de Convênios</CardTitle>\n            <div className=\"w-72\">\n              <Input\n                placeholder=\"Pesquisar convênios...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Número</TableHead>\n                  <TableHead>Nome</TableHead>\n                  <TableHead>Órgão Convenente</TableHead>\n                  <TableHead>Valor</TableHead>\n                  <TableHead>Período</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Ações</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredConvenios.length === 0 ? (\n                  <TableRow>\n                    <TableCell\n                      colSpan={7}\n                      className=\"text-center py-8 text-gray-500\"\n                    >\n                      {searchTerm\n                        ? \"Nenhum convênio encontrado com os critérios de pesquisa.\"\n                        : \"Nenhum convênio cadastrado.\"}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredConvenios.map((convenio) => (\n                    <TableRow key={convenio.id}>\n                      <TableCell className=\"font-medium\">\n                        {convenio.numero}\n                      </TableCell>\n                      <TableCell>{convenio.nome}</TableCell>\n                      <TableCell>{convenio.orgaoConvenente}</TableCell>\n                      <TableCell>{formatCurrency(convenio.valor)}</TableCell>\n                      <TableCell>\n                        {formatDate(convenio.dataInicio)} -{\" \"}\n                        {formatDate(convenio.dataFim)}\n                      </TableCell>\n                      <TableCell>\n                        <Badge variant={getStatusBadgeVariant(convenio.status)}>\n                          {convenio.status.charAt(0).toUpperCase() +\n                            convenio.status.slice(1)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-8 w-8 p-0\"\n                            onClick={() => handleEditConvenio(convenio)}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700\"\n                            onClick={() => handleDeleteConvenio(convenio.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Diálogo de Edição */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Editar Convênio</DialogTitle>\n            <DialogDescription>\n              Atualize as informações do convênio selecionado.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"edit-numero\" className=\"text-right\">\n                Número *\n              </Label>\n              <Input\n                id=\"edit-numero\"\n                value={newConvenio.numero}\n                onChange={(e) =>\n                  setNewConvenio({ ...newConvenio, numero: e.target.value })\n                }\n                className=\"col-span-3\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"edit-nome\" className=\"text-right\">\n                Nome *\n              </Label>\n              <Input\n                id=\"edit-nome\"\n                value={newConvenio.nome}\n                onChange={(e) =>\n                  setNewConvenio({ ...newConvenio, nome: e.target.value })\n                }\n                className=\"col-span-3\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"edit-orgao\" className=\"text-right\">\n                Órgão *\n              </Label>\n              <Input\n                id=\"edit-orgao\"\n                value={newConvenio.orgaoConvenente}\n                onChange={(e) =>\n                  setNewConvenio({\n                    ...newConvenio,\n                    orgaoConvenente: e.target.value,\n                  })\n                }\n                className=\"col-span-3\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"edit-valor\" className=\"text-right\">\n                Valor *\n              </Label>\n              <Input\n                id=\"edit-valor\"\n                value={newConvenio.valor}\n                onChange={(e) =>\n                  setNewConvenio({ ...newConvenio, valor: e.target.value })\n                }\n                className=\"col-span-3\"\n                placeholder=\"Ex: 150.000,00\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"edit-inicio\" className=\"text-right\">\n                Data Início *\n              </Label>\n              <Input\n                id=\"edit-inicio\"\n                type=\"date\"\n                value={newConvenio.dataInicio}\n                onChange={(e) =>\n                  setNewConvenio({ ...newConvenio, dataInicio: e.target.value })\n                }\n                className=\"col-span-3\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"edit-fim\" className=\"text-right\">\n                Data Fim *\n              </Label>\n              <Input\n                id=\"edit-fim\"\n                type=\"date\"\n                value={newConvenio.dataFim}\n                onChange={(e) =>\n                  setNewConvenio({ ...newConvenio, dataFim: e.target.value })\n                }\n                className=\"col-span-3\"\n              />\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"edit-status\" className=\"text-right\">\n                Status\n              </Label>\n              <Select\n                value={newConvenio.status}\n                onValueChange={(value) =>\n                  setNewConvenio({ ...newConvenio, status: value })\n                }\n              >\n                <SelectTrigger className=\"col-span-3\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"ativo\">Ativo</SelectItem>\n                  <SelectItem value=\"encerrado\">Encerrado</SelectItem>\n                  <SelectItem value=\"suspenso\">Suspenso</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"grid grid-cols-4 items-center gap-4\">\n              <Label htmlFor=\"edit-observacoes\" className=\"text-right\">\n                Observações\n              </Label>\n              <Textarea\n                id=\"edit-observacoes\"\n                value={newConvenio.observacoes}\n                onChange={(e) =>\n                  setNewConvenio({\n                    ...newConvenio,\n                    observacoes: e.target.value,\n                  })\n                }\n                className=\"col-span-3\"\n                rows={3}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n              Cancelar\n            </Button>\n            <Button onClick={handleSaveEdit}>Salvar Alterações</Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Convenios;\n","size_bytes":20901},"client/src/pages/Dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { FileText, CheckCircle, Clock, XCircle, RefreshCw, Trophy, TrendingUp, AlertTriangle } from \"lucide-react\";\nimport StatsCard from \"@/components/dashboard/StatsCard\";\nimport ProcessStatusChart from \"@/components/dashboard/ProcessStatusChart\";\nimport MonthlyProcessesChart from \"@/components/dashboard/MonthlyProcessesChart\";\nimport ResourceDistributionChart from \"@/components/dashboard/ResourceDistributionChart\";\n\nimport ProcessTable from \"@/components/dashboard/ProcessTable\";\nimport DashboardFilters from \"@/components/dashboard/DashboardFilters\";\nimport MonthlyGoalSettings from \"@/components/dashboard/MonthlyGoalSettings\";\nimport { TemporalDistributionChart } from \"@/components/dashboard/TemporalDistributionChart\";\nimport { DepartmentRanking } from \"@/components/dashboard/DepartmentRanking\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface FilterState {\n  pbdoc?: string;\n  modality?: string;\n  responsible?: string;\n  centralcompras?: string;\n}\n\nconst Dashboard = () => {\n  const [filters, setFilters] = useState<FilterState>({});\n  const [monthlyGoal, setMonthlyGoal] = useState<number>(200);\n\n  // Refresh automático ao entrar na página\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/analytics/process-statistics\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/analytics/temporal-distribution\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/analytics/department-ranking\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/analytics/processes-by-source\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/settings/monthly-goal\"] });\n  }, []);\n\n  // Verificar se o usuário é administrador\n  const { data: currentUser } = useQuery({\n    queryKey: [\"/api/auth/status\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/auth/status\");\n      if (!response.ok) {\n        return null;\n      }\n      return response.json();\n    },\n  });\n\n  const isAdmin = currentUser?.role === \"admin\";\n\n  // Buscar a meta mensal configurada\n  const { data: goalData } = useQuery({\n    queryKey: [\"/api/settings/monthly-goal\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/settings/monthly-goal\");\n        if (response.ok) {\n          const data = await response.json();\n          return data.value;\n        }\n      } catch (error) {\n        console.error(\"Erro ao buscar meta mensal:\", error);\n      }\n\n      // Como fallback, usa o localStorage ou o valor padrão\n      const storedGoal = localStorage.getItem(\"monthlyGoal\");\n      return storedGoal ? parseInt(storedGoal) : 200;\n    },\n  });\n\n  // Atualizar a meta quando os dados forem carregados\n  useEffect(() => {\n    if (goalData) {\n      setMonthlyGoal(goalData);\n    }\n  }, [goalData]);\n\n  // Implementação customizada de consulta para pegar processos e executar filtragem no frontend\n  const { data: processos } = useQuery({\n    queryKey: [\"/api/processes\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/processes\");\n      if (!response.ok) {\n        throw new Error(\"Falha ao buscar processos\");\n      }\n      return response.json();\n    },\n  });\n\n  // Função para filtrar os processos no client-side\n  const filtrarProcessos = (processos: any[] = []) => {\n    console.log(\"Filtrando processos client-side:\", processos.length);\n    console.log(\"Filtros aplicados:\", filters);\n\n    let processosFiltrados = [...processos];\n\n    if (filters.pbdoc) {\n      processosFiltrados = processosFiltrados.filter((p) =>\n        p.pbdocNumber.toLowerCase().includes(filters.pbdoc!.toLowerCase()),\n      );\n    }\n\n    if (filters.modality) {\n      const modalityId = parseInt(filters.modality);\n      processosFiltrados = processosFiltrados.filter(\n        (p) => p.modalityId === modalityId,\n      );\n    }\n\n    if (filters.responsible) {\n      const responsibleId = parseInt(filters.responsible);\n      console.log(\n        `Filtrando responsibleId=${responsibleId}, tipo: ${typeof responsibleId}`,\n      );\n      processosFiltrados = processosFiltrados.filter((p) => {\n        console.log(\n          `Processo ${p.id}: ${p.responsibleId} === ${responsibleId} => ${p.responsibleId === responsibleId}`,\n        );\n        return p.responsibleId === responsibleId;\n      });\n    }\n    \n    // Filtro para Central de Compras\n    if (filters.centralcompras) {\n      console.log(`Filtrando Central de Compras: \"${filters.centralcompras}\"`);\n      processosFiltrados = processosFiltrados.filter((p) => {\n        console.log(`Verificando processo ${p.id}, Central de Compras: \"${p.centralDeCompras}\"`);\n        return p.centralDeCompras && \n               p.centralDeCompras.toString().toLowerCase().includes(filters.centralcompras!.toLowerCase());\n      });\n      console.log(`Processos após filtro de Central de Compras: ${processosFiltrados.length}`);\n    }\n\n    console.log(\"Processos após filtragem:\", processosFiltrados.length);\n    return processosFiltrados;\n  };\n\n  // Filtrar processos e calcular estatísticas no client-side\n  const processosFiltrados = processos ? filtrarProcessos(processos) : [];\n  const now = new Date();\n  \n  const stats = {\n    total: processosFiltrados.length,\n    completed: processosFiltrados.filter((p) => p.status === \"completed\")\n      .length,\n    inProgress: processosFiltrados.filter((p) => p.status === \"in_progress\")\n      .length,\n    canceled: processosFiltrados.filter((p) => p.status === \"canceled\").length,\n    overdue: processosFiltrados.filter((p) => \n      p.status === \"overdue\" || \n      (p.status !== \"completed\" && p.status !== \"canceled\" && p.deadline && new Date(p.deadline) < now)\n    ).length,\n  };\n\n  const handleApplyFilters = (newFilters: FilterState) => {\n    console.log(\"Applying filters:\", newFilters);\n    setFilters(newFilters);\n  };\n\n  // Função para atualizar manualmente os dados do dashboard\n  const { toast } = useToast();\n\n  const refreshData = () => {\n    // Invalidar todas as consultas para forçar a atualização\n    queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n    queryClient.invalidateQueries({\n      queryKey: [\"/api/analytics/process-statistics\"],\n    });\n    queryClient.invalidateQueries({\n      queryKey: [\"/api/analytics/processes-by-source\"],\n    });\n    queryClient.invalidateQueries({\n      queryKey: [\"/api/analytics/processes-by-responsible\"],\n    });\n    queryClient.invalidateQueries({\n      queryKey: [\"/api/analytics/temporal-distribution\"],\n    });\n    queryClient.invalidateQueries({\n      queryKey: [\"/api/analytics/department-ranking\"],\n    });\n    queryClient.invalidateQueries({ queryKey: [\"/api/settings/monthly-goal\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/modalities\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/sources\"] });\n\n    // Mostrar notificação de dados atualizados\n    toast({\n      title: \"Dados atualizados\",\n      description: \"Os dados do dashboard foram atualizados com sucesso.\",\n      duration: 3000,\n    });\n  };\n\n  return (\n    <div>\n      <div className=\"mb-6 flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-gray-800\">Dashboard</h1>\n          <p className=\"text-gray-600\">\n            Visão geral dos processos de licitação\n          </p>\n        </div>\n\n        {isAdmin && <MonthlyGoalSettings isAdmin={isAdmin} />}\n      </div>\n\n      {/* Filter Controls */}\n      <DashboardFilters onApplyFilters={handleApplyFilters} />\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 my-6\">\n        <StatsCard\n          title=\"Total de Processos\"\n          value={stats?.total || 0}\n          icon={<FileText className=\"h-6 w-6\" />}\n          progress={{ current: stats?.total || 0, max: monthlyGoal }}\n          color=\"blue\"\n        />\n\n        <StatsCard\n          title=\"Em Andamento\"\n          value={stats?.inProgress || 0}\n          icon={<Clock className=\"h-6 w-6\" />}\n          color=\"yellow\"\n          change={{ value: 0, label: \"Em processamento\" }}\n        />\n\n        <StatsCard\n          title=\"Atrasados\"\n          value={stats?.overdue || 0}\n          icon={<AlertTriangle className=\"h-6 w-6\" />}\n          color=\"red\"\n          change={{ value: 0, label: \"Necessitam atenção\" }}\n        />\n\n        <StatsCard\n          title=\"Concluídos\"\n          value={stats?.completed || 0}\n          icon={<CheckCircle className=\"h-6 w-6\" />}\n          color=\"green\"\n          change={{ value: 12, label: \"\" }}\n        />\n\n        <StatsCard\n          title=\"Cancelados\"\n          value={stats?.canceled || 0}\n          icon={<XCircle className=\"h-6 w-6\" />}\n          color=\"gray\"\n          change={{ value: -3, label: \"\" }}\n        />\n      </div>\n\n      {/* Charts - First Row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <ProcessStatusChart filters={filters} />\n        <TemporalDistributionChart filters={filters} />\n      </div>\n\n      {/* Charts - Second Row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <DepartmentRanking filters={filters} />\n        <ResourceDistributionChart filters={filters} />\n      </div>\n\n      {/* Recent Processes Table */}\n      <ProcessTable filters={filters} />\n    </div>\n  );\n};\n\nexport default Dashboard;\n","size_bytes":9630},"client/src/pages/Download.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, FileText, Calendar } from \"lucide-react\";\n\nexport default function DownloadPage() {\n  const handleDownloadReport = () => {\n    // Create a download link for the HTML report\n    const link = document.createElement('a');\n    link.href = '/relatorio/Relatorio_Alteracoes_Sistema_Licitacao.html';\n    link.download = 'Relatorio_Alteracoes_Sistema_Licitacao.html';\n    link.target = '_blank';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const handleViewReport = () => {\n    // Open report in new tab\n    window.open('/relatorio/Relatorio_Alteracoes_Sistema_Licitacao.html', '_blank');\n  };\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <h1 className=\"text-3xl font-bold mb-6\">Downloads e Relatórios</h1>\n      \n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              Relatório de Alterações\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                <Calendar className=\"h-4 w-4\" />\n                Período: 18/06/2025 - 22/06/2025\n              </div>\n              \n              <p className=\"text-sm text-gray-700\">\n                Relatório completo das alterações realizadas no Sistema de Controle \n                de Processos de Licitação nos últimos 5 dias, incluindo melhorias na \n                interface, novas funcionalidades e atualizações do backend.\n              </p>\n              \n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={handleViewReport}\n                  variant=\"outline\"\n                  size=\"sm\"\n                >\n                  Visualizar\n                </Button>\n                <Button \n                  onClick={handleDownloadReport}\n                  size=\"sm\"\n                  className=\"flex items-center gap-2\"\n                >\n                  <Download className=\"h-4 w-4\" />\n                  Download HTML\n                </Button>\n              </div>\n              \n              <div className=\"text-xs text-gray-500\">\n                <p><strong>Dica:</strong> Após abrir o relatório HTML, use Ctrl+P (ou Cmd+P no Mac) \n                para imprimir ou salvar como PDF diretamente do navegador.</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Instruções para PDF</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 text-sm\">\n              <div>\n                <strong>Para gerar PDF:</strong>\n                <ol className=\"list-decimal list-inside mt-2 space-y-1 text-gray-700\">\n                  <li>Clique em \"Visualizar\" ou \"Download HTML\"</li>\n                  <li>No navegador, pressione Ctrl+P (ou Cmd+P)</li>\n                  <li>Selecione \"Salvar como PDF\" como destino</li>\n                  <li>Configure margens e orientação se necessário</li>\n                  <li>Clique em \"Salvar\"</li>\n                </ol>\n              </div>\n              \n              <div className=\"bg-blue-50 p-3 rounded\">\n                <p className=\"text-blue-800 text-xs\">\n                  <strong>Recomendações:</strong><br />\n                  • Use orientação retrato<br />\n                  • Margens normais ou estreitas<br />\n                  • Incluir gráficos de fundo para melhor aparência\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3931},"client/src/pages/FRP.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Search, Edit, Trash2, FileText } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\n// Schema para FRP (similar ao de convênios mas adaptado)\nconst frpSchema = z.object({\n  numero: z.string().min(1, \"Número é obrigatório\"),\n  objeto: z.string().min(1, \"Objeto é obrigatório\"),\n  valor: z.number().min(0, \"Valor deve ser positivo\"),\n  orgaoConcedente: z.string().min(1, \"Órgão concedente é obrigatório\"),\n  orgaoRecebedor: z.string().min(1, \"Órgão recebedor é obrigatório\"),\n  dataAssinatura: z.string().min(1, \"Data de assinatura é obrigatória\"),\n  dataVencimento: z.string().min(1, \"Data de vencimento é obrigatória\"),\n  status: z.enum([\"ativo\", \"vencido\", \"cancelado\"]),\n  observacoes: z.string().optional(),\n});\n\ntype FRP = {\n  id: number;\n  numero: string;\n  objeto: string;\n  valor: number;\n  orgaoConcedente: string;\n  orgaoRecebedor: string;\n  dataAssinatura: string;\n  dataVencimento: string;\n  status: \"ativo\" | \"vencido\" | \"cancelado\";\n  observacoes?: string;\n  createdAt: string;\n  updatedAt: string;\n};\n\ntype InsertFRP = z.infer<typeof frpSchema>;\n\nconst FRP = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingFRP, setEditingFRP] = useState<FRP | null>(null);\n  const { toast } = useToast();\n\n  const form = useForm<InsertFRP>({\n    resolver: zodResolver(frpSchema),\n    defaultValues: {\n      numero: \"\",\n      objeto: \"\",\n      valor: 0,\n      orgaoConcedente: \"\",\n      orgaoRecebedor: \"\",\n      dataAssinatura: \"\",\n      dataVencimento: \"\",\n      status: \"ativo\",\n      observacoes: \"\",\n    },\n  });\n\n  // Estado local para FRPs enquanto não há backend\n  const [localFRPs, setLocalFRPs] = useState<FRP[]>([]);\n\n  // Consulta FRP do backend (usando estado local temporariamente)\n  const { data: frps = [] } = useQuery<FRP[]>({\n    queryKey: [\"/api/frps\"],\n    queryFn: () => Promise.resolve(localFRPs),\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertFRP) => {\n      const newFRP: FRP = {\n        id: Date.now(),\n        ...data,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n      \n      // Adicionar ao estado local\n      setLocalFRPs(prev => [...prev, newFRP]);\n      \n      return newFRP;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/frps\"] });\n      setDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"FRP criado\",\n        description: \"FRP cadastrado com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível criar o FRP\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: InsertFRP }) => {\n      const updatedFRP: FRP = {\n        id,\n        ...data,\n        createdAt: localFRPs.find(f => f.id === id)?.createdAt || new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n      \n      // Atualizar no estado local\n      setLocalFRPs(prev => prev.map(frp => frp.id === id ? updatedFRP : frp));\n      \n      return updatedFRP;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/frps\"] });\n      setDialogOpen(false);\n      setEditingFRP(null);\n      form.reset();\n      toast({\n        title: \"FRP atualizado\",\n        description: \"FRP atualizado com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível atualizar o FRP\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      // Remover do estado local\n      setLocalFRPs(prev => prev.filter(frp => frp.id !== id));\n      \n      return Promise.resolve();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/frps\"] });\n      toast({\n        title: \"FRP excluído\",\n        description: \"FRP excluído com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível excluir o FRP\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: InsertFRP) => {\n    if (editingFRP) {\n      updateMutation.mutate({ id: editingFRP.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (frp: FRP) => {\n    setEditingFRP(frp);\n    form.reset({\n      numero: frp.numero,\n      objeto: frp.objeto,\n      valor: frp.valor,\n      orgaoConcedente: frp.orgaoConcedente,\n      orgaoRecebedor: frp.orgaoRecebedor,\n      dataAssinatura: frp.dataAssinatura,\n      dataVencimento: frp.dataVencimento,\n      status: frp.status,\n      observacoes: frp.observacoes || \"\",\n    });\n    setDialogOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (confirm(\"Tem certeza que deseja excluir este FRP?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const filteredFRPs = frps.filter(\n    (frp) =>\n      frp.numero.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      frp.objeto.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      frp.orgaoConcedente.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"ativo\":\n        return \"bg-green-100 text-green-800\";\n      case \"vencido\":\n        return \"bg-red-100 text-red-800\";\n      case \"cancelado\":\n        return \"bg-gray-100 text-gray-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case \"ativo\":\n        return \"Ativo\";\n      case \"vencido\":\n        return \"Vencido\";\n      case \"cancelado\":\n        return \"Cancelado\";\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">FRP</h1>\n          <p className=\"text-muted-foreground\">\n            Gerenciamento de Fundo de Recursos Penitenciários\n          </p>\n        </div>\n        <Dialog\n          open={dialogOpen}\n          onOpenChange={(open) => {\n            setDialogOpen(open);\n            if (!open) {\n              setEditingFRP(null);\n              form.reset();\n            }\n          }}\n        >\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Novo FRP\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingFRP ? \"Editar FRP\" : \"Novo FRP\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"numero\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Número</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"FRP-001/2025\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"valor\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Valor (R$)</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"0,00\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"objeto\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Objeto</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Descreva o objeto do FRP\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"orgaoConcedente\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Órgão Concedente</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Ministério...\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"orgaoRecebedor\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Órgão Recebedor</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"SEAP-PB\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"dataAssinatura\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Data de Assinatura</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"dataVencimento\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Data de Vencimento</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Status</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Selecione o status\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"ativo\">Ativo</SelectItem>\n                            <SelectItem value=\"vencido\">Vencido</SelectItem>\n                            <SelectItem value=\"cancelado\">Cancelado</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"observacoes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Observações</FormLabel>\n                      <FormControl>\n                        <Textarea placeholder=\"Observações adicionais\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setDialogOpen(false)}\n                  >\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                    {editingFRP ? \"Atualizar\" : \"Criar\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"mb-6\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n          <Input\n            placeholder=\"Buscar por número, objeto ou órgão concedente...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {filteredFRPs.map((frp) => (\n          <Card key={frp.id}>\n            <CardHeader>\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <FileText className=\"h-5 w-5\" />\n                    {frp.numero}\n                    <Badge className={getStatusColor(frp.status)}>\n                      {getStatusLabel(frp.status)}\n                    </Badge>\n                  </CardTitle>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {frp.objeto}\n                  </p>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(frp)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleDelete(frp.id)}\n                    disabled={deleteMutation.isPending}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div>\n                  <span className=\"font-medium\">Valor:</span>\n                  <p className=\"text-green-600 font-semibold\">\n                    R$ {frp.valor.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}\n                  </p>\n                </div>\n                <div>\n                  <span className=\"font-medium\">Órgão Concedente:</span>\n                  <p>{frp.orgaoConcedente}</p>\n                </div>\n                <div>\n                  <span className=\"font-medium\">Data de Assinatura:</span>\n                  <p>{new Date(frp.dataAssinatura).toLocaleDateString('pt-BR')}</p>\n                </div>\n                <div>\n                  <span className=\"font-medium\">Data de Vencimento:</span>\n                  <p>{new Date(frp.dataVencimento).toLocaleDateString('pt-BR')}</p>\n                </div>\n              </div>\n              {frp.observacoes && (\n                <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                  <span className=\"font-medium\">Observações:</span>\n                  <p className=\"text-sm mt-1\">{frp.observacoes}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredFRPs.length === 0 && (\n        <div className=\"text-center py-12\">\n          <FileText className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium mb-2\">Nenhum FRP encontrado</h3>\n          <p className=\"text-muted-foreground\">\n            {searchTerm\n              ? \"Tente ajustar os filtros de busca\"\n              : \"Comece criando um novo FRP\"}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FRP;","size_bytes":17698},"client/src/pages/Login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { LoginThemeToggle } from \"@/components/login-theme-toggle\";\nimport { LoginIntro } from \"@/components/LoginIntro\";\nimport { differenceInDays } from \"date-fns\";\nimport { AlertTriangle } from \"lucide-react\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Building, Lock, Mail, User, Users } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\n// Login form schema\nconst loginSchema = z.object({\n  username: z.string().min(1, \"O nome de usuário é obrigatório\"),\n  password: z.string().min(1, \"A senha é obrigatória\"),\n});\n\n// Register form schema\nconst registerSchema = z\n  .object({\n    username: z\n      .string()\n      .min(3, \"O nome de usuário deve ter pelo menos 3 caracteres\"),\n    password: z.string().min(6, \"A senha deve ter pelo menos 6 caracteres\"),\n    confirmPassword: z.string().min(1, \"Confirme sua senha\"),\n    fullName: z.string().min(3, \"O nome completo é obrigatório\"),\n    email: z.string().email(\"Digite um email válido\"),\n    department: z.string().min(1, \"O setor é obrigatório\"),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"As senhas não coincidem\",\n    path: [\"confirmPassword\"],\n  });\n\ntype LoginFormValues = z.infer<typeof loginSchema>;\ntype RegisterFormValues = z.infer<typeof registerSchema>;\n\nconst Login = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRegistering, setIsRegistering] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [urgentProcesses, setUrgentProcesses] = useState<any[]>([]);\n  const [showUrgentAlert, setShowUrgentAlert] = useState(false);\n  const [showIntro, setShowIntro] = useState(true);  // Mostrar intro ao carregar a página\n\n  // Create login form with default values\n  const loginForm = useForm<LoginFormValues>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  // Create register form with default values\n  const registerForm = useForm<RegisterFormValues>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      fullName: \"\",\n      email: \"\",\n      department: \"\",\n    },\n  });\n\n  const onLoginSubmit = async (data: LoginFormValues) => {\n    setIsLoading(true);\n\n    try {\n      console.log(\"Iniciando login para:\", data.username);\n\n      // Fazer a requisição diretamente sem usar o helper apiRequest\n      console.log(\"Enviando dados de login:\", JSON.stringify(data));\n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Cache-Control\": \"no-cache, no-store, must-revalidate\",\n          \"Pragma\": \"no-cache\"\n        },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n        cache: \"no-store\",\n      });\n\n      console.log(\"Resposta do login:\", response.status);\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Detalhes do erro de login:\", errorText);\n        throw new Error(`Erro no login: ${response.status} - ${errorText}`);\n      }\n\n      // Obter dados do usuário\n      const user = await response.json();\n      console.log(\"Login bem-sucedido:\", user);\n\n      // Verificar processos com prazos próximos\n      try {\n        const processesResponse = await fetch(\"/api/processes\", {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          credentials: \"include\",\n        });\n        \n        if (processesResponse.ok) {\n          const processes = await processesResponse.json();\n          \n          // Filtrar processos com prazo de até 5 dias\n          const today = new Date();\n          const urgentProcessesList = processes.filter((process: any) => {\n            if (!process.deadline) return false;\n            const daysRemaining = differenceInDays(new Date(process.deadline), today);\n            return daysRemaining >= 0 && daysRemaining <= 5;\n          });\n          \n          if (urgentProcessesList.length > 0) {\n            setUrgentProcesses(urgentProcessesList);\n            setShowUrgentAlert(true);\n          }\n        }\n      } catch (error) {\n        console.error(\"Erro ao buscar processos com prazos próximos:\", error);\n      }\n      \n      // Show success toast\n      toast({\n        title: \"Login realizado com sucesso\",\n        description: \"Você será redirecionado para o dashboard\",\n      });\n\n      console.log(\"Login bem-sucedido, redirecionando para dashboard\");\n      \n      // Importar e invalidar o cache do React Query para forçar atualização do estado de auth\n      const { queryClient } = await import(\"../lib/queryClient\");\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/status'] }); // Remover await para ser mais rápido\n      \n      // Redirecionar diretamente para o dashboard após login\n      setLocation(\"/\");\n    } catch (error) {\n      console.error(\"Erro no login:\", error);\n\n      // Show error toast\n      toast({\n        title: \"Erro ao fazer login\",\n        description:\n          \"Verifique seu nome de usuário e senha ou se sua conta foi ativada pelo administrador\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onRegisterSubmit = async (data: RegisterFormValues) => {\n    setIsRegistering(true);\n\n    try {\n      // Remove confirmPassword field as it's not needed for the API\n      const { confirmPassword, ...userData } = data;\n\n      // Call register API\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", userData);\n      const result = await response.json();\n\n      // Show success toast\n      toast({\n        title: \"Cadastro realizado com sucesso\",\n        description:\n          result.message ||\n          \"Seu cadastro foi enviado para aprovação do administrador.\",\n      });\n\n      // Reset form\n      registerForm.reset();\n\n      // Switch to login tab\n      document.getElementById(\"login-tab\")?.click();\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n\n      // Show error toast\n      toast({\n        title: \"Erro ao realizar cadastro\",\n        description:\n          error.message || \"Verifique os dados informados e tente novamente\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsRegistering(false);\n    }\n  };\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-background\">\n      {/* Alerta de processos com prazos próximos */}\n      <AlertDialog open={showUrgentAlert} onOpenChange={setShowUrgentAlert}>\n        <AlertDialogContent className=\"max-w-[650px]\">\n          <AlertDialogHeader>\n            <AlertDialogTitle className=\"flex items-center text-amber-600\">\n              <AlertTriangle className=\"mr-2 h-5 w-5\" />\n              Processos com Prazos Urgentes\n            </AlertDialogTitle>\n            <AlertDialogDescription>\n              Os seguintes processos estão com prazos de entrega próximos do vencimento e requerem atenção imediata:\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <div className=\"max-h-[300px] overflow-y-auto my-4 border rounded-md\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-800 uppercase\">PBDOC</th>\n                  <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-800 uppercase\">Objeto</th>\n                  <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-800 uppercase\">Prazo</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {urgentProcesses.map((process) => {\n                  const daysRemaining = differenceInDays(new Date(process.deadline), new Date());\n                  return (\n                    <tr key={process.id}>\n                      <td className=\"px-4 py-2 whitespace-nowrap text-sm font-medium\">{process.pbdocNumber}</td>\n                      <td className=\"px-4 py-2 text-sm\">{process.description}</td>\n                      <td className={`px-4 py-2 whitespace-nowrap text-sm font-medium ${\n                        daysRemaining <= 2 ? \"text-red-600\" : \"text-amber-600\"\n                      }`}>\n                        {daysRemaining > 0\n                          ? `${daysRemaining} dias`\n                          : daysRemaining === 0\n                          ? \"Hoje\"\n                          : \"Vencido\"}\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <AlertDialogFooter>\n            <AlertDialogAction className=\"bg-primary\">Entendi, vou verificar</AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n      \n      {!showIntro && (\n        <div className=\"w-full max-w-md px-4\">\n          <img\n            src=\"https://paraiba.pb.gov.br/marca-do-governo/GovPBT.png\"\n            alt=\"Logo\"\n            className=\"mx-auto mb-4\"\n            width={250}\n          />\n\n          <div className=\"text-center mb-6\">\n            <h1 className=\"text-2xl font-bold text-primary mb-2\">SEAP-PB</h1>\n            <h2 className=\"text-xl text-foreground/80\">\n              Sistema de Controle de Processos de Licitação\n            </h2>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 mb-4\">\n            <TabsTrigger value=\"login\" id=\"login-tab\">\n              Login\n            </TabsTrigger>\n            <TabsTrigger value=\"register\">Cadastro</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"login\">\n            <Card>\n              <CardHeader className=\"relative\">\n                <CardTitle>Login</CardTitle>\n                <CardDescription>\n                  Acesse o sistema com suas credenciais\n                </CardDescription>\n                {/* <LoginThemeToggle /> */}\n              </CardHeader>\n              <CardContent>\n                <Form {...loginForm}>\n                  <form\n                    onSubmit={loginForm.handleSubmit(onLoginSubmit)}\n                    className=\"space-y-4\"\n                  >\n                    <FormField\n                      control={loginForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nome de Usuário</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                              <Input\n                                placeholder=\"Seu nome de usuário\"\n                                className=\"pl-10\"\n                                {...field}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={loginForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Senha</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                              <Input\n                                type=\"password\"\n                                placeholder=\"Sua senha\"\n                                className=\"pl-10\"\n                                {...field}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={isLoading}\n                    >\n                      {isLoading ? \"Entrando...\" : \"Entrar\"}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n              <CardFooter className=\"flex flex-col space-y-4\">\n                <div className=\"w-full text-center mt-2\">\n                  {/* <a \n                    href=\"/download\" \n                    className=\"inline-flex items-center justify-center px-4 py-2 rounded-md bg-green-100 text-green-700 hover:bg-green-200 font-medium transition-colors border border-green-300\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    <ArrowRight className=\"mr-2 h-4 w-4\" />\n                    Baixar Aplicativo Desktop\n                  </a> */}\n                </div>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"register\">\n            <Card>\n              <CardHeader className=\"relative\">\n                <CardTitle>Cadastre-se</CardTitle>\n                <CardDescription>\n                  Crie uma nova conta para acessar o sistema.\n                  <br />\n                  <span className=\"text-amber-500 font-medium\">\n                    Seu cadastro será analisado por um administrador.\n                  </span>\n                </CardDescription>\n                {/* <LoginThemeToggle /> */}\n              </CardHeader>\n              <CardContent>\n                <Form {...registerForm}>\n                  <form\n                    onSubmit={registerForm.handleSubmit(onRegisterSubmit)}\n                    className=\"space-y-4\"\n                  >\n                    <FormField\n                      control={registerForm.control}\n                      name=\"fullName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Nome Completo</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Users className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                              <Input\n                                placeholder=\"Seu nome completo\"\n                                className=\"pl-10\"\n                                {...field}\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Nome de Usuário</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <User className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                                <Input\n                                  placeholder=\"Username\"\n                                  className=\"pl-10\"\n                                  {...field}\n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>E-mail</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                                <Input\n                                  type=\"email\"\n                                  placeholder=\"seu.email@exemplo.com\"\n                                  className=\"pl-10\"\n                                  {...field}\n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={registerForm.control}\n                      name=\"department\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Setor</FormLabel>\n                          <Select\n                            onValueChange={field.onChange}\n                            defaultValue={field.value}\n                          >\n                            <FormControl>\n                              <SelectTrigger className=\"w-full\">\n                                <SelectValue placeholder=\"Selecione seu setor\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"Setor Demandante\">Setor Demandante</SelectItem>\n                              <SelectItem value=\"Divisão de Licitação\">Divisão de Licitação</SelectItem>\n                              <SelectItem value=\"Núcleo de Pesquisa de Preços – NPP\">Núcleo de Pesquisa de Preços – NPP</SelectItem>\n                              <SelectItem value=\"Unidade de Orçamento e Finanças\">Unidade de Orçamento e Finanças</SelectItem>\n                              <SelectItem value=\"Secretário de Estado da Administração Penitenciária - SEAP\">Secretário de Estado da Administração Penitenciária - SEAP</SelectItem>\n                              <SelectItem value=\"Comitê Gestor do Plano de Contingência - CGPC\">Comitê Gestor do Plano de Contingência - CGPC</SelectItem>\n                              <SelectItem value=\"Unidade Técnico Normativa\">Unidade Técnico Normativa</SelectItem>\n                              <SelectItem value=\"Procuradoria Geral do Estado - PGE\">Procuradoria Geral do Estado - PGE</SelectItem>\n                              <SelectItem value=\"Controladoria Geral do Estado – CGE\">Controladoria Geral do Estado – CGE</SelectItem>\n                              <SelectItem value=\"Equipe de Pregão\">Equipe de Pregão</SelectItem>\n                              <SelectItem value=\"Subgerência de Contratos e  Convênios - SUBCC\">Subgerência de Contratos e  Convênios - SUBCC</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Senha</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                                <Input\n                                  type=\"password\"\n                                  placeholder=\"Digite sua senha\"\n                                  className=\"pl-10\"\n                                  {...field}\n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={registerForm.control}\n                        name=\"confirmPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Confirmar Senha</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                                <Input\n                                  type=\"password\"\n                                  placeholder=\"Confirme sua senha\"\n                                  className=\"pl-10\"\n                                  {...field}\n                                />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={isRegistering}\n                    >\n                      {isRegistering ? (\n                        <span className=\"flex items-center\">\n                          Enviando... <ArrowRight className=\"ml-2 h-4 w-4\" />\n                        </span>\n                      ) : (\n                        <span className=\"flex items-center\">\n                          Cadastrar <ArrowRight className=\"ml-2 h-4 w-4\" />\n                        </span>\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n        </div>\n      )}\n      \n      {/* Mostrar intro antes do formulário de login */}\n      {showIntro && <LoginIntro onComplete={() => setShowIntro(false)} />}\n    </div>\n  );\n};\n\nexport default Login;\n","size_bytes":23410},"client/src/pages/ProcessCreate.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { InsertProcess } from \"@shared/schema\";\nimport ProcessForm from \"@/components/process/ProcessForm\";\n\nconst ProcessCreate = () => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const handleSubmit = async (data: InsertProcess) => {\n    setIsSubmitting(true);\n    \n    try {\n      // Pré-processar os dados antes de enviar para o servidor\n      const processedData = {\n        ...data,\n        // Garantir que os IDs são números\n        modalityId: Number(data.modalityId),\n        sourceId: Number(data.sourceId),\n        responsibleId: Number(data.responsibleId),\n        // Todos os processos sempre começam no Setor Demandante (ID: 1)\n        currentDepartmentId: 1,\n        // Novos processos sempre começam em andamento\n        status: \"in_progress\",\n        // Converter deadline string para Date\n        deadline: data.deadline ? new Date(data.deadline) : null\n      };\n      \n      console.log(\"Dados processados para envio:\", processedData);\n      \n      // Create the process\n      const response = await apiRequest(\"POST\", \"/api/processes\", processedData);\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error(\"Erro detalhado:\", errorData);\n        \n        let errorMessage = \"Não foi possível criar o processo. Tente novamente.\";\n        \n        if (errorData.errors) {\n          // Formatar os erros para exibição\n          const errorDetails = Object.entries(errorData.errors)\n            .map(([field, errors]) => `${field}: ${errors}`)\n            .join(', ');\n          errorMessage = `Erros no formulário: ${errorDetails}`;\n        } else if (errorData.error) {\n          errorMessage = errorData.error;\n        } else if (errorData.message) {\n          errorMessage = errorData.message;\n        }\n        \n        throw new Error(errorMessage);\n      }\n      \n      const createdProcess = await response.json();\n      \n      // Show success message\n      toast({\n        title: \"Processo criado\",\n        description: \"O processo foi criado com sucesso\",\n      });\n      \n      // Invalidate queries to refresh the processes list\n      queryClient.invalidateQueries({ queryKey: ['/api/processes'] });\n      \n      // Navigate to the process details page\n      setLocation(`/processes/${createdProcess.id}`);\n    } catch (error) {\n      console.error(\"Error creating process:\", error);\n      \n      // Show error message\n      toast({\n        title: \"Erro ao criar processo\",\n        description: error.message || \"Não foi possível criar o processo. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  return (\n    <div className=\"max-w-5xl mx-auto px-4 py-4\">\n      <div className=\"mb-4\">\n        <h1 className=\"text-xl md:text-2xl font-semibold text-gray-800\">Novo Processo de Licitação</h1>\n        <p className=\"text-sm md:text-base text-gray-600 mt-1\">Cadastre um novo processo licitatório no sistema</p>\n      </div>\n      \n      <ProcessForm \n        onSubmit={handleSubmit} \n        isSubmitting={isSubmitting} \n      />\n    </div>\n  );\n};\n\nexport default ProcessCreate;\n","size_bytes":3496},"client/src/pages/ProcessDetail.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport SimpleImageZoom from \"@/components/SimpleImageZoom\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Process,\n  BiddingModality,\n  ResourceSource,\n  User,\n  ProcessStep,\n} from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport StepChecklist from \"@/components/bidding/StepChecklist\";\nimport BiddingFlowchart from \"@/components/bidding/BiddingFlowchart\";\nimport {\n  Edit,\n  Trash,\n  AlertCircle,\n  Clock,\n  CheckCircle,\n  XCircle,\n  Calendar,\n  ArrowRight,\n  ArrowLeft,\n  FileText,\n  Check,\n  RefreshCw,\n  ZoomIn,\n  ZoomOut,\n  Image as ImageIcon,\n  ChevronDown,\n  ChevronUp,\n  X,\n  Archive,\n  AlertTriangle,\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport {\n  getProcessStatusLabel,\n  getProcessPriorityLabel,\n} from \"@/lib/utils/process\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\ninterface ProcessDetailProps {\n  id: string;\n}\n\nconst ProcessDetail = ({ id }: ProcessDetailProps) => {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"overview\");\n  const [deleteModalOpen, setDeleteModalOpen] = useState(false);\n  const [deletionReason, setDeletionReason] = useState(\"\");\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [authorizationModalOpen, setAuthorizationModalOpen] = useState(false);\n  const [authorizationDecision, setAuthorizationDecision] = useState(\"\");\n  const [stepForAuthorization, setStepForAuthorization] =\n    useState<ProcessStep | null>(null);\n  const [authorizationRejectionModalOpen, setAuthorizationRejectionModalOpen] =\n    useState(false);\n  const [authorizationRejectionDecision, setAuthorizationRejectionDecision] =\n    useState(\"\");\n  const [stepForAuthorizationRejection, setStepForAuthorizationRejection] =\n    useState<ProcessStep | null>(null);\n  const [rejectModalOpen, setRejectModalOpen] = useState(false);\n  const [stepToReject, setStepToReject] = useState<ProcessStep | null>(null);\n  const [rejectionComment, setRejectionComment] = useState(\"\");\n\n  // Estados para modal de correção ou cancelamento\n  const [correctionModalOpen, setCorrectionModalOpen] = useState(false);\n  const [correctionDecision, setCorrectionDecision] = useState(\"\");\n  const [stepForCorrection, setStepForCorrection] =\n    useState<ProcessStep | null>(null);\n\n  // Estado para o modal de arquivamento\n  const [archiveModalOpen, setArchiveModalOpen] = useState(false);\n  const [stepForArchive, setStepForArchive] = useState<ProcessStep | null>(null);\n\n  // Estado para o modal de reavaliação SUBCC\n  const [subccRevaluationModalOpen, setSubccRevaluationModalOpen] = useState(false);\n  const [stepForSubccRevaluation, setStepForSubccRevaluation] = useState<ProcessStep | null>(null);\n\n  // Estado para o modal de Fluxo Repror\n  const [fluxoReprorModalOpen, setFluxoReprorModalOpen] = useState(false);\n  const [stepForFluxoRepror, setStepForFluxoRepror] = useState<ProcessStep | null>(null);\n\n  // Estado para o modal de Autorizar via sistema\n  const [autorizarViaSistemaModalOpen, setAutorizarViaSistemaModalOpen] = useState(false);\n  const [stepForAutorizarViaSistema, setStepForAutorizarViaSistema] = useState<ProcessStep | null>(null);\n\n  // Estados para modal de Autorizar Emissão de R.O\n  const [authorizeRoModalOpen, setAuthorizeRoModalOpen] = useState(false);\n  const [authorizeRoDecision, setAuthorizeRoDecision] = useState(\"\");\n  const [stepForAuthorizeRo, setStepForAuthorizeRo] = useState<ProcessStep | null>(null);\n\n  const [showTransferPanel, setShowTransferPanel] = useState(false);\n  const [allowForcedReturn, setAllowForcedReturn] = useState(false);\n  const [isFlowchartExpanded, setIsFlowchartExpanded] = useState(false);\n  const [isZoomFocused, setIsZoomFocused] = useState(true);\n  const [isFullScreen, setIsFullScreen] = useState(false);\n  const [fullScreenViewMode, setFullScreenViewMode] = useState<\n    \"focused\" | \"complete\"\n  >(\"complete\");\n\n  const flowchartRef = useRef<HTMLDivElement>(null);\n  const fullScreenImageRef = useRef<HTMLImageElement>(null);\n  const parsedId = parseInt(id);\n\n  // Função para obter a imagem específica do departamento\n  const getFlowchartImage = (department: string | undefined) => {\n    if (!department) {\n      return \"/fluxograma_seap_min.png\"; // Imagem completa reduzida\n    }\n\n    // Mapeamento de departamentos para imagens específicas\n    const departmentImages = {\n      \"Setor Demandante\": \"/fluxograma-setor-demandante_1752443886669.png\",\n      \"Divisão de Licitação\":\n        \"/fluxograma-divisão-de-licitação_1752443886668.png\",\n      \"Núcleo de Pesquisa de Preços – NPP\":\n        \"/fluxograma-nucleo-de-pesquisa-de-precos-npp_1752443886668.png\",\n      \"Procuradoria Geral do Estado - PGE\":\n        \"/fluxograma-procuradoria-geral-do-estado-pge_1752443886669.png\",\n      \"Unidade de Orçamento e Finanças\":\n        \"/fluxograma-unidade-de-orcamento-e-financas_1752443886670.png\",\n      \"Secretário de Estado da Administração Penitenciária - SEAP\":\n        \"/fluxograma-secretario-de-estado-da-administracao-penitenciaria-seap_1752443886669.png\",\n      \"Equipe de Pregão\": \"/fluxograma-equipe-de-pregao_1752443886668.png\",\n      \"Controladoria Geral do Estado – CGE\":\n        \"/fluxograma-controladoria-geral-do-estado-cge_1752443886667.png\",\n      \"Comitê Gestor do Plano de Contingência - CGPC\":\n        \"/fluxograma-comite-gestor-do-plano-de-contigencia-cgpc_1752443886667.png\",\n      \"Unidade Técnico Normativa\":\n        \"/fluxograma-unidade-tecnico-normativa_1752443886665.png\",\n      \"Subgerência de Contratos e  Convênios - SUBCC\":\n        \"/fluxograma-subgerencia-de-contratos-e-convenios-SUBCC_1752443886670.png\",\n    };\n\n    return (\n      departmentImages[department as keyof typeof departmentImages] ||\n      \"/fluxograma_seap_min.png\"\n    );\n  };\n\n  const getDepartmentFocus = (department: string | undefined) => {\n    const focuses = {\n      \"Setor Demandante\": \"Iniciação\",\n      \"Divisão de Licitação\": \"Preparação & Execução\",\n      \"Núcleo de Pesquisa de Preços – NPP\": \"Pesquisa de Preços\",\n      \"Procuradoria Geral do Estado - PGE\": \"Análise Jurídica\",\n      \"Unidade de Orçamento e Finanças\": \"Análise Orçamentária\",\n      \"Secretário de Estado da Administração Penitenciária - SEAP\":\n        \"Autorização Final\",\n      \"Equipe de Pregão\": \"Condução de Sessões\",\n      \"Controladoria Geral do Estado – CGE\": \"Controle e Auditoria\",\n      \"Comitê Gestor do Plano de Contingência - CGPC\":\n        \"Análise de Contingência\",\n      \"Unidade Técnico Normativa\": \"Normas Técnicas\",\n      \"Subgerência de Contratos e  Convênios - SUBCC\": \"Gestão de Contratos\",\n    };\n\n    return focuses[department as keyof typeof focuses] || \"Visão Geral\";\n  };\n\n  const getDepartmentDescription = (department: string | undefined) => {\n    const descriptions = {\n      \"Setor Demandante\":\n        \"Responsável pela criação do DFD, ETP, Mapa de Risco e Termo de Referência. Esta é a fase inicial onde a necessidade é formalizada.\",\n      \"Divisão de Licitação\":\n        \"Coordena todo o processo licitatório, desde a criação até a execução. Gerencia prazos e documentação.\",\n      \"Núcleo de Pesquisa de Preços – NPP\":\n        \"Realiza pesquisa de mercado e análise de preços para garantir economicidade na contratação.\",\n      \"Procuradoria Geral do Estado - PGE\":\n        \"Analisa juridicamente todos os documentos e procedimentos para garantir conformidade legal.\",\n      \"Unidade de Orçamento e Finanças\":\n        \"Verifica disponibilidade orçamentária e autoriza empenho dos recursos necessários.\",\n      \"Secretário de Estado da Administração Penitenciária - SEAP\":\n        \"Autoridade máxima que aprova e autoriza o processo licitatório.\",\n      \"Equipe de Pregão\":\n        \"Equipe especializada responsável pela condução das sessões de pregão eletrônico e presencial.\",\n      \"Controladoria Geral do Estado – CGE\":\n        \"Órgão de controle interno responsável pela fiscalização e auditoria dos processos licitatórios.\",\n      \"Comitê Gestor do Plano de Contingência - CGPC\":\n        \"Comitê responsável pela análise e autorização de processos em situações de contingência ou emergência.\",\n      \"Unidade Técnico Normativa\":\n        \"Setor responsável pela elaboração e atualização de normas técnicas e procedimentos operacionais.\",\n      \"Subgerência de Contratos e  Convênios - SUBCC\":\n        \"Unidade especializada no acompanhamento e gestão de contratos e convênios firmados.\",\n    };\n\n    return (\n      descriptions[department as keyof typeof descriptions] ||\n      \"Visualização geral do processo de licitação.\"\n    );\n  };\n\n  // Get process details\n  const {\n    data: process,\n    isLoading: processLoading,\n    error,\n  } = useQuery<Process>({\n    queryKey: [`/api/processes/${parsedId}`],\n  });\n\n  // Get modality details\n  const { data: modalities } = useQuery<BiddingModality[]>({\n    queryKey: [\"/api/modalities\"],\n    enabled: !!process,\n  });\n\n  // Get source details\n  const { data: sources } = useQuery<ResourceSource[]>({\n    queryKey: [\"/api/sources\"],\n    enabled: !!process,\n  });\n\n  // Get current user\n  const { data: currentUser } = useQuery<User>({\n    queryKey: [\"/api/auth/status\"],\n  });\n\n  // Get user details\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    enabled: !!process,\n  });\n\n  // Get current modality\n  const modality =\n    process && modalities\n      ? modalities.find((m) => m.id === process.modalityId)\n      : undefined;\n\n  // Get source\n  const source =\n    process && sources\n      ? sources.find((s) => s.id === process.sourceId)\n      : undefined;\n\n  // Get responsible user\n  const responsible =\n    process && users\n      ? users.find((u) => u.id === process.responsibleId)\n      : undefined;\n\n  // Fetch process steps to get the next step\n  const { data: steps } = useQuery<ProcessStep[]>({\n    queryKey: [`/api/processes/${parsedId}/steps`],\n    enabled: !!process,\n  });\n\n  // Get process responsibility history\n  const { data: responsibilityHistory, isLoading: historyLoading } = useQuery<\n    any[]\n  >({\n    queryKey: [`/api/processes/${parsedId}/responsibility-history`],\n    enabled: !!process,\n  });\n\n  // Auto-create steps if none exist - only run once per process\n  useEffect(() => {\n    if (process && steps !== undefined && steps.length === 0) {\n      const defaultSteps = [\n        \"Demanda identificada pela unidade requisitante\",\n        \"Encaminhamento da demanda ao setor de licitações\",\n        \"Elaboração dos estudos técnicos preliminares\",\n        \"Análise de viabilidade e adequação orçamentária\",\n        \"Elaboração do termo de referência ou projeto básico\",\n        \"Aprovação do termo de referência pela autoridade competente\",\n        \"Designação do pregoeiro e equipe de apoio\",\n        \"Elaboração do edital de licitação\",\n        \"Análise jurídica do edital\",\n        \"Aprovação do edital pela autoridade competente\",\n        \"Publicação do aviso de licitação\",\n        \"Disponibilização do edital aos interessados\",\n        \"Período para envio de propostas\",\n        \"Sessão pública do pregão eletrônico\",\n        \"Análise e julgamento das propostas\",\n        \"Fase de lances\",\n        \"Análise da documentação do vencedor\",\n        \"Adjudicação do objeto\",\n        \"Homologação do resultado\",\n        \"Assinatura do contrato ou emissão da ordem\",\n        \"Publicação do extrato do contrato\",\n      ];\n\n      // Create steps in a single batch to avoid race conditions\n      const createSteps = async () => {\n        try {\n          const promises = defaultSteps.map((stepName) =>\n            apiRequest(\"POST\", `/api/processes/${parsedId}/steps`, {\n              stepName,\n              departmentId: process.currentDepartmentId,\n              isCompleted: false,\n            }),\n          );\n\n          await Promise.all(promises);\n\n          // Refresh steps after creation\n          queryClient.invalidateQueries({\n            queryKey: [`/api/processes/${parsedId}/steps`],\n          });\n\n          toast({\n            title: \"Checklist criado\",\n            description:\n              \"As etapas do pregão eletrônico foram criadas automaticamente.\",\n          });\n        } catch (error) {\n          console.error(\"Erro ao criar etapas padrão:\", error);\n        }\n      };\n\n      createSteps();\n    }\n  }, [process?.id, steps?.length]); // More specific dependencies\n\n  // Fetch departments for step details\n  const { data: departments } = useQuery<any[]>({\n    queryKey: [\"/api/departments\"],\n    enabled: !!process,\n  });\n\n  // Find the next incomplete step\n  const nextStep = steps?.find((step) => !step.isCompleted);\n  const stepDepartment =\n    nextStep && Array.isArray(departments)\n      ? departments.find((d: any) => d.id === nextStep.departmentId)\n      : undefined;\n\n  // Get current department from process\n  const currentDepartment =\n    process && Array.isArray(departments)\n      ? departments.find((d: any) => d.id === process.currentDepartmentId)\n      : undefined;\n\n  // Mapeamento de departamentos por ID - usando nomes exatos do banco\n  const departmentIdMap: { [key: string]: number } = {\n    TI: 1,\n    \"Setor Demandante\": 1,\n    Licitações: 2,\n    \"Núcleo de Pesquisa de Preços – NPP\": 2,\n    Jurídico: 3,\n    \"Setor Jurídico\": 3,\n    Financeiro: 4,\n    \"Unidade de Orçamento e Finanças\": 4,\n    Administrativo: 5,\n    \"Setor Administrativo\": 5,\n  };\n\n  // Function to get sector-specific steps\n  const getSectorSteps = (userDepartment: string, modalityId: number) => {\n    // Funciona para todas as modalidades de pregão\n\n    // Mapeamento dos nomes de departamentos do banco para os setores do fluxo\n    const departmentToSectorMap: { [key: string]: string } = {\n      \"Setor Demandante\": \"TI\",\n      \"Divisão de Licitação\": \"Licitações\",\n      Licitação: \"Licitações\", // Nome do departamento atual no banco\n      \"Núcleo de Pesquisa de Preços – NPP\": \"NPP\",\n      \"Unidade de Orçamento e Finanças\": \"Financeiro\",\n      \"Procuradoria Geral do Estado - PGE\": \"Jurídico\",\n      \"Secretário de Estado da Administração Penitenciária - SEAP\":\n        \"Administrativo\",\n      \"Subgerência de Contratos e  Convênios - SUBCC\": \"SUBCC\",\n      Planejamento: \"TI\", // Mapeamento para o departamento atual do usuário admin\n      TI: \"TI\",\n      Licitações: \"Licitações\",\n      Jurídico: \"Jurídico\",\n      Financeiro: \"Financeiro\",\n      Administrativo: \"Administrativo\",\n      SUBCC: \"SUBCC\",\n    };\n\n    const sector = departmentToSectorMap[userDepartment] || userDepartment;\n\n    console.log(\"getSectorSteps - Input:\", { userDepartment, modalityId });\n    console.log(\"getSectorSteps - Mapped sector:\", sector);\n\n    // Verificar se NPP completou suas etapas principais\n    const isNPPCompleted = () => {\n      const nppSteps = [\"Pesquisa de Preços\", \"Mapa Comparativo de Preços\"];\n\n      return nppSteps.every((stepName) => {\n        const step = steps?.find((s) => s.stepName === stepName);\n        return step?.isCompleted;\n      });\n    };\n\n    const stepsBySector: {\n      [key: string]: { name: string; phase: string; nextSector?: string }[];\n    } = {\n      // TI - Setor Demandante (Fase de Iniciação)\n      TI: (() => {\n        // Verificar se o processo está no Setor Demandante e tem etapa de correção completada com \"Arquivar processo\"\n        const correctionStep = steps?.find(\n          (s) =>\n            s.stepName === \"Devolver para correção ou cancelar processo\" &&\n            s.observations?.includes(\"Decisão: Arquivar processo\") &&\n            s.isCompleted === true,\n        );\n\n        // Verificar se a etapa \"Arquivar processo\" foi concluída no Setor Demandante\n        const archiveStepCompleted = steps?.find(\n          (s) =>\n            s.stepName === \"Arquivar processo\" &&\n            s.isCompleted === true,\n        );\n\n        // Se a etapa de arquivamento foi concluída, não mostrar mais nenhuma etapa no Setor Demandante\n        if (process?.currentDepartmentId === 1 && archiveStepCompleted) {\n          console.log(\n            \"🔍 SETOR DEMANDANTE - Etapa de arquivamento concluída, não exibindo etapas (processo arquivado)\",\n          );\n          return [];\n        }\n\n        // Se processo está no Setor Demandante E tem decisão de arquivamento (mas arquivamento ainda não concluído)\n        if (process?.currentDepartmentId === 1 && correctionStep) {\n          console.log(\n            \"🔍 SETOR DEMANDANTE - Processo veio de decisão de arquivamento, mostrando apenas etapa de arquivamento\",\n          );\n          return [\n            {\n              name: \"Arquivar processo\",\n              phase: \"Arquivamento\",\n            },\n          ];\n        }\n\n        // Caso contrário, mostrar etapas normais do Setor Demandante\n        return [\n          {\n            name: \"Documento de Formalização da Demanda - DFD\",\n            phase: \"Iniciação\",\n          },\n          {\n            name: \"Estudo Técnico Preliminar - ETP\",\n            phase: \"Iniciação\",\n          },\n          {\n            name: \"Mapa de Risco - MR\",\n            phase: \"Iniciação\",\n          },\n          {\n            name: \"Termo de Referência - TR\",\n            phase: \"Iniciação\",\n          },\n        ];\n      })(),\n\n      // Licitações - Divisão de Licitação (com lógica condicional simplificada)\n      Licitações: (() => {\n        // PRIORIDADE 1: Verificar se existe etapa \"Arquivar processo - Final\"\n        const archiveFinalStep = steps?.find(\n          (s) => s.stepName === \"Arquivar processo - Final\" && s.departmentId === 2\n        );\n\n        if (archiveFinalStep) {\n          if (archiveFinalStep.isCompleted) {\n            console.log(\"🔍 DIVISÃO LICITAÇÃO - Processo arquivado, sem etapas\");\n            return [];\n          } else {\n            console.log(\"🔍 DIVISÃO LICITAÇÃO - Mostrando etapa de arquivamento final\");\n            return [{ name: \"Arquivar processo - Final\", phase: \"Arquivamento\" }];\n          }\n        }\n\n        // PRIORIDADE 2: Verificar se vem do fluxo de arquivamento do Setor Demandante\n        const archiveFromDemandante = steps?.find(\n          (s) => s.stepName === \"Arquivar processo\" && s.departmentId === 1 && s.isCompleted === true\n        );\n\n        if (archiveFromDemandante && process?.currentDepartmentId === 2) {\n          console.log(\"🔍 DIVISÃO LICITAÇÃO - Criando etapa de arquivamento final\");\n          return [{ name: \"Arquivar processo - Final\", phase: \"Arquivamento\" }];\n        }\n\n        // PRIORIDADE 3: Verificar se vem do fluxo de correção (autorização rejeitada)\n        const authorizationRejected = steps?.find(\n          (s) => s.stepName === \"Autorização pelo Secretário SEAP\" && \n                 s.rejectionStatus === \"Não autorizar a defesa ou solicitar reformulação da demanda\" && \n                 s.isCompleted === true\n        );\n\n        if (authorizationRejected && process?.currentDepartmentId === 2) {\n          // Verificar qual etapa de correção mostrar\n          const correctionStep = steps?.find(\n            (s) => s.stepName === \"Devolver para correção ou cancelar processo\" && s.departmentId === 2\n          );\n          \n          console.log(\"🔍 DIVISÃO LICITAÇÃO - Fluxo de correção ativo\");\n          return [{ name: \"Devolver para correção ou cancelar processo\", phase: \"Correção\" }];\n        }\n\n        // PADRÃO: Fluxo normal da Divisão de Licitação\n        console.log(\"🔍 DIVISÃO LICITAÇÃO - Fluxo normal\");\n        return [\n          {\n            name: \"Criar Processo - Órgão\",\n            phase: \"Preparação\",\n          },\n          {\n            name: \"Fazer Pesquisa de Preço - Órgão\",\n            phase: \"Preparação\",\n          },\n          {\n            name: \"Solicitar Pesquisa de Preços\",\n            phase: \"Preparação\",\n          },\n          // Estas etapas só aparecem após NPP completar\n          ...(isNPPCompleted()\n            ? [\n                {\n                  name: \"Inserir Pesquisa no Sistema\",\n                  phase: \"Execução\",\n                },\n                {\n                  name: \"Solicitar Análise Orçamentária\",\n                  phase: \"Execução\",\n                },\n              ]\n            : []),\n        ];\n      })(),\n\n      // NPP - Núcleo de Pesquisa de Preços\n      NPP: [\n        {\n          name: \"Pesquisa de Preços\",\n          phase: \"Preparação\",\n        },\n        {\n          name: \"Mapa Comparativo de Preços\",\n          phase: \"Preparação\",\n        },\n        {\n          name: \"Metodologia da Pesquisa de Preços\",\n          phase: \"Preparação\",\n        },\n      ],\n\n      // Jurídico - Assessoria Jurídica\n      Jurídico: [\n        {\n          name: \"Análise jurídica do edital\",\n          phase: \"Preparação\",\n          nextSector: \"Financeiro\",\n        },\n        { name: \"Análise de recursos administrativos\", phase: \"Execução\" },\n        {\n          name: \"Elaboração da minuta do contrato\",\n          phase: \"Finalização\",\n          nextSector: \"Administrativo\",\n        },\n      ],\n\n      // Financeiro - Ordenador de Despesa\n      Financeiro: (() => {\n        // Verificar se existe uma etapa \"Fluxo Repror\" já completada ou se deve ser criada\n        const fluxoReprorStep = steps?.find(\n          (s) => s.stepName === \"Fluxo Repror\" && s.departmentId === 4\n        );\n\n        // Se existe uma etapa Fluxo Repror visível, mostrar só ela (modo arquivamento)\n        if (fluxoReprorStep && fluxoReprorStep.isVisible) {\n          console.log(\"🔍 FINANCEIRO - Modo arquivamento: mostrando apenas Fluxo Repror\");\n          return [\n            {\n              name: \"Fluxo Repror\",\n              phase: \"Fluxo Repror\",\n            }\n          ];\n        }\n\n        // Verificar se existe etapa \"Anexar R.O\" para este processo\n        const anexarRoStep = steps?.find(step => step.stepName === \"Anexar R.O\");\n        \n        if (anexarRoStep) {\n          console.log(\"🔍 FINANCEIRO - Etapa 'Anexar R.O' encontrada - mostrando apenas ela\");\n          return [{ name: \"Anexar R.O\", phase: \"Execução\" }];\n        }\n        \n        // Fluxo normal: mostrar apenas a etapa padrão\n        console.log(\"🔍 FINANCEIRO - Fluxo normal: etapa padrão\");\n        return [\n          {\n            name: \"Informar Disponibilidade Orçamentária p/ Emissão de R.O.\",\n            phase: \"Execução\",\n            nextSector: \"Administrativo\",\n          }\n        ];\n      })(),\n\n      // Administrativo - Secretário SEAP\n      Administrativo: (() => {\n        console.log(\"🔥 ADMINISTRATIVO - Iniciando lógica do setor\");\n        const baseSteps = [\n          {\n            name: \"Autorização pelo Secretário SEAP\",\n            phase: \"Autorização\",\n          },\n        ];\n\n        // Verificar se a autorização foi rejeitada com \"Não autorizar a defesa ou solicitar reformulação da demanda\"\n        const authStep = steps?.find(\n          (s) => s.stepName === \"Autorização pelo Secretário SEAP\",\n        );\n        \n        console.log(\"🔥 ADMINISTRATIVO - AuthStep encontrado:\", {\n          found: !!authStep,\n          isCompleted: authStep?.isCompleted,\n          rejectionStatus: authStep?.rejectionStatus\n        });\n        \n        const isRejectedForCorrection = authStep?.isCompleted && \n          authStep?.rejectionStatus === \"Não autorizar a defesa ou solicitar reformulação da demanda\";\n\n        // REMOVIDO: Não criar automaticamente aqui para evitar duplicação\n        // A etapa será criada/tornada visível apenas quando necessário no modal de rejeição\n        \n        console.log(\"🔥 ADMINISTRATIVO - Steps finais:\", baseSteps.map(s => s.name));\n        \n        // Debug: Verificar se a etapa condicional deve aparecer\n        if (isRejectedForCorrection) {\n          console.log(\"🔥 ADMINISTRATIVO - Condição de rejeição atendida, etapa condicional deve ser tratada pelo modal de autorização\");\n        }\n\n        // Verificar se a autorização foi aprovada com \"Disponibilidade Orçamentária\"\n        const isAuthorizedWithBudget =\n          authStep?.isCompleted &&\n          authStep?.observations?.includes(\"Disponibilidade Orçamentária\");\n\n        // Verificar se a autorização foi CONFIRMADA com indisponibilidade orçamentária\n        const isAuthorizedWithoutBudget =\n          authStep?.isCompleted &&\n          authStep?.observations &&\n          (authStep.observations.includes(\n            \"Indisponibilidade Orçamentária Total\",\n          ) ||\n            authStep.observations.includes(\n              \"Indisponibilidade Orçamentária Parcial\",\n            ) ||\n            authStep.observations.includes(\n              \"Indisponibilidade Orçamentária total ou parcial\",\n            ) ||\n            authStep.observations.includes(\n              \"Autorização: Indisponibilidade Orçamentária Total\",\n            ) ||\n            authStep.observations.includes(\n              \"Autorização: Indisponibilidade Orçamentária Parcial\",\n            ) ||\n            authStep.observations.includes(\n              \"Autorização: Indisponibilidade Orçamentária total ou parcial\",\n            ));\n\n        // Só adicionar a etapa \"Autorizar Emissão de R.O\" se a autorização foi aprovada com disponibilidade orçamentária\n        if (isAuthorizedWithBudget) {\n          baseSteps.push({\n            name: \"Autorizar Emissão de R.O\",\n            phase: \"Execução\",\n          });\n          \n          // Verificar se existe etapa \"Autorizar via sistema\" criada E se a etapa \"Autorizar Emissão de R.O\" foi concluída com \"Autorizar\"\n          const authorizeSystemStep = steps?.find(s => s.stepName === \"Autorizar via sistema\");\n          const authorizeRoStep = steps?.find(s => s.stepName === \"Autorizar Emissão de R.O\");\n          \n          if (authorizeSystemStep && authorizeRoStep?.isCompleted && \n              authorizeRoStep.observations?.includes(\"Autorizar Emissão de R.O: Autorizar\")) {\n            baseSteps.push({\n              name: \"Autorizar via sistema\",\n              phase: \"Execução\",\n            });\n          }\n        }\n\n        // Só adicionar a etapa \"Solicitar disponibilização de orçamento\" se a autorização foi negada com indisponibilidade orçamentária\n        if (isAuthorizedWithoutBudget) {\n          baseSteps.push({\n            name: \"Solicitar disponibilização de orçamento\",\n            phase: \"Preparação\",\n          });\n        }\n\n        return baseSteps;\n      })(),\n\n      // SUBCC - Subgerência de Contratos e Convênios\n      SUBCC: [\n        {\n          name: \"Fluxo reavaliação do plano de trabalho\",\n          phase: \"Reavaliação\",\n        },\n      ],\n    };\n\n    const result = stepsBySector[sector] || [];\n    console.log(\n      \"getSectorSteps - stepsBySector keys:\",\n      Object.keys(stepsBySector),\n    );\n    console.log(\"getSectorSteps - Final result:\", result);\n    return result;\n  };\n\n  // Function to get next sector for a step\n  const getNextSectorForStep = (stepName: string) => {\n    const allSteps = [\n      ...getSectorSteps(\"TI\", 1),\n      ...getSectorSteps(\"Licitações\", 1),\n      ...getSectorSteps(\"Jurídico\", 1),\n      ...getSectorSteps(\"Financeiro\", 1),\n      ...getSectorSteps(\"Administrativo\", 1),\n    ];\n\n    const step = allSteps.find((s) => s.name === stepName);\n    return step?.nextSector;\n  };\n\n  // Function to calculate deadlines by phase based on the bidding flowchart\n  const getPhaseDeadlines = (processCreatedAt: Date) => {\n    const createdDate = new Date(processCreatedAt);\n\n    return {\n      Iniciação: {\n        name: \"Fase de Iniciação\",\n        description:\n          \"Identificação da demanda até aprovação do termo de referência\",\n        deadline: new Date(createdDate.getTime() + 15 * 24 * 60 * 60 * 1000), // 15 dias\n        color: \"blue\",\n      },\n      Preparação: {\n        name: \"Fase de Preparação\",\n        description: \"Elaboração e aprovação do edital\",\n        deadline: new Date(createdDate.getTime() + 25 * 24 * 60 * 60 * 1000), // 25 dias\n        color: \"yellow\",\n      },\n      Execução: {\n        name: \"Fase de Execução\",\n        description: \"Publicação do edital até habilitação dos licitantes\",\n        deadline: new Date(createdDate.getTime() + 45 * 24 * 60 * 60 * 1000), // 45 dias\n        color: \"orange\",\n      },\n      Finalização: {\n        name: \"Fase de Finalização\",\n        description: \"Adjudicação até assinatura do contrato\",\n        deadline: new Date(createdDate.getTime() + 60 * 24 * 60 * 60 * 1000), // 60 dias\n        color: \"green\",\n      },\n    };\n  };\n\n  // Get current phase based on user department\n  const getCurrentPhase = (userDepartment: string) => {\n    const phaseMap: { [key: string]: string } = {\n      TI: \"Iniciação\",\n      Licitações: \"Preparação\",\n      Jurídico: \"Preparação\",\n      Financeiro: \"Iniciação\",\n      Administrativo: \"Finalização\",\n    };\n    return phaseMap[userDepartment] || \"Iniciação\";\n  };\n\n  // Handle edit process\n  const handleEdit = () => {\n    setLocation(`/processes/${id}/edit`);\n  };\n\n  // Handle step toggle\n  const handleStepToggle = async (stepId: number, isCompleted: boolean) => {\n    try {\n      console.log(\n        `🔍 ProcessDetail handleStepToggle: ${stepId} para isCompleted: ${isCompleted}`,\n      );\n\n      const step = steps?.find((s) => s.id === stepId);\n      if (!step) return;\n\n      // Verificar se é a etapa de Autorização pelo Secretário SEAP\n      if (\n        step.stepName.includes(\"Autorização pelo Secretário SEAP\") &&\n        isCompleted\n      ) {\n        console.log(\n          \"🔥 ProcessDetail - Etapa de Autorização detectada - abrindo modal de autorização\",\n        );\n        setStepForAuthorization(step);\n        setAuthorizationModalOpen(true);\n        setAuthorizationDecision(\"\"); // Limpar seleção anterior\n        return; // NÃO CONTINUA - Etapa só será concluída após escolher opção no modal\n      }\n\n      const response = await apiRequest(\n        \"PATCH\",\n        `/api/processes/${parsedId}/steps/${stepId}`,\n        {\n          isCompleted,\n        },\n      );\n\n      if (response.ok) {\n        console.log(\"Etapa atualizada com sucesso\");\n\n        // Se a etapa \"Autorizar Emissão de R.O\" foi completada, apenas mostrar mensagem\n        if (isCompleted && step.stepName === \"Autorizar Emissão de R.O\") {\n          console.log(\n            \"🔥 ProcessDetail - Etapa 'Autorizar Emissão de R.O' completada\",\n          );\n\n          toast({\n            title: \"✅ Etapa Concluída\",\n            description:\n              \"Etapa 'Autorizar Emissão de R.O' foi concluída com sucesso\",\n          });\n        } else {\n          toast({\n            title: isCompleted ? \"Etapa concluída\" : \"Etapa desmarcada\",\n            description: isCompleted\n              ? \"A etapa foi marcada como concluída.\"\n              : \"A etapa foi desmarcada.\",\n          });\n        }\n\n        // Invalidate queries to refresh data\n        queryClient.invalidateQueries({\n          queryKey: [`/api/processes/${parsedId}/steps`],\n        });\n      } else {\n        console.error(\"Erro na resposta:\", response.status);\n        throw new Error(`HTTP ${response.status}`);\n      }\n    } catch (error) {\n      console.error(\"Erro ao atualizar etapa:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível atualizar a etapa.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Função para rejeitar autorização (baseada na função de aprovação)\n  const handleAuthorizationRejection = async () => {\n    console.log(\"🔥 MODAL REJEIÇÃO - Função chamada!\", {\n      stepForAuthorizationRejection,\n      authorizationRejectionDecision,\n    });\n\n    if (!stepForAuthorizationRejection || !authorizationRejectionDecision) {\n      console.log(\"🔥 MODAL REJEIÇÃO - Validação falhou:\", {\n        stepForAuthorizationRejection: !!stepForAuthorizationRejection,\n        authorizationRejectionDecision: !!authorizationRejectionDecision,\n      });\n      return;\n    }\n\n    try {\n      console.log(\n        \"🔥🔥🔥 ProcessDetail - Rejeitando autorização com decisão:\",\n        authorizationRejectionDecision,\n      );\n\n      let stepId = stepForAuthorizationRejection.id;\n\n      // Se não tem ID, criar a etapa primeiro\n      if (!stepId) {\n        console.log(\"🔥🔥🔥 ProcessDetail - Criando etapa antes de rejeitar\");\n        const createResponse = await apiRequest(\n          \"POST\",\n          `/api/processes/${parsedId}/steps`,\n          {\n            stepName: stepForAuthorizationRejection.stepName,\n            departmentId: stepForAuthorizationRejection.departmentId,\n            isVisible: true,\n            isCompleted: false,\n          },\n        );\n\n        if (createResponse.ok) {\n          const newStep = await createResponse.json();\n          stepId = newStep.id;\n          console.log(\"🔥🔥🔥 ProcessDetail - Etapa criada com ID:\", stepId);\n        } else {\n          throw new Error(\"Erro ao criar etapa\");\n        }\n      }\n\n      const response = await apiRequest(\n        \"PATCH\",\n        `/api/processes/${parsedId}/steps/${stepId}`,\n        {\n          isCompleted: true,\n          observations: `REJEIÇÃO: ${authorizationRejectionDecision}`,\n          rejectedAt: new Date().toISOString(),\n          rejectionStatus: authorizationRejectionDecision,\n          userId: currentUser?.id,\n        },\n      );\n\n      if (response.ok) {\n        console.log(\n          \"🔍 ProcessDetail - Decisão de rejeição tomada:\",\n          authorizationRejectionDecision,\n        );\n\n        // Se a decisão for \"Não autorizar a defesa\", criar etapa intermediária no mesmo setor\n        if (\n          authorizationRejectionDecision ===\n          \"Não autorizar a defesa ou solicitar reformulação da demanda\"\n        ) {\n          console.log(\n            \"🔥🔥🔥 ProcessDetail - Tornando visível etapa 'Devolver para correção ou arquivamento'\",\n          );\n\n          try {\n            // Buscar todas as etapas (incluindo invisíveis) para encontrar a etapa existente\n            const stepsResponse = await fetch(`/api/processes/${parsedId}/steps/all`);\n            if (stepsResponse.ok) {\n              const allSteps = await stepsResponse.json();\n              const intermediateStep = allSteps.find(\n                (s: any) => s.stepName === \"Devolver para correção ou arquivamento\" && s.departmentId === 5 // Secretário de Estado\n              );\n\n              if (intermediateStep) {\n                console.log(\n                  \"✅ ProcessDetail - Etapa 'Devolver para correção ou arquivamento' encontrada, tornando visível\"\n                );\n                \n                // Tornar a etapa visível no próprio Secretário de Estado\n                const updateResponse = await apiRequest(\n                  \"PATCH\",\n                  `/api/processes/${parsedId}/steps/${intermediateStep.id}`,\n                  {\n                    isVisible: true,\n                  }\n                );\n                \n                if (updateResponse.ok) {\n                  console.log(\"✅✅✅ ProcessDetail - Etapa 'Devolver para correção ou arquivamento' tornada visível com sucesso no Secretário de Estado\");\n                  \n                  // Recarregar dados para mostrar a etapa visível\n                  queryClient.invalidateQueries({\n                    queryKey: [`/api/processes/${parsedId}/steps`],\n                  });\n                  \n                  // NÃO transferir automaticamente - usuário deve fazer tramitação manual\n                }\n              } else {\n                console.log(\"⚠️ ProcessDetail - Etapa 'Devolver para correção ou arquivamento' não encontrada, criando nova etapa\");\n                \n                // Criar a etapa se não existir\n                const createResponse = await apiRequest(\n                  \"POST\",\n                  `/api/processes/${parsedId}/steps`,\n                  {\n                    stepName: \"Devolver para correção ou arquivamento\",\n                    departmentId: 5, // Secretário de Estado\n                    isCompleted: false,\n                    isVisible: true,\n                    observations: null,\n                  }\n                );\n                \n                if (createResponse.ok) {\n                  console.log(\"✅✅✅ ProcessDetail - Etapa 'Devolver para correção ou arquivamento' criada com sucesso no Secretário de Estado\");\n                  \n                  // Recarregar dados para mostrar a nova etapa\n                  queryClient.invalidateQueries({\n                    queryKey: [`/api/processes/${parsedId}/steps`],\n                  });\n                  \n                } else {\n                  console.error(\"❌ ProcessDetail - Erro ao criar etapa 'Devolver para correção ou arquivamento'\");\n                }\n              }\n            }\n          } catch (intermediateStepError) {\n            console.error(\n              \"❌ ProcessDetail - Erro ao tornar etapa visível:\",\n              intermediateStepError,\n            );\n          }\n        }\n\n        // Se a decisão for sobre recurso de convênio, tornar visível a etapa \"Solicitar ajuste/aditivo do plano de trabalho\"\n        if (\n          authorizationRejectionDecision ===\n          \"Recurso de convênio insuficiente - Valor estimado na pesquisa maior que o valor conveniado\"\n        ) {\n          console.log(\n            \"🔥🔥🔥 ProcessDetail - Tornando visível etapa 'Solicitar ajuste/aditivo do plano de trabalho' para ajuste de convênio\",\n          );\n\n          try {\n            // Buscar todas as etapas (incluindo invisíveis) para encontrar a etapa condicional\n            const stepsResponse = await fetch(\n              `/api/processes/${parsedId}/steps/all`,\n            );\n            if (stepsResponse.ok) {\n              const allSteps = await stepsResponse.json();\n              const ajusteStep = allSteps.find(\n                (s: any) =>\n                  s.stepName ===\n                    \"Solicitar ajuste/aditivo do plano de trabalho\" &&\n                  s.isVisible === false,\n              );\n\n              if (ajusteStep) {\n                // Tornar a etapa visível\n                console.log(\n                  \"🔥🔥🔥 ProcessDetail - Tornando etapa 'Solicitar ajuste/aditivo do plano de trabalho' visível\",\n                );\n                const updateResponse = await apiRequest(\n                  \"PATCH\",\n                  `/api/processes/${parsedId}/steps/${ajusteStep.id}`,\n                  {\n                    isVisible: true,\n                  },\n                );\n\n                if (updateResponse.ok) {\n                  console.log(\n                    \"✅✅✅ ProcessDetail - Etapa 'Solicitar ajuste/aditivo do plano de trabalho' tornada visível com sucesso\",\n                  );\n                } else {\n                  console.error(\n                    \"❌❌❌ ProcessDetail - Erro ao tornar etapa 'Solicitar ajuste/aditivo do plano de trabalho' visível\",\n                  );\n                }\n              } else {\n                console.log(\n                  \"⚠️ ProcessDetail - Etapa 'Solicitar ajuste/aditivo do plano de trabalho' não encontrada\",\n                );\n              }\n            }\n          } catch (etapasError) {\n            console.error(\n              \"❌ ProcessDetail - Erro ao verificar/atualizar etapa de ajuste:\",\n              etapasError,\n            );\n          }\n        }\n\n        await queryClient.invalidateQueries({\n          queryKey: [`/api/processes/${parsedId}`],\n        });\n        await queryClient.invalidateQueries({\n          queryKey: [`/api/processes/${parsedId}/steps`],\n        });\n\n        // Toast removido conforme solicitado\n        // toast({\n        //   title: \"❌ Etapa Rejeitada\",\n        //   description:\n        //     authorizationRejectionDecision === \"Não autorizar a defesa ou solicitar reformulação da demanda\"\n        //       ? `Rejeição: ${authorizationRejectionDecision}. Etapa de correção criada automaticamente.`\n        //       : authorizationRejectionDecision === \"Recurso de convênio insuficiente - Valor estimado na pesquisa maior que o valor conveniado\"\n        //         ? `Rejeição: ${authorizationRejectionDecision}. Etapa de ajuste criada automaticamente.`\n        //         : `Rejeição: ${authorizationRejectionDecision}`,\n        //   variant: \"destructive\",\n        // });\n\n        // Fechar modal e limpar estados\n        setAuthorizationRejectionModalOpen(false);\n        setAuthorizationRejectionDecision(\"\");\n        setStepForAuthorizationRejection(null);\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao rejeitar autorização\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Função para lidar com etapas de correção (apenas concluir etapa)\n  const handleCorrectionStepComplete = async (step: any, stepName: string) => {\n    try {\n      console.log(\n        `🔄 ProcessDetail - Concluindo etapa de correção: ${stepName}`,\n      );\n\n      // Marcar a etapa de correção como concluída\n      await apiRequest(\"PATCH\", `/api/processes/${parsedId}/steps/${step.id}`, {\n        isCompleted: true,\n        observations: `Correção finalizada: ${stepName} - Pronto para tramitação manual`,\n        userId: 1,\n      });\n\n      // Invalidar cache\n      queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${parsedId}/steps`],\n      });\n\n      toast({\n        title: \"✅ Etapa Concluída\",\n        description: `${stepName} concluída. Use o botão \"Tramitar\" para transferir o processo.`,\n      });\n    } catch (error) {\n      console.error(\"Erro ao concluir etapa:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao concluir a etapa\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Função para completar correção depois de escolher a opção\n  const handleCorrectionComplete = async () => {\n    console.log(\"🔥 MODAL CORREÇÃO - Função chamada!\", {\n      stepForCorrection,\n      correctionDecision,\n    });\n\n    if (!stepForCorrection || !correctionDecision) {\n      console.log(\"🔥 MODAL CORREÇÃO - Validação falhou:\", {\n        stepForCorrection: !!stepForCorrection,\n        correctionDecision: !!correctionDecision,\n      });\n      return;\n    }\n\n    try {\n      console.log(\n        \"🔥🔥🔥 ProcessDetail - Completando correção com decisão:\",\n        correctionDecision,\n      );\n\n      // Marcar a etapa de correção como concluída\n      await apiRequest(\n        \"PATCH\",\n        `/api/processes/${parsedId}/steps/${stepForCorrection.id}`,\n        {\n          isCompleted: true,\n          observations: `Decisão: ${correctionDecision}`,\n          userId: currentUser?.id,\n        },\n      );\n\n      if (\n        correctionDecision ===\n        \"Encaminhar ao documento de formalização da demanda novamente\"\n      ) {\n        toast({\n          title: \"✅ Decisão Registrada\",\n          description:\n            \"Decisão registrada. Use o botão 'Tramitar' para transferir o processo ao setor apropriado para reiniciar o fluxo.\",\n        });\n      } else if (correctionDecision === \"Arquivar processo\") {\n        // NÃO transferir automaticamente - usuário deve fazer tramitação manual\n        \n        toast({\n          title: \"✅ Decisão Registrada\",\n          description: \"Decisão registrada. Use o botão 'Tramitar' para transferir o processo ao setor apropriado para arquivamento.\",\n        });\n      }\n\n      // Fechar modal e limpar estados\n      setCorrectionModalOpen(false);\n      setCorrectionDecision(\"\");\n      setStepForCorrection(null);\n\n      // Invalidar cache para garantir atualização\n      queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${parsedId}/steps`],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${parsedId}`],\n      });\n    } catch (error) {\n      console.error(\"Erro ao completar correção:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao processar a decisão de correção\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Função para arquivar processo por autorização via sistema\n  const handleAutorizarViaSistema = async () => {\n    console.log(\"🔥 MODAL AUTORIZAR VIA SISTEMA - Função chamada!\", {\n      stepForAutorizarViaSistema,\n    });\n\n    if (!stepForAutorizarViaSistema) {\n      console.log(\"🔥 MODAL AUTORIZAR VIA SISTEMA - Validação falhou\");\n      return;\n    }\n\n    try {\n      console.log(\n        \"🔥🔥🔥 ProcessDetail - Autorizando via sistema e criando etapa Anexar R.O\",\n      );\n\n      // Criar etapa se não existir\n      let stepId = stepForAutorizarViaSistema.id;\n      if (!stepId) {\n        console.log(\"🔥🔥🔥 ProcessDetail - Criando etapa Autorizar via sistema\");\n        const createResponse = await apiRequest(\n          \"POST\",\n          `/api/processes/${parsedId}/steps`,\n          {\n            stepName: \"Autorizar via sistema\",\n            departmentId: process?.currentDepartmentId || 5,\n            isVisible: true,\n            isCompleted: false,\n          },\n        );\n\n        if (createResponse.ok) {\n          const newStep = await createResponse.json();\n          stepId = newStep.id;\n          console.log(\"🔥🔥🔥 ProcessDetail - Etapa criada com ID:\", stepId);\n        } else {\n          throw new Error(\"Erro ao criar etapa\");\n        }\n      }\n\n      // Completar a etapa\n       await apiRequest(\n        \"PATCH\",\n        `/api/processes/${parsedId}/steps/${stepId}`,\n        {\n          isCompleted: true,\n          observations: \"Autorizado via sistema - Secretário de Estado da Administração Penitenciária - SEAP\",\n          userId: currentUser?.id,\n        },\n      );\n\n      console.log(\"✅ Etapa 'Autorizar via sistema' concluída, criando etapa 'Anexar R.O'\");\n      \n      // Criar etapa \"Anexar R.O\" na Unidade de Orçamento e Finanças (departmentId: 4)\n      const createAnexarRoResponse = await apiRequest(\n        \"POST\",\n        `/api/processes/${parsedId}/steps`,\n        {\n          stepName: \"Anexar R.O\",\n          departmentId: 4, // Unidade de Orçamento e Finanças\n          isVisible: true,\n          isCompleted: false,\n        },\n      );\n\n      if (createAnexarRoResponse.ok) {\n        console.log(\"✅ Etapa 'Anexar R.O' criada com sucesso!\");\n        \n        // Transferir processo para Unidade de Orçamento e Finanças\n        const transferResponse = await apiRequest(\n          \"PATCH\",\n          `/api/processes/${parsedId}/transfer`,\n          {\n            targetDepartmentId: 4, // Unidade de Orçamento e Finanças\n            comments: \"Processo transferido após autorização via sistema para anexar R.O\",\n          },\n        );\n\n        if (transferResponse.ok) {\n          console.log(\"✅ Processo transferido para Unidade de Orçamento e Finanças!\");\n          \n          // Atualizar o processo no estado local para refletir a transferência\n          const updatedProcess = { ...process, currentDepartmentId: 4 };\n          \n          // Fechar modal e limpar estados\n          setAutorizarViaSistemaModalOpen(false);\n          setStepForAutorizarViaSistema(null);\n\n          // Invalidar cache para garantir atualização\n          queryClient.invalidateQueries({\n            queryKey: [`/api/processes/${parsedId}/steps`],\n          });\n          queryClient.invalidateQueries({\n            queryKey: [`/api/processes/${parsedId}`],\n          });\n          queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n\n          toast({\n            title: \"✅ Processo Autorizado\",\n            description: \"Processo autorizado via sistema e preparado para tramitação manual para a Unidade de Orçamento e Finanças.\",\n          });\n        } else {\n          throw new Error(\"Falha ao transferir processo\");\n        }\n      } else {\n        throw new Error(\"Falha ao criar etapa 'Anexar R.O'\");\n      }\n\n    } catch (error) {\n      console.error(\"Erro ao arquivar processo por autorização via sistema:\", error);\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao arquivar processo por autorização via sistema\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Função para arquivar processo por reavaliação SUBCC\n  const handleSubccRevaluation = async () => {\n    console.log(\"🔥 MODAL SUBCC REAVALIAÇÃO - Função chamada!\", {\n      stepForSubccRevaluation,\n    });\n\n    if (!stepForSubccRevaluation) {\n      console.log(\"🔥 MODAL SUBCC REAVALIAÇÃO - Validação falhou\");\n      return;\n    }\n\n    try {\n      console.log(\n        \"🔥🔥🔥 ProcessDetail - Arquivando processo por reavaliação SUBCC\",\n      );\n\n      // Criar etapa se não existir\n      let stepId = stepForSubccRevaluation.id;\n      if (!stepId) {\n        console.log(\"🔥🔥🔥 ProcessDetail - Criando etapa de reavaliação SUBCC\");\n        const createResponse = await apiRequest(\n          \"POST\",\n          `/api/processes/${parsedId}/steps`,\n          {\n            stepName: \"Fluxo reavaliação do plano de trabalho\",\n            departmentId: process?.currentDepartmentId || 11,\n            isVisible: true,\n            isCompleted: false,\n          },\n        );\n\n        if (createResponse.ok) {\n          const newStep = await createResponse.json();\n          stepId = newStep.id;\n          console.log(\"🔥🔥🔥 ProcessDetail - Etapa criada com ID:\", stepId);\n        } else {\n          throw new Error(\"Erro ao criar etapa\");\n        }\n      }\n\n      // Completar a etapa\n       await apiRequest(\n        \"PATCH\",\n        `/api/processes/${parsedId}/steps/${stepId}`,\n        {\n          isCompleted: true,\n          observations: \"Processo arquivado por reavaliação - SUBCC\",\n          userId: currentUser?.id,\n        },\n      );\n\n      // Arquivar o processo (soft delete para aba Arquivados)\n      await apiRequest(\"DELETE\", `/api/processes/${parsedId}`, {\n        deletionReason: \"Arquivado por processo em reavaliação pela Subgerência de Contratos e Convênios - SUBCC\",\n      });\n\n      // Fechar modal e limpar estados\n      setSubccRevaluationModalOpen(false);\n      setStepForSubccRevaluation(null);\n\n      // Invalidar cache para garantir atualização\n      queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${parsedId}/steps`],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${parsedId}`],\n      });\n\n      toast({\n        title: \"✅ Processo Arquivado\",\n        description: \"Processo foi arquivado por reavaliação SUBCC e movido para a aba 'Arquivados'. Redirecionando...\",\n      });\n\n      // Redirecionar para página de processos\n      setTimeout(() => {\n        window.location.href = \"/processes\";\n      }, 2000);\n\n    } catch (error) {\n      console.error(\"Erro ao arquivar processo por reavaliação SUBCC:\", error);\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao arquivar processo por reavaliação SUBCC\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Função para arquivar processo por Fluxo Repror\n  const handleFluxoReprorArchive = async () => {\n    console.log(\"🔥 MODAL FLUXO REPROR - Função chamada!\", {\n      stepForFluxoRepror,\n    });\n\n    if (!stepForFluxoRepror) {\n      console.log(\"🔥 MODAL FLUXO REPROR - Validação falhou\");\n      return;\n    }\n\n    try {\n      console.log(\n        \"🔥🔥🔥 ProcessDetail - Arquivando processo por Fluxo Repror\",\n      );\n\n      // Criar etapa se não existir\n      let stepId = stepForFluxoRepror.id;\n      if (!stepId) {\n        console.log(\"🔥🔥🔥 ProcessDetail - Criando etapa de Fluxo Repror\");\n        const createResponse = await apiRequest(\n          \"POST\",\n          `/api/processes/${parsedId}/steps`,\n          {\n            stepName: \"Fluxo Repror\",\n            departmentId: process?.currentDepartmentId || 4,\n            isVisible: true,\n            isCompleted: false,\n          },\n        );\n\n        if (createResponse.ok) {\n          const newStep = await createResponse.json();\n          stepId = newStep.id;\n          console.log(\"🔥🔥🔥 ProcessDetail - Etapa criada com ID:\", stepId);\n        } else {\n          throw new Error(\"Erro ao criar etapa\");\n        }\n      }\n\n      // Completar a etapa\n      await apiRequest(\n        \"PATCH\",\n        `/api/processes/${parsedId}/steps/${stepId}`,\n        {\n          isCompleted: true,\n          observations: \"Processo arquivado por reavaliação - Unidade de Orçamento e Finanças\",\n          userId: currentUser?.id,\n        },\n      );\n\n      // Arquivar o processo (soft delete para aba Arquivados)\n      await apiRequest(\"DELETE\", `/api/processes/${parsedId}`, {\n        deletionReason: \"Arquivado por processo em reavaliação pela Unidade de Orçamento e Finanças\",\n      });\n\n      // Fechar modal e limpar estados\n      setFluxoReprorModalOpen(false);\n      setStepForFluxoRepror(null);\n\n      // Invalidar cache para garantir atualização\n      queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${parsedId}/steps`],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${parsedId}`],\n      });\n\n      toast({\n        title: \"✅ Processo Arquivado\",\n        description: \"Processo foi arquivado por reavaliação pela Unidade de Orçamento e Finanças e movido para a aba 'Arquivados'. Redirecionando...\",\n      });\n\n      // Redirecionar para página de processos\n      setTimeout(() => {\n        window.location.href = \"/processes\";\n      }, 2000);\n\n    } catch (error) {\n      console.error(\"Erro ao arquivar processo por Fluxo Repror:\", error);\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao arquivar processo por Fluxo Repror\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Função para arquivar processo final\n  const handleArchiveProcess = async () => {\n    console.log(\"🔥 MODAL ARQUIVAMENTO - Função chamada!\", {\n      stepForArchive,\n    });\n\n    if (!stepForArchive) {\n      console.log(\"🔥 MODAL ARQUIVAMENTO - Validação falhou\");\n      return;\n    }\n\n    try {\n      console.log(\n        \"🔥🔥🔥 ProcessDetail - Arquivando processo definitivamente\",\n      );\n\n      // Criar etapa se não existir\n      let stepId = stepForArchive.id;\n      if (!stepId) {\n        console.log(\"🔥🔥🔥 ProcessDetail - Criando etapa de arquivamento final\");\n        const createResponse = await apiRequest(\n          \"POST\",\n          `/api/processes/${parsedId}/steps`,\n          {\n            stepName: \"Arquivar processo - Final\",\n            departmentId: process?.currentDepartmentId || 2,\n            isVisible: true,\n            isCompleted: false,\n          },\n        );\n\n        if (createResponse.ok) {\n          const newStep = await createResponse.json();\n          stepId = newStep.id;\n          console.log(\"🔥🔥🔥 ProcessDetail - Etapa criada com ID:\", stepId);\n        } else {\n          throw new Error(\"Erro ao criar etapa\");\n        }\n      }\n\n      // Completar a etapa\n      await apiRequest(\n        \"PATCH\",\n        `/api/processes/${parsedId}/steps/${stepId}`,\n        {\n          isCompleted: true,\n          observations: \"Processo arquivado - Não autorizado pelo Secretário de Estado da Administração - SEAP\",\n          userId: currentUser?.id,\n        },\n      );\n\n      // Arquivar o processo (soft delete para aba Arquivados)\n      await apiRequest(\"DELETE\", `/api/processes/${parsedId}`, {\n        deletionReason: \"Arquivado por processo não autorizado pelo Secretário de Estado da Administração - SEAP\",\n      });\n\n      // Fechar modal e limpar estados\n      setArchiveModalOpen(false);\n      setStepForArchive(null);\n\n      // Invalidar cache para garantir atualização\n      queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${parsedId}/steps`],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${parsedId}`],\n      });\n\n      toast({\n        title: \"✅ Processo Arquivado\",\n        description: \"Processo foi arquivado e movido para a aba 'Arquivados'. Redirecionando...\",\n      });\n\n      // Redirecionar para página de processos\n      setTimeout(() => {\n        window.location.href = \"/processes\";\n      }, 2000);\n\n    } catch (error) {\n      console.error(\"Erro ao arquivar processo:\", error);\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao arquivar processo\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Função para completar autorização depois de escolher a opção\n  const handleAuthorizationComplete = async () => {\n    console.log(\"🔥 MODAL AUTORIZAÇÃO - Função chamada!\", {\n      stepForAuthorization,\n      authorizationDecision,\n    });\n\n    if (!stepForAuthorization || !authorizationDecision) {\n      console.log(\"🔥 MODAL AUTORIZAÇÃO - Validação falhou:\", {\n        stepForAuthorization: !!stepForAuthorization,\n        authorizationDecision: !!authorizationDecision,\n      });\n      return;\n    }\n\n    try {\n      console.log(\n        \"🔥🔥🔥 ProcessDetail - Completando autorização com decisão:\",\n        authorizationDecision,\n      );\n\n      const response = await apiRequest(\n        \"PATCH\",\n        `/api/processes/${parsedId}/steps/${stepForAuthorization.id}`,\n        {\n          isCompleted: true,\n          observations: `Autorização: ${authorizationDecision}`,\n          userId: currentUser?.id,\n        },\n      );\n\n      if (response.ok) {\n        // Se a decisão for \"Disponibilidade Orçamentária\", tornar visível a etapa \"Autorizar Emissão de R.O\"\n        if (authorizationDecision === \"Disponibilidade Orçamentária\") {\n          console.log(\n            \"🔥🔥🔥 ProcessDetail - Tornando visível etapa 'Autorizar Emissão de R.O' para disponibilidade orçamentária\",\n          );\n\n          try {\n            // Buscar todas as etapas (incluindo invisíveis) para encontrar a etapa condicional\n            const stepsResponse = await fetch(\n              `/api/processes/${parsedId}/steps/all`,\n            );\n            if (stepsResponse.ok) {\n              const allSteps = await stepsResponse.json();\n              const authRoStep = allSteps.find(\n                (s: any) =>\n                  s.stepName === \"Autorizar Emissão de R.O\" &&\n                  s.isVisible === false,\n              );\n\n              if (authRoStep) {\n                // Tornar a etapa visível\n                console.log(\n                  \"🔥🔥🔥 ProcessDetail - Tornando etapa 'Autorizar Emissão de R.O' visível\",\n                );\n                const updateResponse = await apiRequest(\n                  \"PATCH\",\n                  `/api/processes/${parsedId}/steps/${authRoStep.id}`,\n                  {\n                    isVisible: true,\n                  },\n                );\n\n                if (updateResponse.ok) {\n                  console.log(\n                    \"✅✅✅ ProcessDetail - Etapa 'Autorizar Emissão de R.O' tornada visível com sucesso\",\n                  );\n                } else {\n                  console.error(\n                    \"❌❌❌ ProcessDetail - Erro ao tornar etapa 'Autorizar Emissão de R.O' visível\",\n                  );\n                }\n              } else {\n                console.log(\n                  \"⚠️ ProcessDetail - Etapa 'Autorizar Emissão de R.O' não encontrada\",\n                );\n              }\n            }\n          } catch (etapasError) {\n            console.error(\n              \"❌ ProcessDetail - Erro ao verificar/atualizar etapa:\",\n              etapasError,\n            );\n          }\n        }\n\n        // Se a decisão for indisponibilidade orçamentária, tornar visível a etapa \"Solicitar disponibilização de orçamento\"\n        if (\n          authorizationDecision === \"Indisponibilidade Orçamentária Total\" ||\n          authorizationDecision === \"Indisponibilidade Orçamentária Parcial\" ||\n          authorizationDecision ===\n            \"Indisponibilidade Orçamentária total ou parcial\"\n        ) {\n          console.log(\n            \"🔥🔥🔥 ProcessDetail - Tornando visível etapa 'Solicitar disponibilização de orçamento' para indisponibilidade orçamentária\",\n          );\n\n          try {\n            // Buscar todas as etapas (incluindo invisíveis) para encontrar a etapa condicional\n            const stepsResponse = await fetch(\n              `/api/processes/${parsedId}/steps/all`,\n            );\n            if (stepsResponse.ok) {\n              const allSteps = await stepsResponse.json();\n              const solicitarOrcamentoStep = allSteps.find(\n                (s: any) =>\n                  s.stepName === \"Solicitar disponibilização de orçamento\" &&\n                  s.isVisible === false,\n              );\n\n              if (solicitarOrcamentoStep) {\n                // Tornar a etapa visível\n                console.log(\n                  \"🔥🔥🔥 ProcessDetail - Tornando etapa 'Solicitar disponibilização de orçamento' visível\",\n                );\n                const updateResponse = await apiRequest(\n                  \"PATCH\",\n                  `/api/processes/${parsedId}/steps/${solicitarOrcamentoStep.id}`,\n                  {\n                    isVisible: true,\n                  },\n                );\n\n                if (updateResponse.ok) {\n                  console.log(\n                    \"✅✅✅ ProcessDetail - Etapa 'Solicitar disponibilização de orçamento' tornada visível com sucesso\",\n                  );\n                } else {\n                  console.error(\n                    \"❌❌❌ ProcessDetail - Erro ao tornar etapa 'Solicitar disponibilização de orçamento' visível\",\n                  );\n                }\n              } else {\n                console.log(\n                  \"⚠️ ProcessDetail - Etapa 'Solicitar disponibilização de orçamento' não encontrada\",\n                );\n              }\n            }\n          } catch (etapasError) {\n            console.error(\n              \"❌ ProcessDetail - Erro ao verificar/atualizar etapa de orçamento:\",\n              etapasError,\n            );\n          }\n        }\n\n        await queryClient.invalidateQueries({\n          queryKey: [`/api/processes/${parsedId}`],\n        });\n        await queryClient.invalidateQueries({\n          queryKey: [`/api/processes/${parsedId}/steps`],\n        });\n\n        toast({\n          title: \"✅ Etapa Aprovada\",\n          description:\n            authorizationDecision === \"Disponibilidade Orçamentária\"\n              ? `Autorização concluída: ${authorizationDecision}. Próximas etapas criadas automaticamente.`\n              : authorizationDecision ===\n                    \"Indisponibilidade Orçamentária Total\" ||\n                  authorizationDecision ===\n                    \"Indisponibilidade Orçamentária Parcial\"\n                ? `Autorização concluída: ${authorizationDecision}. Próximas etapas criadas automaticamente.`\n                : `Autorização concluída: ${authorizationDecision}`,\n        });\n\n        // Fechar modal e limpar estados\n        setAuthorizationModalOpen(false);\n        setAuthorizationDecision(\"\");\n        setStepForAuthorization(null);\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao completar autorização\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Função para completar Autorizar Emissão de R.O depois de escolher a opção\n  const handleAuthorizeRoComplete = async () => {\n    console.log(\"🔥 MODAL AUTORIZAR R.O - Função chamada!\", {\n      stepForAuthorizeRo,\n      authorizeRoDecision,\n    });\n\n    if (!stepForAuthorizeRo || !authorizeRoDecision) {\n      console.log(\"🔥 MODAL AUTORIZAR R.O - Validação falhou:\", {\n        stepForAuthorizeRo: !!stepForAuthorizeRo,\n        authorizeRoDecision: !!authorizeRoDecision,\n      });\n      return;\n    }\n\n    try {\n      console.log(\n        \"🔥🔥🔥 ProcessDetail - Completando Autorizar R.O com decisão:\",\n        authorizeRoDecision,\n      );\n\n      let stepId = stepForAuthorizeRo.id;\n      \n      // Se a etapa não existe (id é null), criar primeiro\n      if (!stepId) {\n        console.log(\"🔥 MODAL AUTORIZAR R.O - Criando etapa inexistente\");\n        const createResponse = await apiRequest(\"POST\", `/api/processes/${parsedId}/steps`, {\n          stepName: \"Autorizar Emissão de R.O\",\n          departmentId: process?.currentDepartmentId || 5,\n          processId: parsedId,\n          isCompleted: false,\n          isVisible: true,\n        });\n        \n        if (createResponse.ok) {\n          const newStep = await createResponse.json();\n          stepId = newStep.id;\n          console.log(\"✅ MODAL AUTORIZAR R.O - Etapa criada com ID:\", stepId);\n        } else {\n          throw new Error(\"Falha ao criar etapa\");\n        }\n      }\n\n      const response = await apiRequest(\n        \"PATCH\",\n        `/api/processes/${parsedId}/steps/${stepId}`,\n        {\n          isCompleted: true,\n          observations: `Autorizar Emissão de R.O: ${authorizeRoDecision}`,\n          userId: currentUser?.id,\n        },\n      );\n\n      if (response.ok) {\n        // Se a decisão for \"Autorizar\", criar etapa \"Autorizar via sistema\" no mesmo setor\n        if (authorizeRoDecision === \"Autorizar\") {\n          console.log(\n            \"🔥🔥🔥 ProcessDetail - Criando etapa 'Autorizar via sistema' para decisão Autorizar\",\n          );\n\n          try {\n            // Criar a etapa \"Autorizar via sistema\" no mesmo departamento (ID 5)\n            const createStepResponse = await apiRequest(\n              \"POST\",\n              `/api/processes/${parsedId}/steps`,\n              {\n                stepName: \"Autorizar via sistema\",\n                departmentId: 5, // Mesmo setor (Secretário de Estado da Administração Penitenciária - SEAP)\n                isVisible: true,\n                isCompleted: false,\n              },\n            );\n\n            if (createStepResponse.ok) {\n              console.log(\n                \"✅✅✅ ProcessDetail - Etapa 'Autorizar via sistema' criada com sucesso\",\n              );\n            } else {\n              console.error(\n                \"❌❌❌ ProcessDetail - Erro ao criar etapa 'Autorizar via sistema'\",\n              );\n            }\n          } catch (etapaError) {\n            console.error(\n              \"❌❌❌ ProcessDetail - Erro ao criar etapa 'Autorizar via sistema':\",\n              etapaError,\n            );\n          }\n        }\n\n        // Fechar modal e limpar estados\n        setAuthorizeRoModalOpen(false);\n        setStepForAuthorizeRo(null);\n        setAuthorizeRoDecision(\"\");\n\n        // Invalidar cache para garantir atualização\n        queryClient.invalidateQueries({\n          queryKey: [`/api/processes/${parsedId}/steps`],\n        });\n        queryClient.invalidateQueries({\n          queryKey: [`/api/processes/${parsedId}`],\n        });\n\n        toast({\n          title: \"✅ Etapa Concluída\",\n          description:\n            authorizeRoDecision === \"Autorizar\"\n              ? `Autorização de Emissão de R.O processada: ${authorizeRoDecision}. Próxima etapa 'Autorizar via sistema' criada automaticamente.`\n              : `Autorização de Emissão de R.O processada: ${authorizeRoDecision}`,\n        });\n      } else {\n        throw new Error(\"Erro ao completar autorização\");\n      }\n    } catch (error) {\n      console.error(\"Erro ao completar Autorizar R.O:\", error);\n      toast({\n        title: \"❌ Erro\",\n        description: \"Erro ao processar Autorizar Emissão de R.O\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Função para rejeitar uma etapa\n  const handleStepReject = (step: ProcessStep) => {\n    setStepToReject(step);\n    setRejectionComment(\"\");\n    setRejectModalOpen(true);\n  };\n\n  // Função para confirmar rejeição\n  const confirmStepRejection = async () => {\n    if (!stepToReject || rejectionComment.trim().length < 10) {\n      toast({\n        title: \"Motivo obrigatório\",\n        description:\n          \"Por favor, informe o motivo da rejeição (mínimo 10 caracteres)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await apiRequest(\n        \"PATCH\",\n        `/api/processes/${parsedId}/steps/${stepToReject.id}`,\n        {\n          rejectionStatus: \"rejected\",\n          observations: rejectionComment.trim(),\n          isCompleted: false,\n          userId: currentUser?.id,\n        },\n      );\n\n      await queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${parsedId}`],\n      });\n      await queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${parsedId}/steps`],\n      });\n\n      // Toast removido conforme solicitado\n      // toast({\n      //   title: \"❌ Etapa Rejeitada\",\n      //   description: `Etapa \"${stepToReject.stepName}\" foi rejeitada`,\n      //   variant: \"destructive\",\n      // });\n\n      setRejectModalOpen(false);\n      setStepToReject(null);\n      setRejectionComment(\"\");\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao rejeitar etapa\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle delete process\n  const handleDelete = async () => {\n    if (deletionReason.trim().length < 10) {\n      toast({\n        title: \"Motivo obrigatório\",\n        description:\n          \"Por favor, informe o motivo da exclusão (mínimo 10 caracteres)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsDeleting(true);\n    try {\n      await apiRequest(\"DELETE\", `/api/processes/${parsedId}`, {\n        deletionReason: deletionReason.trim(),\n      });\n\n      // Show success toast\n      toast({\n        title: \"Processo excluído\",\n        description: \"O processo foi movido para a lixeira com sucesso\",\n      });\n\n      // Redirect to processes list\n      setLocation(\"/processes\");\n\n      // Invalidate queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n    } catch (error) {\n      console.error(\"Delete error:\", error);\n\n      // Show error toast\n      toast({\n        title: \"Erro ao excluir processo\",\n        description: \"Não foi possível excluir o processo\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDeleting(false);\n      setDeleteModalOpen(false);\n      setDeletionReason(\"\");\n    }\n  };\n\n  // Handle status icon\n  const getStatusIcon = () => {\n    if (!process) return null;\n\n    switch (process.status) {\n      case \"draft\":\n        return <AlertCircle className=\"h-6 w-6 text-gray-500\" />;\n      case \"in_progress\":\n        return <Clock className=\"h-6 w-6 text-yellow-500\" />;\n      case \"completed\":\n        return <CheckCircle className=\"h-6 w-6 text-green-500\" />;\n      case \"canceled\":\n        return <XCircle className=\"h-6 w-6 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  // Flowchart functions\n  const toggleFlowchartView = () => {\n    setIsFlowchartExpanded(!isFlowchartExpanded);\n  };\n\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\" && isFlowchartExpanded) {\n        setIsFlowchartExpanded(false);\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleEscape);\n    return () => document.removeEventListener(\"keydown\", handleEscape);\n  }, [isFlowchartExpanded]);\n\n  if (processLoading) {\n    return (\n      <div className=\"p-8 text-center\">Carregando detalhes do processo...</div>\n    );\n  }\n\n  if (error || !process) {\n    return (\n      <div className=\"p-8 text-center\">\n        <AlertCircle className=\"h-10 w-10 text-red-500 mx-auto mb-4\" />\n        <h2 className=\"text-xl font-semibold mb-2\">\n          Erro ao carregar processo\n        </h2>\n        <p>Não foi possível carregar os detalhes do processo.</p>\n        <Button onClick={() => setLocation(\"/processes\")} className=\"mt-4\">\n          Voltar para Processos\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4\">\n        <div className=\"flex items-center\">\n          {getStatusIcon()}\n          <div className=\"ml-2\">\n            <h1 className=\"text-2xl font-semibold text-gray-800\">\n              Processo {process.pbdocNumber}\n            </h1>\n            <p className=\"text-gray-600\">{process.description}</p>\n          </div>\n        </div>\n\n        <div className=\"flex flex-wrap gap-2\">\n          <Button\n            variant=\"default\"\n            onClick={() => setLocation(`/processes/${process.id}/report`)}\n          >\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Gerar Relatório\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            onClick={() => setLocation(`/processes/${process.id}/transfer`)}\n          >\n            <ArrowRight className=\"h-4 w-4 mr-2\" />\n            Tramitar\n          </Button>\n\n          <Button variant=\"outline\" onClick={handleEdit}>\n            <Edit className=\"h-4 w-4 mr-2\" />\n            Editar\n          </Button>\n\n          <Button\n            variant=\"destructive\"\n            onClick={() => setDeleteModalOpen(true)}\n          >\n            <Trash className=\"h-4 w-4 mr-2\" />\n            Excluir\n          </Button>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"mb-6\">\n          <TabsTrigger value=\"overview\">Visão Geral</TabsTrigger>\n          <TabsTrigger value=\"flow\">Fluxo</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <div className=\"lg:col-span-2\">\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Informações Básicas</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <dl className=\"divide-y divide-gray-200\">\n                      <div className=\"py-3 grid grid-cols-3\">\n                        <dt className=\"text-sm font-medium text-gray-500\">\n                          PBDOC\n                        </dt>\n                        <dd className=\"text-sm text-gray-900 col-span-2\">\n                          {process.pbdocNumber}\n                        </dd>\n                      </div>\n\n                      <div className=\"py-3 grid grid-cols-3\">\n                        <dt className=\"text-sm font-medium text-gray-500\">\n                          Descrição\n                        </dt>\n                        <dd className=\"text-sm text-gray-900 col-span-2\">\n                          {process.description}\n                        </dd>\n                      </div>\n\n                      <div className=\"py-3 grid grid-cols-3\">\n                        <dt className=\"text-sm font-medium text-gray-500\">\n                          Modalidade\n                        </dt>\n                        <dd className=\"text-sm text-gray-900 col-span-2\">\n                          {modality?.name || `Modalidade ${process.modalityId}`}\n                        </dd>\n                      </div>\n\n                      <div className=\"py-3 grid grid-cols-3\">\n                        <dt className=\"text-sm font-medium text-gray-500\">\n                          Fonte\n                        </dt>\n                        <dd className=\"text-sm text-gray-900 col-span-2\">\n                          {source\n                            ? `Fonte ${source.code} - ${source.description}`\n                            : `Fonte ${process.sourceId}`}\n                        </dd>\n                      </div>\n\n                      <div className=\"py-3 grid grid-cols-3\">\n                        <dt className=\"text-sm font-medium text-gray-500\">\n                          Histórico de Responsabilidades\n                        </dt>\n                        <dd className=\"text-sm text-gray-900 col-span-2\">\n                          {historyLoading ? (\n                            <div className=\"text-xs text-gray-500\">\n                              Carregando histórico...\n                            </div>\n                          ) : responsibilityHistory &&\n                            responsibilityHistory.length > 0 ? (\n                            <div className=\"space-y-2\">\n                              {responsibilityHistory.map((history, index) => (\n                                <div\n                                  key={history.id}\n                                  className=\"flex items-start space-x-2\"\n                                >\n                                  <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-1.5 flex-shrink-0\"></div>\n                                  <div className=\"flex-1\">\n                                    <div className=\"text-xs text-gray-900\">\n                                      <span className=\"font-medium\">\n                                        {history.fullName || history.username}\n                                      </span>\n                                      {history.departmentName && (\n                                        <span className=\"text-gray-500\">\n                                          {\" \"}\n                                          ({history.departmentName})\n                                        </span>\n                                      )}\n                                    </div>\n                                    <div className=\"text-xs text-gray-500\">\n                                      {history.action === \"created\"\n                                        ? \"Criou o processo\"\n                                        : history.action === \"updated\"\n                                          ? \"Modificou o processo\"\n                                          : history.action === \"transferred\"\n                                            ? \"Transferiu o processo\"\n                                            : history.action === \"returned\"\n                                              ? \"Retornou o processo\"\n                                              : history.description ||\n                                                history.action}\n                                    </div>\n                                    <div className=\"text-xs text-gray-400\">\n                                      {format(\n                                        new Date(history.timestamp),\n                                        \"dd/MM/yyyy HH:mm\",\n                                        { locale: ptBR },\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          ) : (\n                            <div className=\"text-xs text-gray-500\">\n                              Responsável atual:{\" \"}\n                              {responsible?.fullName ||\n                                `Usuário ${process.responsibleId}`}\n                              {process.responsibleSince && (\n                                <div className=\"mt-1 text-xs text-blue-600 flex items-center\">\n                                  <Clock className=\"h-3 w-3 mr-1\" />\n                                  Responsável desde{\" \"}\n                                  {format(\n                                    new Date(process.responsibleSince),\n                                    \"dd/MM/yyyy\",\n                                    { locale: ptBR },\n                                  )}\n                                  (\n                                  {Math.ceil(\n                                    (new Date().getTime() -\n                                      new Date(\n                                        process.responsibleSince,\n                                      ).getTime()) /\n                                      (1000 * 60 * 60 * 24),\n                                  )}{\" \"}\n                                  dias)\n                                </div>\n                              )}\n                            </div>\n                          )}\n                        </dd>\n                      </div>\n                    </dl>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Status e Prioridade</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <dl className=\"divide-y divide-gray-200\">\n                      <div className=\"py-3 grid grid-cols-3\">\n                        <dt className=\"text-sm font-medium text-gray-500\">\n                          Status\n                        </dt>\n                        <dd className=\"text-sm text-gray-900 col-span-2\">\n                          <span\n                            className={`status-badge status-badge-${process.status}`}\n                          >\n                            {getProcessStatusLabel(process.status)}\n                          </span>\n                        </dd>\n                      </div>\n\n                      <div className=\"py-3 grid grid-cols-3\">\n                        <dt className=\"text-sm font-medium text-gray-500\">\n                          Prioridade\n                        </dt>\n                        <dd className=\"text-sm text-gray-900 col-span-2\">\n                          <span\n                            className={`priority-badge priority-badge-${process.priority}`}\n                          >\n                            {getProcessPriorityLabel(process.priority)}\n                          </span>\n                        </dd>\n                      </div>\n\n                      <div className=\"py-3 grid grid-cols-3\">\n                        <dt className=\"text-sm font-medium text-gray-500\">\n                          Data de Criação\n                        </dt>\n                        <dd className=\"text-sm text-gray-900 col-span-2\">\n                          {format(\n                            new Date(process.createdAt),\n                            \"dd 'de' MMMM 'de' yyyy\",\n                            { locale: ptBR },\n                          )}\n                        </dd>\n                      </div>\n\n                      <div className=\"py-3 grid grid-cols-3\">\n                        <dt className=\"text-sm font-medium text-gray-500\">\n                          Última Atualização\n                        </dt>\n                        <dd className=\"text-sm text-gray-900 col-span-2\">\n                          {format(\n                            new Date(process.updatedAt),\n                            \"dd 'de' MMMM 'de' yyyy\",\n                            { locale: ptBR },\n                          )}\n                        </dd>\n                      </div>\n\n                      {process.deadline && (\n                        <div className=\"py-3 grid grid-cols-3\">\n                          <dt className=\"text-sm font-medium text-gray-500\">\n                            Prazo de Entrega\n                          </dt>\n                          <dd className=\"text-sm text-gray-900 col-span-2 flex items-center\">\n                            {format(\n                              new Date(process.deadline),\n                              \"dd 'de' MMMM 'de' yyyy\",\n                              { locale: ptBR },\n                            )}\n                            {new Date(process.deadline) < new Date() ? (\n                              <span className=\"ml-2 px-2 py-0.5 text-xs font-medium bg-red-100 text-red-800 rounded-full\">\n                                Atrasado\n                              </span>\n                            ) : (\n                              <span className=\"ml-2 px-2 py-0.5 text-xs font-medium bg-green-100 text-green-800 rounded-full\">\n                                {Math.ceil(\n                                  (new Date(process.deadline).getTime() -\n                                    new Date().getTime()) /\n                                    (1000 * 60 * 60 * 24),\n                                )}{\" \"}\n                                dias restantes\n                              </span>\n                            )}\n                          </dd>\n                        </div>\n                      )}\n                    </dl>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Right Sidebar with Checklist */}\n              <div className=\"space-y-6\">\n                {/* Next Step Card */}\n                {nextStep && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center text-lg\">\n                        <Clock className=\"h-5 w-5 mr-2 text-blue-600\" />\n                        Próxima Etapa\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 text-sm\">\n                            {nextStep.stepName}\n                          </h4>\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            Setor Responsável:{\" \"}\n                            {currentDepartment?.name ||\n                              \"Departamento não definido\"}\n                          </p>\n                        </div>\n\n                        {nextStep.dueDate && (\n                          <div className=\"flex items-center text-xs text-orange-600\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            {format(new Date(nextStep.dueDate), \"dd/MM/yyyy\")}\n                          </div>\n                        )}\n\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-xs text-gray-500\">\n                            Progresso:{\" \"}\n                            {steps?.filter((s) => s.isCompleted).length || 0} de{\" \"}\n                            {steps?.length || 0}\n                          </span>\n                          <div className=\"w-16 bg-gray-200 rounded-full h-1.5\">\n                            <div\n                              className=\"bg-blue-600 h-1.5 rounded-full\"\n                              style={{\n                                width: `${((steps?.filter((s) => s.isCompleted).length || 0) / (steps?.length || 1)) * 100}%`,\n                              }}\n                            />\n                          </div>\n                        </div>\n\n                        {/* Sector-Specific Checklist */}\n                        {currentUser && (\n                          <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                            <h4 className=\"text-sm font-medium text-gray-900 mb-3 flex items-center\">\n                              <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\n                              Checklist do Setor{\" \"}\n                              {currentDepartment?.name || \"Atual\"}\n                            </h4>\n\n                            {/* Sector Steps */}\n                            <div className=\"space-y-2\">\n                              {(() => {\n                                const sectorSteps = getSectorSteps(\n                                  currentDepartment?.name ||\n                                    currentUser.department,\n                                  process?.modalityId || 1,\n                                );\n                                console.log(\"Sector steps:\", sectorSteps);\n                                console.log(\n                                  \"Current department:\",\n                                  currentDepartment?.name,\n                                );\n                                console.log(\n                                  \"Current user department:\",\n                                  currentUser.department,\n                                );\n                                console.log(\n                                  \"Process current department ID:\",\n                                  process?.currentDepartmentId,\n                                );\n\n                                // Adicionar etapas condicionais visíveis que pertencem ao departamento atual\n                                const conditionalSteps =\n                                  steps?.filter((step) => {\n                                    // Etapas condicionais específicas\n                                    const isConditionalStep = [\n                                      \"Devolver para correção ou arquivamento\", // Apenas no Secretário de Estado\n                                      \"Solicitar ajuste/aditivo do plano de trabalho\",\n                                      \"Autorizar Emissão de R.O\",\n                                    ].includes(step.stepName);\n\n                                    // Pertence ao departamento atual e está visível\n                                    const belongsToCurrentDept =\n                                      step.departmentId ===\n                                      process?.currentDepartmentId;\n\n                                    // ESPECIAL: \"Devolver para correção ou arquivamento\" só aparece no Secretário de Estado (ID 5)\n                                    if (\n                                      step.stepName ===\n                                      \"Devolver para correção ou arquivamento\"\n                                    ) {\n                                      return (\n                                        belongsToCurrentDept &&\n                                        step.isVisible &&\n                                        process?.currentDepartmentId === 5\n                                      );\n                                    }\n\n                                    return (\n                                      isConditionalStep &&\n                                      belongsToCurrentDept &&\n                                      step.isVisible\n                                    );\n                                  }) || [];\n\n                                // Remover duplicatas de etapas condicionais (usar apenas a mais recente)\n                                const uniqueConditionalSteps =\n                                  conditionalSteps.reduce(\n                                    (unique: any[], current) => {\n                                      const existingIndex = unique.findIndex(\n                                        (step) =>\n                                          step.stepName === current.stepName,\n                                      );\n                                      if (existingIndex >= 0) {\n                                        // Se já existe, manter apenas a mais recente (maior ID)\n                                        if (\n                                          current.id > unique[existingIndex].id\n                                        ) {\n                                          unique[existingIndex] = current;\n                                        }\n                                      } else {\n                                        unique.push(current);\n                                      }\n                                      return unique;\n                                    },\n                                    [],\n                                  );\n\n                                // Converter etapas condicionais para o formato de sectorStep, \n                                // mas filtrar duplicatas que já existem nas etapas do setor\n                                const conditionalSectorSteps =\n                                  uniqueConditionalSteps\n                                    .filter((step) => {\n                                      // Excluir etapas condicionais que já existem nas etapas do setor\n                                      return !sectorSteps.some(\n                                        (sectorStep) => sectorStep.name === step.stepName\n                                      );\n                                    })\n                                    .map((step) => ({\n                                      name: step.stepName,\n                                      phase: \"Condicional\",\n                                    }));\n\n                                // Combinar etapas do setor com etapas condicionais (sem duplicatas)\n                                const allSteps = [\n                                  ...sectorSteps,\n                                  ...conditionalSectorSteps,\n                                ];\n\n                                console.log(\n                                  \"🔍 Etapas condicionais visíveis encontradas:\",\n                                  conditionalSteps.map((s) => s.stepName),\n                                );\n                                console.log(\n                                  \"🔍 Total de etapas para exibir:\",\n                                  allSteps.length,\n                                );\n\n                                return allSteps;\n                              })()\n                                .filter((sectorStep) => {\n                                  // Mostrar apenas etapas pendentes (não concluídas)\n                                  // Para etapas condicionais, encontrar a mais recente\n                                  const allMatchingSteps =\n                                    steps?.filter(\n                                      (s) => s.stepName === sectorStep.name,\n                                    ) || [];\n\n                                  // Se for etapa condicional com duplicatas, usar apenas a mais recente\n                                  const existingStep =\n                                    allMatchingSteps.length > 1\n                                      ? allMatchingSteps.reduce(\n                                          (latest, current) =>\n                                            current.id > latest.id\n                                              ? current\n                                              : latest,\n                                        )\n                                      : allMatchingSteps[0];\n\n                                  return !existingStep?.isCompleted;\n                                })\n                                .map((sectorStep, index) => {\n                                  // Para etapas condicionais, encontrar a mais recente\n                                  const allMatchingSteps =\n                                    steps?.filter(\n                                      (s) => s.stepName === sectorStep.name,\n                                    ) || [];\n\n                                  // Se for etapa condicional com duplicatas, usar apenas a mais recente\n                                  const existingStep =\n                                    allMatchingSteps.length > 1\n                                      ? allMatchingSteps.reduce(\n                                          (latest, current) =>\n                                            current.id > latest.id\n                                              ? current\n                                              : latest,\n                                        )\n                                      : allMatchingSteps[0];\n                                  const isCompleted =\n                                    existingStep?.isCompleted || false;\n\n                                  // Só mostrar se o usuário atual pertence ao departamento do processo\n                                  const userCanEdit =\n                                    currentUser.department ===\n                                      currentDepartment?.name ||\n                                    currentUser.role === \"admin\";\n\n                                  console.log(\n                                    `Step ${sectorStep.name}: userCanEdit=${userCanEdit}, existingStep=${!!existingStep}, isCompleted=${isCompleted}`,\n                                  );\n\n                                  return (\n                                    <div\n                                      key={index}\n                                      className=\"flex items-center space-x-3 p-3 bg-white rounded border border-gray-200\"\n                                    >\n                                      <div className=\"flex items-center space-x-2\">\n                                        {/* Botão de Aprovar */}\n                                        <button\n                                          className={`h-8 w-8 rounded-full border-2 flex items-center justify-center transition-all ${\n                                            isCompleted\n                                              ? \"bg-green-600 border-green-600 hover:bg-green-700\"\n                                              : userCanEdit\n                                                ? \"border-green-400 hover:border-green-600 bg-white hover:bg-green-50\"\n                                                : \"border-gray-300 bg-gray-100\"\n                                          }`}\n                                          onClick={async () => {\n                                            if (!userCanEdit) return;\n\n                                            // Verificar se é a etapa especial de Autorização pelo Secretário SEAP\n                                            if (\n                                              sectorStep.name.includes(\n                                                \"Autorização pelo Secretário SEAP\",\n                                              )\n                                            ) {\n                                              console.log(\n                                                \"🔥 ProcessDetail - Etapa de Autorização detectada - abrindo modal de autorização\",\n                                              );\n                                              setAuthorizationModalOpen(true);\n                                              setStepForAuthorization(\n                                                existingStep || null,\n                                              );\n                                              setAuthorizationDecision(\"\"); // Limpar seleção anterior\n                                              return; // NÃO CONTINUA - Etapa só será concluída após escolher opção no modal\n                                            }\n\n                                            // Verificar se é a etapa de Autorizar Emissão de R.O\n                                            if (\n                                              sectorStep.name === \"Autorizar Emissão de R.O\"\n                                            ) {\n                                              console.log(\n                                                \"🔥 ProcessDetail - Etapa Autorizar Emissão de R.O detectada - abrindo modal de autorização\",\n                                              );\n                                              setAuthorizeRoModalOpen(true);\n                                              // Se a etapa não existe, criar um objeto temporário com as informações necessárias\n                                              if (existingStep) {\n                                                setStepForAuthorizeRo(existingStep);\n                                              } else {\n                                                // Criar objeto temporário para o modal funcionar\n                                                setStepForAuthorizeRo({\n                                                  id: null,\n                                                  stepName: \"Autorizar Emissão de R.O\",\n                                                  departmentId: process?.currentDepartmentId || 5,\n                                                  processId: parsedId,\n                                                  isCompleted: false,\n                                                  isVisible: true,\n                                                } as any);\n                                              }\n                                              setAuthorizeRoDecision(\"\"); // Limpar seleção anterior\n                                              return; // NÃO CONTINUA - Etapa só será concluída após escolher opção no modal\n                                            }\n\n                                            // Verificar se é a etapa de Arquivar processo no Setor Demandante (AGORA MANUAL)\n                                            if (\n                                              sectorStep.name === \"Arquivar processo\" &&\n                                              currentUser.department === \"Setor Demandante\"\n                                            ) {\n                                              console.log(\n                                                \"🔥 ProcessDetail - Etapa de arquivamento no Setor Demandante - completando etapa (transferência manual)\",\n                                              );\n                                              \n                                              // Criar etapa se não existir\n                                              let stepId = existingStep?.id;\n                                              if (!existingStep) {\n                                                console.log(\"🔥🔥🔥 ProcessDetail - Criando etapa de arquivamento\");\n                                                const createResponse = await apiRequest(\n                                                  \"POST\",\n                                                  `/api/processes/${parsedId}/steps`,\n                                                  {\n                                                    stepName: sectorStep.name,\n                                                    departmentId: process?.currentDepartmentId || 1,\n                                                    isVisible: true,\n                                                    isCompleted: false,\n                                                  },\n                                                );\n                                              \n                                                if (createResponse.ok) {\n                                                  const newStep = await createResponse.json();\n                                                  stepId = newStep.id;\n                                                  console.log(\"🔥🔥🔥 ProcessDetail - Etapa criada com ID:\", stepId);\n                                                } else {\n                                                  throw new Error(\"Erro ao criar etapa\");\n                                                }\n                                              }\n                                              \n                                              // Apenas completar a etapa (sem transferir automaticamente)\n                                              await apiRequest(\n                                                \"PATCH\",\n                                                `/api/processes/${parsedId}/steps/${stepId}`,\n                                                {\n                                                  isCompleted: true,\n                                                  observations: \"Processo pronto para arquivamento - aguardando transferência manual\",\n                                                  userId: currentUser?.id,\n                                                },\n                                              );\n                                              \n                                              // Refetch dos dados\n                                              queryClient.invalidateQueries({\n                                                queryKey: [`/api/processes/${parsedId}`],\n                                              });\n                                              queryClient.invalidateQueries({\n                                                queryKey: [`/api/processes/${parsedId}/steps`],\n                                              });\n                                              \n                                              toast({\n                                                title: \"✅ Etapa Concluída\",\n                                                description: \"Processo marcado para arquivamento. Utilize o botão 'Transferir Processo' para enviar à Divisão de Licitação.\",\n                                              });\n                                              \n                                              return; // NÃO CONTINUA\n                                            }\n\n                                            // Verificar se é a etapa de Arquivar processo - Final (COM MODAL DE CONFIRMAÇÃO)\n                                            if (\n                                              sectorStep.name === \"Arquivar processo - Final\"\n                                            ) {\n                                              console.log(\n                                                \"🔥 ProcessDetail - Etapa de arquivamento final detectada - abrindo modal de confirmação\",\n                                              );\n                                              \n                                              setArchiveModalOpen(true);\n                                              setStepForArchive(existingStep || null);\n                                              return; // NÃO CONTINUA - Etapa só será concluída após confirmação no modal\n                                            }\n\n                                            // Verificar se é a etapa de Fluxo Repror (COM MODAL DE CONFIRMAÇÃO)\n                                            if (\n                                              sectorStep.name === \"Fluxo Repror\"\n                                            ) {\n                                              console.log(\n                                                \"🔥 ProcessDetail - Etapa de Fluxo Repror detectada - abrindo modal de confirmação\",\n                                              );\n                                              \n                                              setFluxoReprorModalOpen(true);\n                                              setStepForFluxoRepror(existingStep || null);\n                                              return; // NÃO CONTINUA - Etapa só será concluída após confirmação no modal\n                                            }\n\n                                            // Verificar se é a etapa de Autorizar via sistema - SEAP (COM MODAL DE CONFIRMAÇÃO)\n                                            if (\n                                              sectorStep.name === \"Autorizar via sistema\"\n                                            ) {\n                                              console.log(\n                                                \"🔥 ProcessDetail - Etapa Autorizar via sistema detectada - abrindo modal de confirmação\",\n                                              );\n                                              \n                                              setAutorizarViaSistemaModalOpen(true);\n                                              // Se a etapa não existe, criar um objeto temporário com as informações necessárias\n                                              if (existingStep) {\n                                                setStepForAutorizarViaSistema(existingStep);\n                                              } else {\n                                                // Criar objeto temporário para o modal funcionar\n                                                setStepForAutorizarViaSistema({\n                                                  id: null,\n                                                  stepName: \"Autorizar via sistema\",\n                                                  departmentId: process?.currentDepartmentId || 5,\n                                                  processId: parsedId,\n                                                  isCompleted: false,\n                                                  isVisible: true,\n                                                } as any);\n                                              }\n                                              return; // NÃO CONTINUA - Etapa só será concluída após confirmação no modal\n                                            }\n\n                                            // Verificar se é a etapa de Fluxo reavaliação do plano de trabalho - SUBCC (COM MODAL DE CONFIRMAÇÃO)\n                                            if (\n                                              sectorStep.name === \"Fluxo reavaliação do plano de trabalho\"\n                                            ) {\n                                              console.log(\n                                                \"🔥 ProcessDetail - Etapa de reavaliação SUBCC detectada - abrindo modal de confirmação\",\n                                              );\n                                              \n                                              setSubccRevaluationModalOpen(true);\n                                              // Se a etapa não existe, criar um objeto temporário com as informações necessárias\n                                              if (existingStep) {\n                                                setStepForSubccRevaluation(existingStep);\n                                              } else {\n                                                // Criar objeto temporário para o modal funcionar\n                                                setStepForSubccRevaluation({\n                                                  id: null,\n                                                  stepName: \"Fluxo reavaliação do plano de trabalho\",\n                                                  departmentId: process?.currentDepartmentId || 11,\n                                                  processId: parsedId,\n                                                  isCompleted: false,\n                                                  isVisible: true,\n                                                } as any);\n                                              }\n                                              return; // NÃO CONTINUA - Etapa só será concluída após confirmação no modal\n                                            }\n\n                                            // Verificar se é a etapa de Devolver para correção ou cancelar processo\n                                            if (\n                                              sectorStep.name ===\n                                              \"Devolver para correção ou cancelar processo\"\n                                            ) {\n                                              console.log(\n                                                \"🔥 ProcessDetail - Etapa de correção detectada - abrindo modal de correção\",\n                                              );\n\n                                              // Se a etapa não existe, criar ela primeiro\n                                              if (!existingStep) {\n                                                console.log(\n                                                  \"🔄 ProcessDetail - Criando etapa 'Devolver para correção ou cancelar processo'\",\n                                                );\n                                                \n                                                try {\n                                                  const response = await apiRequest(\n                                                    \"POST\",\n                                                    `/api/processes/${process.id}/steps`,\n                                                    {\n                                                      stepName: sectorStep.name,\n                                                      departmentId: process.currentDepartmentId,\n                                                      isCompleted: false,\n                                                      isVisible: true,\n                                                      observations: null,\n                                                    },\n                                                  );\n\n                                                  if (response.ok) {\n                                                    const newStep = await response.json();\n                                                    setStepForCorrection(newStep);\n                                                    setCorrectionModalOpen(true);\n                                                    setCorrectionDecision(\"\");\n                                                    return;\n                                                  }\n                                                } catch (error) {\n                                                  console.error(\"Erro ao criar etapa:\", error);\n                                                  toast({\n                                                    title: \"Erro\",\n                                                    description: \"Erro ao criar etapa de correção\",\n                                                    variant: \"destructive\",\n                                                  });\n                                                  return;\n                                                }\n                                              } else {\n                                                // Se a etapa existe, usar ela\n                                                setStepForCorrection(existingStep);\n                                                setCorrectionModalOpen(true);\n                                                setCorrectionDecision(\"\"); // Limpar seleção anterior\n                                                return; // NÃO CONTINUA - Etapa só será concluída após escolher opção no modal\n                                              }\n                                            }\n\n                                            if (existingStep) {\n                                              // Verificar se é a etapa de solicitação de ajuste/aditivo\n                                              if (\n                                                sectorStep.name ===\n                                                \"Solicitar ajuste/aditivo do plano de trabalho\"\n                                              ) {\n                                                console.log(\n                                                  \"🔥 ProcessDetail - Etapa de ajuste detectada - marcando como concluída\",\n                                                );\n\n                                                try {\n                                                  // Marcar a etapa como concluída - tramitação para SUBCC será feita manualmente\n                                                  await apiRequest(\n                                                    \"PATCH\",\n                                                    `/api/processes/${parsedId}/steps/${existingStep.id}`,\n                                                    {\n                                                      isCompleted: true,\n                                                      observations:\n                                                        \"Solicitação de ajuste/aditivo concluída - Pronto para tramitação ao SUBCC\",\n                                                      userId: currentUser?.id,\n                                                    },\n                                                  );\n\n                                                  // Atualizar dados na interface\n                                                  queryClient.invalidateQueries(\n                                                    {\n                                                      queryKey: [\n                                                        `/api/processes/${parsedId}`,\n                                                      ],\n                                                    },\n                                                  );\n                                                  queryClient.invalidateQueries(\n                                                    {\n                                                      queryKey: [\n                                                        `/api/processes/${parsedId}/steps`,\n                                                      ],\n                                                    },\n                                                  );\n\n                                                  toast({\n                                                    title: \"✅ Etapa Concluída\",\n                                                    description:\n                                                      \"Processo pronto para tramitação ao SUBCC para reavaliação do plano de trabalho\",\n                                                  });\n                                                } catch (error) {\n                                                  console.error(\n                                                    \"Erro ao concluir etapa:\",\n                                                    error,\n                                                  );\n                                                  toast({\n                                                    title: \"Erro\",\n                                                    description:\n                                                      \"Erro ao concluir etapa\",\n                                                    variant: \"destructive\",\n                                                  });\n                                                }\n                                              }\n                                              // Verificar se é etapa condicional de correção (Devolver para correção ou arquivamento)\n                                              else if (\n                                                sectorStep.name ===\n                                                \"Devolver para correção ou arquivamento\"\n                                              ) {\n                                                console.log(\n                                                  \"🔥 ProcessDetail - Etapa 'Devolver para correção ou arquivamento' detectada - apenas completando (tramitação manual necessária)\",\n                                                );\n\n                                                try {\n                                                  // Apenas completar a etapa atual - próxima etapa aparecerá após tramitação manual\n                                                  await apiRequest(\n                                                    \"PATCH\",\n                                                    `/api/processes/${parsedId}/steps/${existingStep.id}`,\n                                                    {\n                                                      isCompleted: true,\n                                                      observations: \"Correção primeira etapa concluída - Aguardando tramitação manual para próxima etapa\",\n                                                      userId: currentUser?.id,\n                                                    },\n                                                  );\n\n                                                  // Refrescar dados\n                                                  queryClient.invalidateQueries({\n                                                    queryKey: [`/api/processes/${parsedId}/steps`],\n                                                  });\n\n                                                  toast({\n                                                    title: \"✅ Etapa Concluída\",\n                                                    description: \"Processo pronto para tramitação manual. Use o botão 'Tramitar Processo' para continuar o fluxo de correção.\",\n                                                  });\n                                                } catch (error) {\n                                                  console.error(\"Erro ao processar etapa de correção:\", error);\n                                                  toast({\n                                                    title: \"Erro\",\n                                                    description: \"Erro ao processar etapa de correção\",\n                                                    variant: \"destructive\",\n                                                  });\n                                                }\n                                              }\n                                              // Verificar se é a etapa especial de Autorização pelo Secretário SEAP\n                                              else if (\n                                                sectorStep.name === \"Autorização pelo Secretário SEAP\"\n                                              ) {\n                                                console.log(\n                                                  \"🔥 ProcessDetail - Etapa 'Autorização pelo Secretário SEAP' detectada - abrindo modal de autorização\",\n                                                );\n                                                setAuthorizationModalOpen(true);\n\n                                                // Se não existe step, criar um objeto temporário com as informações necessárias\n                                                if (existingStep) {\n                                                  setStepForAuthorization(existingStep);\n                                                } else {\n                                                  // Criar objeto temporário para a etapa\n                                                  const tempStep = {\n                                                    id: 0, // ID temporário\n                                                    processId: parsedId,\n                                                    stepName: sectorStep.name,\n                                                    departmentId: process.currentDepartmentId,\n                                                    isCompleted: false,\n                                                    observations: null,\n                                                    completedAt: null,\n                                                    completedBy: null,\n                                                    dueDate: null,\n                                                    rejectedAt: null,\n                                                    rejectionStatus: null,\n                                                    isLocked: false,\n                                                    isVisible: true,\n                                                  };\n                                                  setStepForAuthorization(tempStep);\n                                                }\n                                                setAuthorizationDecision(\"\"); // Limpar seleção anterior\n                                                return; // NÃO CONTINUA - Modal deve ser usado\n                                              } else {\n                                                // Etapa normal, apenas atualizar\n                                                handleStepToggle(\n                                                  existingStep.id,\n                                                  !isCompleted,\n                                                );\n                                              }\n                                            } else {\n                                              // Etapa não existe, criar primeiro\n                                              try {\n                                                const response =\n                                                  await apiRequest(\n                                                    \"POST\",\n                                                    `/api/processes/${process.id}/steps`,\n                                                    {\n                                                      stepName: sectorStep.name,\n                                                      departmentId:\n                                                        process.currentDepartmentId,\n                                                      isCompleted: true,\n                                                      observations: null,\n                                                    },\n                                                  );\n\n                                                if (response.ok) {\n                                                  // Recarregar etapas\n                                                  queryClient.invalidateQueries(\n                                                    {\n                                                      queryKey: [\n                                                        `/api/processes/${process.id}/steps`,\n                                                      ],\n                                                    },\n                                                  );\n\n                                                  toast({\n                                                    title:\n                                                      \"Etapa criada e concluída\",\n                                                    description: `Etapa \"${sectorStep.name}\" foi criada e marcada como concluída`,\n                                                  });\n                                                }\n                                              } catch (error) {\n                                                toast({\n                                                  title: \"Erro\",\n                                                  description:\n                                                    \"Não foi possível criar a etapa\",\n                                                  variant: \"destructive\",\n                                                });\n                                              }\n                                            }\n                                          }}\n                                          disabled={!userCanEdit}\n                                          title=\"Aprovar etapa\"\n                                        >\n                                          {isCompleted ? (\n                                            <Check className=\"h-4 w-4 text-white\" />\n                                          ) : (\n                                            <Check className=\"h-4 w-4 text-green-600\" />\n                                          )}\n                                        </button>\n\n                                        {/* Botão de Rejeitar */}\n                                        <button\n                                          className={`h-8 w-8 rounded-full border-2 flex items-center justify-center transition-all ${\n                                            userCanEdit\n                                              ? \"border-red-400 hover:border-red-600 bg-white hover:bg-red-50\"\n                                              : \"border-gray-300 bg-gray-100\"\n                                          }`}\n                                          onClick={() => {\n                                            if (!userCanEdit) return;\n\n                                            // Verificar se é a etapa especial de Autorização pelo Secretário SEAP\n                                            if (\n                                              sectorStep.name.includes(\n                                                \"Autorização pelo Secretário SEAP\",\n                                              )\n                                            ) {\n                                              console.log(\n                                                \"🔥 ProcessDetail - Etapa de Autorização detectada - abrindo modal de rejeição especial\",\n                                              );\n                                              setAuthorizationRejectionModalOpen(\n                                                true,\n                                              );\n\n                                              // Se não existe step, criar um objeto temporário com as informações necessárias\n                                              if (existingStep) {\n                                                setStepForAuthorizationRejection(\n                                                  existingStep,\n                                                );\n                                              } else {\n                                                // Criar objeto temporário da etapa para usar no modal\n                                                const tempStep = {\n                                                  id: null, // Será criado quando confirmado\n                                                  stepName: sectorStep.name,\n                                                  departmentId:\n                                                    process?.currentDepartmentId ||\n                                                    0,\n                                                  isVisible: true,\n                                                  isCompleted: false,\n                                                  processId: parsedId,\n                                                };\n                                                setStepForAuthorizationRejection(\n                                                  tempStep as any,\n                                                );\n                                              }\n\n                                              setAuthorizationRejectionDecision(\n                                                \"\",\n                                              ); // Limpar seleção anterior\n                                              return; // NÃO CONTINUA - Etapa só será rejeitada após escolher opção no modal\n                                            }\n\n                                            if (existingStep) {\n                                              handleStepReject(existingStep);\n                                            } else {\n                                              toast({\n                                                title: \"Erro\",\n                                                description:\n                                                  \"Esta etapa ainda não foi criada\",\n                                                variant: \"destructive\",\n                                              });\n                                            }\n                                          }}\n                                          disabled={!userCanEdit}\n                                          title=\"Rejeitar etapa\"\n                                        >\n                                          <XCircle className=\"h-4 w-4 text-red-600\" />\n                                        </button>\n                                      </div>\n\n                                      <div className=\"flex-1\">\n                                        <p\n                                          className={`text-sm font-medium ${isCompleted ? \"line-through text-gray-500\" : \"text-gray-900\"}`}\n                                        >\n                                          {sectorStep.name}\n                                        </p>\n                                        <p className=\"text-xs text-gray-500\">\n                                          Fase: {sectorStep.phase}\n                                        </p>\n                                        {existingStep?.observations && (\n                                          <p className=\"text-xs text-red-600 mt-1 bg-red-50 p-2 rounded\">\n                                            <strong>Motivo da rejeição:</strong>{\" \"}\n                                            {existingStep.observations}\n                                          </p>\n                                        )}\n                                      </div>\n                                    </div>\n                                  );\n                                })}\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Current Step Action */}\n                        {/* {nextStep && (\n                        <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                          <h4 className=\"text-sm font-medium text-gray-900 mb-3 flex items-center\">\n                            <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\n                            Ação da Etapa Atual\n                          </h4>\n                          <div className=\"flex items-center space-x-3 p-3 bg-blue-50 rounded-lg border border-blue-200\">\n                            <button\n                              className={`h-8 w-8 rounded-full border-2 flex items-center justify-center transition-all ${\n                                nextStep.isCompleted \n                                  ? \"bg-green-600 border-green-600 hover:bg-green-700\" \n                                  : \"border-blue-400 hover:border-green-400 bg-white hover:bg-green-50\"\n                              }`}\n                              onClick={() => handleStepToggle(nextStep.id, !nextStep.isCompleted)}\n                            >\n                              {nextStep.isCompleted ? (\n                                <CheckCircle className=\"h-4 w-4 text-white\" />\n                              ) : (\n                                <span className=\"text-sm text-blue-600 font-medium\">✓</span>\n                              )}\n                            </button>\n                            <div className=\"flex-1\">\n                              <p className={`text-sm font-medium ${nextStep.isCompleted ? 'line-through text-gray-500' : 'text-gray-900'}`}>\n                                {nextStep.stepName}\n                              </p>\n                              <p className=\"text-xs text-gray-600 mt-1\">\n                                {nextStep.isCompleted ? 'Etapa concluída' : 'Clique para marcar como concluída'}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n       /*}\n       {/* Botão de Correção do Checklist */}\n                        {(() => {\n                          // Verificar se há etapa \"Fluxo Repror\" visível - não mostrar botão corrigir para etapas de arquivamento\n                          const currentSectorSteps = getSectorSteps(currentUser?.department || \"\", process?.modalityId || 1);\n                          const hasFluxoReprorStep = currentSectorSteps.some((step: any) => \n                            step.name === \"Fluxo Repror\" && \n                            steps?.some(s => s.stepName === step.name && s.isVisible === true)\n                          );\n                          \n                          if (hasFluxoReprorStep) {\n                            return null; // Não mostrar botão de correção para etapas de arquivamento\n                          }\n                          \n                          return (\n                            <div className=\"mt-6 pt-4 border-t border-gray-200\">\n                              <center>\n                                <Button\n                              variant=\"secondary\"\n                              onClick={async () => {\n                                try {\n                                  console.log(\n                                    \"🔄 Corrigindo checklist - resetando todas as etapas\",\n                                  );\n\n                                  if (steps && currentDepartment) {\n                                    // 1. Resetar todas as etapas do setor atual (marcar como incompletas)\n                                    const allSectorSteps = steps.filter(\n                                      (step) =>\n                                        step.departmentId ===\n                                        process?.currentDepartmentId,\n                                    );\n\n                                    for (const step of allSectorSteps) {\n                                      await apiRequest(\n                                        \"PATCH\",\n                                        `/api/processes/${parsedId}/steps/${step.id}`,\n                                        {\n                                          isCompleted: false,\n                                          observations: null,\n                                          rejectedAt: null,\n                                          rejectionStatus: null,\n                                        },\n                                      );\n                                    }\n\n                                    // 2. Tornar invisíveis apenas etapas condicionais que devem ser resetadas\n                                    // EXCLUIR \"Devolver para correção ou arquivamento\" para não interferir no fluxo de rejeição\n                                    const conditionalStepsToHide = steps.filter(\n                                      (step) =>\n                                        [\n                                          \"Solicitar ajuste/aditivo do plano de trabalho\",\n                                          \"Autorizar Emissão de R.O\",\n                                          \"Solicitar disponibilização de orçamento\",\n                                        ].includes(step.stepName),\n                                    );\n\n                                    for (const step of conditionalStepsToHide) {\n                                      await apiRequest(\n                                        \"PATCH\",\n                                        `/api/processes/${parsedId}/steps/${step.id}`,\n                                        { isVisible: false },\n                                      );\n                                    }\n                                    \n                                    console.log(\"🔄 ProcessDetail - Etapas condicionais escondidas (exceto correção/arquivamento):\", conditionalStepsToHide.map(s => s.stepName));\n\n                                    queryClient.invalidateQueries({\n                                      queryKey: [\n                                        `/api/processes/${parsedId}/steps`,\n                                      ],\n                                    });\n\n                                    toast({\n                                      title: \"Checklist resetado\",\n                                      description:\n                                        \"Todas as etapas foram resetadas para o estado inicial.\",\n                                    });\n                                  }\n                                } catch (error) {\n                                  toast({\n                                    title: \"Erro\",\n                                    description:\n                                      \"Não foi possível resetar o checklist.\",\n                                    variant: \"destructive\",\n                                  });\n                                }\n                              }}\n                            >\n                              <RefreshCw className=\"h-4 w-4 mr-2\" />\n                              Corrigir\n                            </Button>\n                            <p className=\"text-sm text-gray-600 mt-2\">\n                              Reseta todas as etapas para o estado inicial e\n                              esconde etapas condicionais\n                                </p>\n                              </center>\n                            </div>\n                          );\n                        })()}\n                        {/* Prazo de Finalização por Fase */}\n                        {currentUser && process && (\n                          <div className=\"mt-6 pt-4 border-t border-gray-200\">\n                            <h4 className=\"text-sm font-medium text-gray-900 mb-3 flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-2 text-orange-600\" />\n                              Prazos de Finalização - Fluxograma Oficial\n                            </h4>\n\n                            {(() => {\n                              const currentPhase = getCurrentPhase(\n                                currentUser.department,\n                              );\n                              const phaseDeadlines = getPhaseDeadlines(\n                                new Date(process.createdAt),\n                              );\n                              const currentPhaseInfo =\n                                phaseDeadlines[\n                                  currentPhase as keyof typeof phaseDeadlines\n                                ];\n\n                              if (!currentPhaseInfo) return null;\n\n                              const daysRemaining = Math.ceil(\n                                (currentPhaseInfo.deadline.getTime() -\n                                  new Date().getTime()) /\n                                  (1000 * 60 * 60 * 24),\n                              );\n                              const isOverdue = daysRemaining < 0;\n                              const isUrgent =\n                                daysRemaining <= 3 && daysRemaining >= 0;\n\n                              return (\n                                <div\n                                  className={`p-3 rounded-lg border-2 ${\n                                    isOverdue\n                                      ? \"bg-red-50 border-red-200\"\n                                      : isUrgent\n                                        ? \"bg-yellow-50 border-yellow-200\"\n                                        : \"bg-green-50 border-green-200\"\n                                  }`}\n                                >\n                                  <div className=\"flex items-center justify-between mb-2\">\n                                    <h5\n                                      className={`font-medium text-sm ${\n                                        isOverdue\n                                          ? \"text-red-800\"\n                                          : isUrgent\n                                            ? \"text-yellow-800\"\n                                            : \"text-green-800\"\n                                      }`}\n                                    >\n                                      {currentPhaseInfo.name}\n                                    </h5>\n                                    <span\n                                      className={`text-xs px-2 py-1 rounded-full font-medium ${\n                                        isOverdue\n                                          ? \"bg-red-200 text-red-800\"\n                                          : isUrgent\n                                            ? \"bg-yellow-200 text-yellow-800\"\n                                            : \"bg-green-200 text-green-800\"\n                                      }`}\n                                    >\n                                      {isOverdue\n                                        ? `${Math.abs(daysRemaining)} dias em atraso`\n                                        : daysRemaining === 0\n                                          ? \"Vence hoje\"\n                                          : `${daysRemaining} dias restantes`}\n                                    </span>\n                                  </div>\n                                  <p className=\"text-xs text-gray-600 mb-2\">\n                                    {currentPhaseInfo.description}\n                                  </p>\n                                  <div className=\"flex items-center text-xs text-gray-500\">\n                                    <Clock className=\"h-3 w-3 mr-1\" />\n                                    Prazo final:{\" \"}\n                                    {format(\n                                      currentPhaseInfo.deadline,\n                                      \"dd/MM/yyyy\",\n                                      { locale: ptBR },\n                                    )}\n                                  </div>\n                                </div>\n                              );\n                            })()}\n\n                            {/* Resumo de todas as fases */}\n                            <div className=\"mt-3 grid grid-cols-2 gap-2\">\n                              {process &&\n                                Object.entries(\n                                  getPhaseDeadlines(\n                                    new Date(process.createdAt),\n                                  ),\n                                ).map(([phase, info]) => {\n                                  const daysFromStart = Math.ceil(\n                                    (info.deadline.getTime() -\n                                      new Date(process.createdAt).getTime()) /\n                                      (1000 * 60 * 60 * 24),\n                                  );\n                                  const isPast = new Date() > info.deadline;\n\n                                  return (\n                                    <div\n                                      key={phase}\n                                      className={`p-2 rounded text-xs border ${\n                                        isPast\n                                          ? \"bg-gray-100 border-gray-300 text-gray-500\"\n                                          : \"bg-white border-gray-200\"\n                                      }`}\n                                    >\n                                      <div className=\"font-medium\">\n                                        {info.name}\n                                      </div>\n                                      <div className=\"text-gray-500\">\n                                        {daysFromStart} dias\n                                      </div>\n                                    </div>\n                                  );\n                                })}\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"flow\">\n          <div className=\"space-y-6\">\n            <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 p-6 rounded-lg border\">\n              <h2 className=\"text-xl font-bold text-gray-800 mb-2\">\n                Fluxograma do Pregão Eletrônico - SEAP/PB\n              </h2>\n              <p className=\"text-gray-600\">\n                Baseado na Lei nº 14.133/2021 - Nova Lei de Licitações e\n                Contratos\n              </p>\n            </div>\n            <p>Fluxograma será implementado aqui.</p>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Modal de Rejeição de Etapa */}\n      <Dialog open={rejectModalOpen} onOpenChange={setRejectModalOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center text-red-600\">\n              <XCircle className=\"h-5 w-5 mr-2\" />\n              Rejeitar Etapa\n            </DialogTitle>\n            <DialogDescription>\n              Etapa: <strong>{stepToReject?.stepName}</strong>\n              <br />\n              Informe o motivo da rejeição desta etapa.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                Motivo da Rejeição *\n              </label>\n              <Textarea\n                value={rejectionComment}\n                onChange={(e) => setRejectionComment(e.target.value)}\n                placeholder=\"Descreva o motivo da rejeição desta etapa...\"\n                className=\"min-h-[100px]\"\n                maxLength={500}\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Mínimo 10 caracteres. {rejectionComment.length}/500\n              </p>\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setRejectModalOpen(false);\n                setStepToReject(null);\n                setRejectionComment(\"\");\n              }}\n            >\n              Cancelar\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={confirmStepRejection}\n              disabled={rejectionComment.trim().length < 10}\n            >\n              <XCircle className=\"h-4 w-4 mr-2\" />\n              Rejeitar Etapa\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Autorização do Secretário SEAP */}\n      <Dialog\n        open={authorizationModalOpen}\n        onOpenChange={setAuthorizationModalOpen}\n      >\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-green-600\">\n              <Check className=\"h-5 w-5\" />\n              Aprovar Etapa de Autorização\n            </DialogTitle>\n            <DialogDescription>\n              Selecione uma das opções de autorização para a etapa:{\" \"}\n              <strong>Autorização pelo Secretário SEAP</strong>\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name=\"authorization-decision\"\n                    value=\"Disponibilidade Orçamentária\"\n                    checked={\n                      authorizationDecision === \"Disponibilidade Orçamentária\"\n                    }\n                    onChange={(e) => setAuthorizationDecision(e.target.value)}\n                    className=\"mt-1\"\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      Disponibilidade Orçamentária\n                    </div>\n                  </div>\n                </label>\n              </div>\n\n              <div>\n                <label className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name=\"authorization-decision\"\n                    value=\"Indisponibilidade Orçamentária total ou parcial\"\n                    checked={\n                      authorizationDecision ===\n                      \"Indisponibilidade Orçamentária total ou parcial\"\n                    }\n                    onChange={(e) => setAuthorizationDecision(e.target.value)}\n                    className=\"mt-1\"\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      Indisponibilidade Orçamentária total ou parcial\n                    </div>\n                  </div>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setAuthorizationModalOpen(false);\n                setAuthorizationDecision(\"\");\n                setStepForAuthorization(null);\n              }}\n            >\n              Cancelar\n            </Button>\n            <Button\n              onClick={() => {\n                console.log(\"🔥 BOTÃO AUTORIZAÇÃO - Clicado!\");\n                handleAuthorizationComplete();\n              }}\n              disabled={!authorizationDecision}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Check className=\"h-4 w-4 mr-2\" />\n              Confirmar Autorização\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Autorizar Emissão de R.O */}\n      <Dialog\n        open={authorizeRoModalOpen}\n        onOpenChange={setAuthorizeRoModalOpen}\n      >\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-green-600\">\n              <Check className=\"h-5 w-5\" />\n              Autorizar Emissão de R.O\n            </DialogTitle>\n            <DialogDescription>\n              Selecione uma das opções para a etapa:{\" \"}\n              <strong>Autorizar Emissão de R.O</strong>\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name=\"authorize-ro-decision\"\n                    value=\"Autorizar\"\n                    checked={authorizeRoDecision === \"Autorizar\"}\n                    onChange={(e) => setAuthorizeRoDecision(e.target.value)}\n                    className=\"mt-1\"\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      Autorizar\n                    </div>\n                  </div>\n                </label>\n              </div>\n\n              <div>\n                <label className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name=\"authorize-ro-decision\"\n                    value=\"Anexar\"\n                    checked={authorizeRoDecision === \"Anexar\"}\n                    onChange={(e) => setAuthorizeRoDecision(e.target.value)}\n                    className=\"mt-1\"\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      Anexar\n                    </div>\n                  </div>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setAuthorizeRoModalOpen(false);\n                setAuthorizeRoDecision(\"\");\n                setStepForAuthorizeRo(null);\n              }}\n            >\n              Cancelar\n            </Button>\n            <Button\n              onClick={() => {\n                console.log(\"🔥 BOTÃO AUTORIZAR R.O - Clicado!\");\n                handleAuthorizeRoComplete();\n              }}\n              disabled={!authorizeRoDecision}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Check className=\"h-4 w-4 mr-2\" />\n              Confirmar\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Rejeição da Autorização do Secretário SEAP */}\n      <Dialog\n        open={authorizationRejectionModalOpen}\n        onOpenChange={setAuthorizationRejectionModalOpen}\n      >\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n              <XCircle className=\"h-5 w-5\" />\n              Rejeitar Etapa de Autorização\n            </DialogTitle>\n            <DialogDescription>\n              Selecione o motivo da rejeição para a etapa:{\" \"}\n              <strong>Autorização pelo Secretário SEAP</strong>\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name=\"authorization-rejection-decision\"\n                    value=\"Não autorizar a defesa ou solicitar reformulação da demanda\"\n                    checked={\n                      authorizationRejectionDecision ===\n                      \"Não autorizar a defesa ou solicitar reformulação da demanda\"\n                    }\n                    onChange={(e) =>\n                      setAuthorizationRejectionDecision(e.target.value)\n                    }\n                    className=\"mt-1\"\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      Não autorizar a defesa ou solicitar reformulação da\n                      demanda\n                    </div>\n                  </div>\n                </label>\n              </div>\n\n              <div>\n                <label className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name=\"authorization-rejection-decision\"\n                    value=\"Recurso de convênio insuficiente - Valor estimado na pesquisa maior que o valor conveniado\"\n                    checked={\n                      authorizationRejectionDecision ===\n                      \"Recurso de convênio insuficiente - Valor estimado na pesquisa maior que o valor conveniado\"\n                    }\n                    onChange={(e) =>\n                      setAuthorizationRejectionDecision(e.target.value)\n                    }\n                    className=\"mt-1\"\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      Recurso de convênio insuficiente - Valor estimado na\n                      pesquisa maior que o valor conveniado\n                    </div>\n                  </div>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setAuthorizationRejectionModalOpen(false);\n                setAuthorizationRejectionDecision(\"\");\n                setStepForAuthorizationRejection(null);\n              }}\n            >\n              Cancelar\n            </Button>\n            <Button\n              onClick={() => {\n                console.log(\"🔥 BOTÃO REJEIÇÃO - Clicado!\");\n                handleAuthorizationRejection();\n              }}\n              disabled={!authorizationRejectionDecision}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              <XCircle className=\"h-4 w-4 mr-2\" />\n              Confirmar Rejeição\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Correção ou Cancelamento */}\n      <Dialog open={correctionModalOpen} onOpenChange={setCorrectionModalOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-orange-600\">\n              <AlertCircle className=\"h-5 w-5\" />\n              Devolver para Correção ou Cancelar Processo\n            </DialogTitle>\n            <DialogDescription>\n              Selecione uma das opções para a etapa:{\" \"}\n              <strong>Devolver para correção ou cancelar processo</strong>\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name=\"correction-decision\"\n                    value=\"Encaminhar ao documento de formalização da demanda novamente\"\n                    checked={\n                      correctionDecision ===\n                      \"Encaminhar ao documento de formalização da demanda novamente\"\n                    }\n                    onChange={(e) => setCorrectionDecision(e.target.value)}\n                    className=\"mt-1\"\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      Encaminhar ao documento de formalização da demanda\n                      novamente\n                    </div>\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      O processo será transferido para a Divisão de Licitação e\n                      reiniciado no fluxo inicial\n                    </div>\n                  </div>\n                </label>\n              </div>\n\n              <div>\n                <label className=\"flex items-start space-x-3 p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name=\"correction-decision\"\n                    value=\"Arquivar processo\"\n                    checked={correctionDecision === \"Arquivar processo\"}\n                    onChange={(e) => setCorrectionDecision(e.target.value)}\n                    className=\"mt-1\"\n                  />\n                  <div>\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      Arquivar processo\n                    </div>\n                    <div className=\"text-xs text-gray-500 mt-1\">\n                      O processo será transferido para a Divisão de Licitação\n                      com etapa de correção\n                    </div>\n                  </div>\n                </label>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setCorrectionModalOpen(false);\n                setCorrectionDecision(\"\");\n                setStepForCorrection(null);\n              }}\n            >\n              Cancelar\n            </Button>\n            <Button\n              onClick={() => {\n                console.log(\"🔥 BOTÃO CORREÇÃO - Clicado!\");\n                handleCorrectionComplete();\n              }}\n              disabled={!correctionDecision}\n              className=\"bg-orange-600 hover:bg-orange-700\"\n            >\n              <ArrowRight className=\"h-4 w-4 mr-2\" />\n              Confirmar Ação\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Confirmação de Arquivamento Final */}\n      <Dialog open={archiveModalOpen} onOpenChange={setArchiveModalOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n              <Archive className=\"h-5 w-5\" />\n              Confirmar arquivamento do processo #{process?.pbdocNumber}?\n            </DialogTitle>\n            <DialogDescription>\n              Tem certeza de que deseja arquivar este processo?{\" \"}\n              <br />\n              O processo será movido para a aba \"Arquivados\" com o motivo: <strong className=\"text-blue-600\">\"Arquivado por processo não autorizado pelo Secretário de Estado da Administração - SEAP\"</strong>\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <div className=\"flex items-start space-x-3\">\n                <AlertCircle className=\"h-5 w-5 text-yellow-600 mt-0.5\" />\n                <div>\n                  <div className=\"text-sm font-medium text-yellow-800\">\n                    Atenção\n                  </div>\n                  <div className=\"text-sm text-yellow-700 mt-1\">\n                    O processo será arquivado e movido para a aba \"Arquivados\". O processo poderá ser restaurado posteriormente se necessário.\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setArchiveModalOpen(false);\n                setStepForArchive(null);\n              }}\n            >\n              Não\n            </Button>\n            <Button\n              onClick={() => {\n                console.log(\"🔥 BOTÃO ARQUIVAMENTO - Clicado!\");\n                handleArchiveProcess();\n              }}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              <Archive className=\"h-4 w-4 mr-2\" />\n              Sim\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Confirmação de Autorizar via sistema */}\n      <Dialog open={autorizarViaSistemaModalOpen} onOpenChange={setAutorizarViaSistemaModalOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-green-600\">\n              <CheckCircle className=\"h-5 w-5\" />\n              Confirmar autorização via sistema do processo #{process?.pbdocNumber}?\n            </DialogTitle>\n            <DialogDescription>\n              Tem certeza de que deseja autorizar este processo via sistema?{\" \"}\n              <br />\n              O processo será autorizado e encaminhado para a próxima etapa: <strong className=\"text-blue-600\">\"Anexar R.O\" na Unidade de Orçamento e Finanças</strong>\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n              <div className=\"flex items-start space-x-3\">\n                <AlertCircle className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                <div>\n                  <div className=\"text-sm font-medium text-green-800\">\n                    Autorização via Sistema\n                  </div>\n                  <div className=\"text-sm text-green-700 mt-1\">\n                    O processo será autorizado pelo sistema e encaminhado para a etapa \"Anexar R.O\" na Unidade de Orçamento e Finanças.\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setAutorizarViaSistemaModalOpen(false);\n                setStepForAutorizarViaSistema(null);\n              }}\n            >\n              Cancelar\n            </Button>\n            <Button\n              onClick={() => {\n                console.log(\"🔥 BOTÃO AUTORIZAR VIA SISTEMA - Clicado!\");\n                handleAutorizarViaSistema();\n              }}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <CheckCircle className=\"h-4 w-4 mr-2\" />\n              Autorizar e Prosseguir\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Confirmação de Reavaliação SUBCC */}\n      <Dialog open={subccRevaluationModalOpen} onOpenChange={setSubccRevaluationModalOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n              <Archive className=\"h-5 w-5\" />\n              Confirmar arquivamento do processo #{process?.pbdocNumber}?\n            </DialogTitle>\n            <DialogDescription>\n              Tem certeza de que deseja arquivar este processo?{\" \"}\n              <br />\n              O processo será movido para a aba \"Arquivados\" com o motivo: <strong className=\"text-blue-600\">\"Arquivado por processo em reavaliação pela Subgerência de Contratos e Convênios - SUBCC\"</strong>\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <div className=\"flex items-start space-x-3\">\n                <AlertCircle className=\"h-5 w-5 text-yellow-600 mt-0.5\" />\n                <div>\n                  <div className=\"text-sm font-medium text-yellow-800\">\n                    Atenção\n                  </div>\n                  <div className=\"text-sm text-yellow-700 mt-1\">\n                    O processo será arquivado e movido para a aba \"Arquivados\" por reavaliação SUBCC. O processo poderá ser restaurado posteriormente se necessário.\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setSubccRevaluationModalOpen(false);\n                setStepForSubccRevaluation(null);\n              }}\n            >\n              Não\n            </Button>\n            <Button\n              onClick={() => {\n                console.log(\"🔥 BOTÃO REAVALIAÇÃO SUBCC - Clicado!\");\n                handleSubccRevaluation();\n              }}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              <Archive className=\"h-4 w-4 mr-2\" />\n              Sim\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modal de Confirmação de Arquivamento - Fluxo Repror */}\n      <Dialog open={fluxoReprorModalOpen} onOpenChange={setFluxoReprorModalOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n              <Archive className=\"h-5 w-5\" />\n              Confirmar arquivamento do processo #{process?.pbdocNumber}?\n            </DialogTitle>\n            <DialogDescription>\n              {stepForFluxoRepror ? (\n                <div className=\"space-y-4\">\n                  <p className=\"text-gray-600\">\n                    Este processo será <strong>arquivado</strong> por processo em reavaliação pela \n                    Unidade de Orçamento e Finanças e movido para a aba \"Arquivados\".\n                  </p>\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                    <div className=\"flex items-start\">\n                      <AlertTriangle className=\"h-5 w-5 text-yellow-600 mt-0.5 mr-3 flex-shrink-0\" />\n                      <div>\n                        <p className=\"text-sm font-medium text-yellow-800 mb-1\">\n                          Atenção\n                        </p>\n                        <p className=\"text-sm text-yellow-700\">\n                          O processo será movido para a aba \"Arquivados\" e não poderá ser editado. \n                          Esta ação pode ser revertida pelos administradores.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <p>Carregando informações do processo...</p>\n              )}\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setFluxoReprorModalOpen(false);\n                setStepForFluxoRepror(null);\n              }}\n            >\n              Não\n            </Button>\n            <Button\n              onClick={() => {\n                console.log(\"🔥 BOTÃO FLUXO REPROR - Clicado!\");\n                handleFluxoReprorArchive();\n              }}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              <Archive className=\"h-4 w-4 mr-2\" />\n              Sim\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Modais existentes */}\n    </div>\n  );\n};\n\nexport default ProcessDetail;\n","size_bytes":174847},"client/src/pages/ProcessEdit.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Process, InsertProcess } from \"@shared/schema\";\nimport ProcessForm from \"@/components/process/ProcessForm\";\nimport { AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ProcessEditProps {\n  id: string;\n}\n\nconst ProcessEdit = ({ id }: ProcessEditProps) => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const parsedId = parseInt(id);\n  \n  // Fetch process data\n  const { data: process, isLoading, error } = useQuery<Process>({\n    queryKey: [`/api/processes/${parsedId}`],\n  });\n  \n  const handleSubmit = async (data: InsertProcess) => {\n    setIsSubmitting(true);\n    \n    try {\n      // Update the process\n      await apiRequest(\"PATCH\", `/api/processes/${parsedId}`, data);\n      \n      // Show success message\n      toast({\n        title: \"Processo atualizado\",\n        description: \"O processo foi atualizado com sucesso\",\n      });\n      \n      // Invalidate queries to refresh the processes list and details\n      queryClient.invalidateQueries({ queryKey: ['/api/processes'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/processes/${parsedId}`] });\n      \n      // Navigate to the process details page\n      setLocation(`/processes/${parsedId}`);\n    } catch (error) {\n      console.error(\"Error updating process:\", error);\n      \n      // Show error message\n      toast({\n        title: \"Erro ao atualizar processo\",\n        description: \"Não foi possível atualizar o processo. Tente novamente.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  if (isLoading) {\n    return <div className=\"p-8 text-center\">Carregando dados do processo...</div>;\n  }\n  \n  if (error || !process) {\n    return (\n      <div className=\"p-8 text-center\">\n        <AlertCircle className=\"h-10 w-10 text-red-500 mx-auto mb-4\" />\n        <h2 className=\"text-xl font-semibold mb-2\">Erro ao carregar processo</h2>\n        <p>Não foi possível carregar os detalhes do processo para edição.</p>\n        <Button onClick={() => setLocation(\"/processes\")} className=\"mt-4\">\n          Voltar para Processos\n        </Button>\n      </div>\n    );\n  }\n  \n  return (\n    <div>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-gray-800\">Editar Processo</h1>\n        <p className=\"text-gray-600\">Edite as informações do processo {process.pbdocNumber}</p>\n      </div>\n      \n      <ProcessForm \n        onSubmit={handleSubmit} \n        isSubmitting={isSubmitting}\n        initialData={process}\n      />\n    </div>\n  );\n};\n\nexport default ProcessEdit;","size_bytes":2948},"client/src/pages/ProcessReport.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Process, BiddingModality, ResourceSource, User, ProcessStep, Department } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { FileText, Download, ArrowLeft, Printer } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { getProcessStatusLabel, getProcessPriorityLabel } from \"@/lib/utils/process\";\n\ninterface ProcessReportProps {\n  id: string;\n}\n\nconst ProcessReport = ({ id }: ProcessReportProps) => {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isGenerating, setIsGenerating] = useState(false);\n  const parsedId = parseInt(id);\n\n  // Get process details\n  const { data: process, isLoading: processLoading } = useQuery<Process>({\n    queryKey: [`/api/processes/${parsedId}`],\n  });\n\n  // Get modalities\n  const { data: modalities } = useQuery<BiddingModality[]>({\n    queryKey: ['/api/modalities'],\n  });\n\n  // Get sources\n  const { data: sources } = useQuery<ResourceSource[]>({\n    queryKey: ['/api/sources'],\n  });\n\n  // Get users\n  const { data: users } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n\n  // Get departments\n  const { data: departments } = useQuery<Department[]>({\n    queryKey: ['/api/departments'],\n  });\n\n  // Get process steps\n  const { data: steps } = useQuery<ProcessStep[]>({\n    queryKey: [`/api/processes/${parsedId}/steps`],\n    enabled: !!process,\n  });\n\n  const generatePDF = async () => {\n    setIsGenerating(true);\n    try {\n      const response = await fetch(`/api/processes/${parsedId}/report`, {\n        method: 'GET',\n        headers: {\n          'Accept': 'text/html',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Erro ao gerar relatório');\n      }\n\n      const htmlContent = await response.text();\n      \n      // Abrir uma nova janela com o conteúdo HTML para impressão\n      const printWindow = window.open('', '_blank');\n      if (printWindow) {\n        printWindow.document.write(htmlContent);\n        printWindow.document.close();\n        \n        // Aguardar o carregamento e iniciar impressão\n        printWindow.onload = () => {\n          setTimeout(() => {\n            printWindow.print();\n          }, 500);\n        };\n      }\n\n      toast({\n        title: \"Relatório aberto\",\n        description: \"Use Ctrl+P ou o menu de impressão para salvar como PDF\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro ao gerar relatório\",\n        description: \"Não foi possível gerar o relatório\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const printReport = () => {\n    window.print();\n  };\n\n  if (processLoading) {\n    return <div className=\"p-8 text-center\">Carregando processo...</div>;\n  }\n\n  if (!process) {\n    return (\n      <div className=\"p-8 text-center\">\n        <h2 className=\"text-xl font-semibold mb-2\">Processo não encontrado</h2>\n        <Button onClick={() => setLocation(\"/processes\")}>\n          Voltar para Processos\n        </Button>\n      </div>\n    );\n  }\n\n  const modality = modalities?.find(m => m.id === process.modalityId);\n  const source = sources?.find(s => s.id === process.sourceId);\n  const responsible = users?.find(u => u.id === process.responsibleId);\n  const currentDepartment = departments?.find(d => d.id === process.currentDepartmentId);\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Header com ações */}\n      <div className=\"flex justify-between items-center mb-6 no-print\">\n        <Button\n          variant=\"outline\"\n          onClick={() => setLocation(`/processes/${parsedId}`)}\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Voltar ao Processo\n        </Button>\n        \n        <div className=\"flex space-x-2\">\n          <Button variant=\"outline\" onClick={printReport}>\n            <Printer className=\"h-4 w-4 mr-2\" />\n            Imprimir\n          </Button>\n          <Button onClick={generatePDF} disabled={isGenerating}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            {isGenerating ? \"Abrindo...\" : \"Gerar PDF\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Relatório imprimível */}\n      <div className=\"bg-white print:shadow-none\">\n        <Card className=\"print:border-none print:shadow-none\">\n          <CardHeader className=\"text-center border-b\">\n            <div className=\"mb-4\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                SEAP - Secretaria de Estado da Administração Penitenciária\n              </h1>\n              <p className=\"text-gray-600 mt-2\">Relatório de Processo Licitatório</p>\n            </div>\n            <CardTitle className=\"text-xl\">\n              Processo Nº {process.pbdocNumber}\n            </CardTitle>\n          </CardHeader>\n          \n          <CardContent className=\"pt-6\">\n            {/* Informações Básicas */}\n            <section className=\"mb-8\">\n              <h2 className=\"text-lg font-semibold mb-4 text-blue-800 border-b border-blue-200 pb-2\">\n                Informações Básicas\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"font-medium text-gray-700\">Número PBDOC:</label>\n                  <p className=\"text-gray-900\">{process.pbdocNumber}</p>\n                </div>\n                <div>\n                  <label className=\"font-medium text-gray-700\">Status:</label>\n                  <p className=\"text-gray-900\">{getProcessStatusLabel(process.status)}</p>\n                </div>\n                <div>\n                  <label className=\"font-medium text-gray-700\">Modalidade:</label>\n                  <p className=\"text-gray-900\">{modality?.name || \"Não informado\"}</p>\n                </div>\n                <div>\n                  <label className=\"font-medium text-gray-700\">Prioridade:</label>\n                  <p className=\"text-gray-900\">{getProcessPriorityLabel(process.priority)}</p>\n                </div>\n                <div>\n                  <label className=\"font-medium text-gray-700\">Fonte de Recurso:</label>\n                  <p className=\"text-gray-900\">\n                    {source ? `${source.code} - ${source.description}` : \"Não informado\"}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"font-medium text-gray-700\">Responsável:</label>\n                  <p className=\"text-gray-900\">{responsible?.fullName || \"Não informado\"}</p>\n                </div>\n                <div>\n                  <label className=\"font-medium text-gray-700\">Departamento Atual:</label>\n                  <p className=\"text-gray-900\">{currentDepartment?.name || \"Não informado\"}</p>\n                </div>\n                <div>\n                  <label className=\"font-medium text-gray-700\">Central de Compras:</label>\n                  <p className=\"text-gray-900\">{process.centralDeCompras || \"Não informado\"}</p>\n                </div>\n              </div>\n            </section>\n\n            <Separator className=\"my-6\" />\n\n            {/* Objeto */}\n            <section className=\"mb-8\">\n              <h2 className=\"text-lg font-semibold mb-4 text-blue-800 border-b border-blue-200 pb-2\">\n                Objeto\n              </h2>\n              <p className=\"text-gray-900 leading-relaxed\">{process.description}</p>\n            </section>\n\n            <Separator className=\"my-6\" />\n\n            {/* Datas */}\n            <section className=\"mb-8\">\n              <h2 className=\"text-lg font-semibold mb-4 text-blue-800 border-b border-blue-200 pb-2\">\n                Cronograma\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"font-medium text-gray-700\">Data de Criação:</label>\n                  <p className=\"text-gray-900\">\n                    {format(new Date(process.createdAt), \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR })}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"font-medium text-gray-700\">Última Atualização:</label>\n                  <p className=\"text-gray-900\">\n                    {format(new Date(process.updatedAt), \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR })}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"font-medium text-gray-700\">Prazo de Entrega:</label>\n                  <p className=\"text-gray-900\">\n                    {process.deadline ? format(new Date(process.deadline), \"dd/MM/yyyy\", { locale: ptBR }) : \"Não definido\"}\n                  </p>\n                </div>\n              </div>\n            </section>\n\n            {/* Comentários de Retorno */}\n            {process.returnComments && (\n              <>\n                <Separator className=\"my-6\" />\n                <section className=\"mb-8\">\n                  <h2 className=\"text-lg font-semibold mb-4 text-red-800 border-b border-red-200 pb-2\">\n                    Comentários de Retorno\n                  </h2>\n                  <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                    <p className=\"text-red-900\">{process.returnComments}</p>\n                  </div>\n                </section>\n              </>\n            )}\n\n            {/* Histórico de Etapas */}\n            {steps && steps.length > 0 && (\n              <>\n                <Separator className=\"my-6\" />\n                <section className=\"mb-8\">\n                  <h2 className=\"text-lg font-semibold mb-4 text-blue-800 border-b border-blue-200 pb-2\">\n                    Histórico de Etapas\n                  </h2>\n                  <div className=\"space-y-4\">\n                    {steps.map((step, index) => {\n                      const stepDepartment = departments?.find(d => d.id === step.departmentId);\n                      const completedBy = users?.find(u => u.id === step.completedBy);\n                      \n                      return (\n                        <div key={step.id} className=\"border rounded-lg p-4 bg-gray-50\">\n                          <div className=\"flex justify-between items-start mb-2\">\n                            <h3 className=\"font-medium text-gray-900\">\n                              {index + 1}. {step.stepName}\n                            </h3>\n                            <span className={`px-2 py-1 rounded text-xs font-medium ${\n                              step.isCompleted \n                                ? 'bg-green-100 text-green-800' \n                                : 'bg-yellow-100 text-yellow-800'\n                            }`}>\n                              {step.isCompleted ? 'Concluída' : 'Em andamento'}\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-gray-600 space-y-1\">\n                            <p><strong>Departamento:</strong> {stepDepartment?.name || \"Não informado\"}</p>\n                            <p><strong>Responsável:</strong> {completedBy?.fullName || \"Não informado\"}</p>\n                            {step.completedAt && (\n                              <p><strong>Data de Conclusão:</strong> {format(new Date(step.completedAt), \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR })}</p>\n                            )}\n                            {step.observations && (\n                              <p><strong>Observações:</strong> {step.observations}</p>\n                            )}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </section>\n              </>\n            )}\n\n            <Separator className=\"my-6\" />\n\n            {/* Footer */}\n            <footer className=\"text-center text-sm text-gray-500 mt-8 border-t pt-4\">\n              <p>Relatório gerado em {format(new Date(), \"dd/MM/yyyy 'às' HH:mm\", { locale: ptBR })}</p>\n              <p>SEAP - Secretaria de Estado da Administração Penitenciária da Paraíba</p>\n            </footer>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default ProcessReport;","size_bytes":12537},"client/src/pages/ProcessTransfer.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Process, Department } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ArrowLeft, ArrowRight, CheckCircle, ChevronDown, ChevronUp } from \"lucide-react\";\n\ninterface ProcessTransferProps {\n  id: string;\n}\n\nconst ProcessTransfer = ({ id }: ProcessTransferProps) => {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedDepartmentId, setSelectedDepartmentId] = useState<string>(\"\");\n  const [showReturnPanel, setShowReturnPanel] = useState(false);\n  const [allowAllPreviousDepartments, setAllowAllPreviousDepartments] = useState(false);\n  const [selectedReturnDepartment, setSelectedReturnDepartment] = useState<string>(\"\");\n  const parsedId = parseInt(id);\n\n  // Get process details\n  const { data: process, isLoading: processLoading } = useQuery<Process>({\n    queryKey: [`/api/processes/${parsedId}`],\n  });\n\n  // Get departments\n  const { data: departments } = useQuery<Department[]>({\n    queryKey: ['/api/departments'],\n  });\n\n  // Get current user\n  const { data: currentUser } = useQuery<any>({\n    queryKey: ['/api/auth/status'],\n  });\n\n  const isAdmin = currentUser?.role === 'admin';\n\n  // Get process steps\n  const { data: steps } = useQuery<any[]>({\n    queryKey: [`/api/processes/${parsedId}/steps`],\n    enabled: !!process,\n  });\n\n  // Transfer mutation\n  const transferMutation = useMutation({\n    mutationFn: async (departmentId: number) => {\n      const response = await apiRequest(\"POST\", `/api/processes/${parsedId}/transfer`, {\n        departmentId\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Processo transferido\",\n        description: \"O processo foi transferido com sucesso\"\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/processes/${parsedId}`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/processes'] });\n      setLocation(`/processes/${parsedId}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro na transferência\",\n        description: error.message || \"Não foi possível transferir o processo\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Return mutation\n  const returnMutation = useMutation({\n    mutationFn: async ({ departmentId, comment }: { departmentId: number; comment: string }) => {\n      const response = await apiRequest(\"POST\", `/api/processes/${parsedId}/return`, {\n        departmentId,\n        comment\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Processo retornado\",\n        description: \"O processo foi retornado com sucesso\"\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/processes/${parsedId}`] });\n      queryClient.invalidateQueries({ queryKey: ['/api/processes'] });\n      setLocation(`/processes/${parsedId}`);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Erro ao retornar processo\",\n        description: error.message || \"Não foi possível retornar o processo\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleTransfer = () => {\n    if (!selectedDepartmentId) {\n      toast({\n        title: \"Departamento necessário\",\n        description: \"Selecione um departamento para transferir o processo\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    transferMutation.mutate(parseInt(selectedDepartmentId));\n  };\n\n  if (processLoading) {\n    return <div className=\"p-8 text-center\">Carregando processo...</div>;\n  }\n\n  if (!process) {\n    return (\n      <div className=\"p-8 text-center\">\n        <h2 className=\"text-xl font-semibold mb-2\">Processo não encontrado</h2>\n        <Button onClick={() => setLocation(\"/processes\")}>\n          Voltar para Processos\n        </Button>\n      </div>\n    );\n  }\n\n  // Get process steps to check completion\n  const { data: processSteps } = useQuery<any[]>({\n    queryKey: [`/api/processes/${parsedId}/steps`],\n    enabled: !!process,\n  });\n\n  // Definir a ordem do fluxo dos departamentos\n  const departmentFlow = [\n    1, // Setor de Solicitação\n    2, // Divisão de Licitação\n    3, // Coordenação de Licitação\n    4, // Direção de Administração\n    5, // Gabinete do Secretário\n    6  // Arquivo/Finalização\n  ];\n  \n  // Encontrar o índice do departamento atual no fluxo\n  const currentIndex = departmentFlow.findIndex(id => id === process.currentDepartmentId);\n  \n  // Importar função para obter etapas do setor\n  const getSectorSteps = (departmentName: string, modalityId: number) => {\n    // Verificar se NPP completou suas etapas principais\n    const isNPPCompleted = () => {\n      const nppSteps = [\n        \"Pesquisa de Preços\",\n        \"Mapa Comparativo de Preços\"\n      ];\n      \n      return nppSteps.every(stepName => {\n        const step = processSteps?.find(s => s.stepName === stepName);\n        return step?.isCompleted;\n      });\n    };\n\n    // Lógica das etapas baseada no departamento e modalidade\n    const stepsByDepartment: Record<string, any[]> = {\n      \"Setor Demandante\": [\n        { name: \"Documento de Formalização da Demanda - DFD\", phase: \"Iniciação\" },\n        { name: \"Estudo Técnico Preliminar - ETP\", phase: \"Iniciação\" },\n        { name: \"Mapa de Risco - MR\", phase: \"Iniciação\" },\n        { name: \"Termo de Referência - TR\", phase: \"Iniciação\" }\n      ],\n      \"Divisão de Licitação\": [\n        { name: \"Criar Processo - Órgão\", phase: \"Preparação\" },\n        { name: \"Fazer Pesquisa de Preço - Órgão\", phase: \"Preparação\" },\n        { name: \"Solicitar Pesquisa de Preços\", phase: \"Preparação\" },\n        // Estas etapas só aparecem após NPP completar\n        ...(isNPPCompleted() ? [\n          { name: \"Inserir Pesquisa no Sistema\", phase: \"Execução\" },\n          { name: \"Solicitar Análise Orçamentária\", phase: \"Execução\" },\n        ] : [])\n      ],\n      \"Núcleo de Pesquisa de Preços – NPP\": [\n        { name: \"Pesquisa de Preços\", phase: \"Preparação\" },\n        { name: \"Mapa Comparativo de Preços\", phase: \"Preparação\" }\n      ],\n      \"Unidade de Orçamento e Finanças\": [\n        { name: \"Informar Disponibilidade Orçamentária p/ Emissão de R.O.\", phase: \"Execução\" }\n      ],\n      \"Secretário de Estado da Administração Penitenciária - SEAP\": [\n        { name: \"Autorização pelo Secretário SEAP\", phase: \"Autorização\" }\n      ]\n    };\n    return stepsByDepartment[departmentName] || [];\n  };\n\n  // Verificar se todas as etapas do setor atual estão concluídas\n  const currentDepartment = departments?.find(d => d.id === process.currentDepartmentId);\n  const currentDepartmentName = currentDepartment?.name || \"\";\n  \n  // ESPECIAL: Verificar se estamos na Divisão de Licitação com etapa de correção\n  let expectedSteps: any[] = [];\n  let currentDepartmentSteps: any[] = [];\n  let allStepsCompleted = false;\n  \n  if (process.currentDepartmentId === 2) {\n    // Divisão de Licitação - validação simplificada\n    \n    // PRIORIDADE 1: Arquivamento\n    const archiveFinalStep = processSteps?.find(s => \n      s.stepName === \"Arquivar processo - Final\" && s.departmentId === 2\n    );\n    \n    const archiveFromDemandante = processSteps?.find(s => \n      s.stepName === \"Arquivar processo\" && s.departmentId === 1 && s.isCompleted === true\n    );\n    \n    if (archiveFinalStep || archiveFromDemandante) {\n      expectedSteps = [{ name: \"Arquivar processo - Final\" }];\n      currentDepartmentSteps = processSteps?.filter(step => \n        step.stepName === \"Arquivar processo - Final\"\n      ) || [];\n    } else {\n      // PRIORIDADE 2: Correção\n      const correctionStep = processSteps?.find(s => \n        s.stepName === \"Devolver para correção ou cancelar processo\" && s.departmentId === 2\n      );\n      \n      if (correctionStep) {\n        expectedSteps = [{ name: \"Devolver para correção ou cancelar processo\" }];\n        currentDepartmentSteps = [correctionStep];\n      } else {\n        // PADRÃO: Fluxo normal\n        expectedSteps = getSectorSteps(currentDepartmentName, process.modalityId);\n        currentDepartmentSteps = processSteps?.filter(step => \n          expectedSteps.some(expectedStep => expectedStep.name === step.stepName)\n        ) || [];\n      }\n    }\n  } else if (process.currentDepartmentId === 5) {\n    // Secretário de Estado - verificar se existe etapa intermediária\n    const intermediateStep = processSteps?.find(s => \n      s.stepName === \"Devolver para correção ou arquivamento\"\n    );\n    \n    if (intermediateStep) {\n      // Se existe etapa intermediária, validar apenas ela se não estiver completa\n      if (!intermediateStep.isCompleted) {\n        expectedSteps = [{ name: \"Devolver para correção ou arquivamento\" }];\n        currentDepartmentSteps = [intermediateStep];\n      } else {\n        // Se já está completa, usar lógica normal\n        expectedSteps = getSectorSteps(currentDepartmentName, process.modalityId);\n        currentDepartmentSteps = processSteps?.filter(step => \n          expectedSteps.some(expectedStep => expectedStep.name === step.stepName)\n        ) || [];\n      }\n    } else {\n      // Contexto normal do Secretário de Estado\n      expectedSteps = getSectorSteps(currentDepartmentName, process.modalityId);\n      currentDepartmentSteps = processSteps?.filter(step => \n        expectedSteps.some(expectedStep => expectedStep.name === step.stepName)\n      ) || [];\n    }\n  } else if (process.currentDepartmentId === 1) {\n    // Setor Demandante - verificar se está no contexto de arquivamento\n    const archiveStep = processSteps?.find(s => \n      s.stepName === \"Arquivar processo\" && s.departmentId === 1\n    );\n    \n    if (archiveStep) {\n      // Se existe etapa de arquivamento, validar apenas ela\n      expectedSteps = [{ name: \"Arquivar processo\" }];\n      currentDepartmentSteps = [archiveStep];\n    } else {\n      // Contexto normal do Setor Demandante\n      expectedSteps = getSectorSteps(currentDepartmentName, process.modalityId);\n      currentDepartmentSteps = processSteps?.filter(step => \n        expectedSteps.some(expectedStep => expectedStep.name === step.stepName)\n      ) || [];\n    }\n  } else {\n    // Outros departamentos - lógica normal\n    expectedSteps = getSectorSteps(currentDepartmentName, process.modalityId);\n    currentDepartmentSteps = processSteps?.filter(step => \n      expectedSteps.some(expectedStep => expectedStep.name === step.stepName)\n    ) || [];\n  }\n  \n  const incompleteSteps = currentDepartmentSteps.filter(step => !step.isCompleted);\n  allStepsCompleted = expectedSteps.length > 0 && currentDepartmentSteps.length >= expectedSteps.length && incompleteSteps.length === 0;\n  \n  // Debug temporário\n  console.log(\"Transfer validation debug:\", {\n    currentDepartmentId: process.currentDepartmentId,\n    currentDepartmentName,\n    modalityId: process.modalityId,\n    expectedStepsCount: expectedSteps.length,\n    foundStepsCount: currentDepartmentSteps.length,\n    incompleteSteps: incompleteSteps.length,\n    allStepsCompleted,\n    expectedSteps: expectedSteps.map(s => s.name),\n    foundSteps: currentDepartmentSteps.map(s => ({ \n      name: s.stepName, \n      departmentId: s.departmentId, \n      isCompleted: s.isCompleted \n    }))\n  });\n  \n  // Determinar os departamentos disponíveis baseado no fluxo específico\n  const availableDepartments: Department[] = [];\n  \n  // Função auxiliar para verificar se NPP completou suas etapas\n  const isNPPCompleted = () => {\n    const nppSteps = [\n      \"Pesquisa de Preços\",\n      \"Mapa Comparativo de Preços\"\n    ];\n    \n    return nppSteps.every(stepName => {\n      const step = processSteps?.find(s => s.stepName === stepName);\n      return step?.isCompleted;\n    });\n  };\n\n  // Fluxo customizado baseado no departamento atual\n  if (process.currentDepartmentId === 1) {\n    // Setor Demandante → Divisão de Licitação\n    const nextDepartment = departments?.find(d => d.id === 2);\n    if (nextDepartment) availableDepartments.push(nextDepartment);\n  } else if (process.currentDepartmentId === 2) {\n    // Divisão de Licitação - lógica simplificada baseada em prioridades\n    \n    // PRIORIDADE 1: Arquivamento final concluído = processo finalizado\n    const archiveFinalCompleted = processSteps?.find(s => \n      s.stepName === \"Arquivar processo - Final\" && s.departmentId === 2 && s.isCompleted\n    );\n    \n    if (archiveFinalCompleted) {\n      console.log(\"🔍 TRANSFER - Processo arquivado, bloqueando transferências\");\n      // availableDepartments fica vazio = sem transferências\n    } else {\n      // PRIORIDADE 2: Verificar se é fluxo de correção concluído\n      const correctionCompleted = processSteps?.find(s => \n        s.stepName === \"Devolver para correção ou cancelar processo\" && s.departmentId === 2 && s.isCompleted\n      );\n      \n      if (correctionCompleted) {\n        // Correção concluída → pode ir para Setor Demandante\n        const setorDemandante = departments?.find(d => d.id === 1);\n        if (setorDemandante) availableDepartments.push(setorDemandante);\n      } else {\n        // PRIORIDADE 3: Fluxo normal baseado no NPP\n        if (isNPPCompleted()) {\n          const nextDepartment = departments?.find(d => d.id === 4);\n          if (nextDepartment) availableDepartments.push(nextDepartment);\n        } else {\n          const nextDepartment = departments?.find(d => d.id === 3);\n          if (nextDepartment) availableDepartments.push(nextDepartment);\n        }\n      }\n    }\n  } else if (process.currentDepartmentId === 3) {\n    // NPP → Divisão de Licitação (retorno)\n    const nextDepartment = departments?.find(d => d.id === 2);\n    if (nextDepartment) availableDepartments.push(nextDepartment);\n  } else if (process.currentDepartmentId === 4) {\n    // Unidade de Orçamento e Finanças\n    // Verificar se existe etapa \"Anexar R.O\" criada\n    const anexarRoStep = processSteps?.find(s => s.stepName === \"Anexar R.O\" && s.departmentId === 4);\n    \n    if (anexarRoStep && !anexarRoStep.isCompleted) {\n      // Se etapa \"Anexar R.O\" existe e não está concluída, o processo pode permanecer no mesmo departamento\n      console.log(\"🔍 TRANSFER - Etapa 'Anexar R.O' encontrada, permitindo transferência para próprio departamento\");\n      const orcamentoFinancas = departments?.find(d => d.id === 4);\n      if (orcamentoFinancas) availableDepartments.push(orcamentoFinancas);\n    } else {\n      // Fluxo normal: Unidade de Orçamento e Finanças → Secretário SEAP\n      const nextDepartment = departments?.find(d => d.id === 5);\n      if (nextDepartment) availableDepartments.push(nextDepartment);\n    }\n  } else if (process.currentDepartmentId === 5) {\n    // Secretário SEAP - depois da autorização, pode ir para diferentes fluxos\n    \n    // PRIORIDADE 1: Verificar se tem etapa \"Devolver para correção ou arquivamento\" concluída\n    const correctionStep = processSteps?.find(s => \n      s.stepName === \"Devolver para correção ou arquivamento\" && s.departmentId === 5 && s.isCompleted\n    );\n    \n    if (correctionStep) {\n      // Se etapa de correção foi concluída, permite tramitar para Divisão de Licitação\n      const divisaoLicitacao = departments?.find(d => d.id === 2);\n      if (divisaoLicitacao) availableDepartments.push(divisaoLicitacao);\n    } else {\n      // PRIORIDADE 2: Verificar se a etapa \"Solicitar disponibilização de orçamento\" foi concluída\n      const budgetRequestStep = processSteps?.find(s => \n        s.stepName === \"Solicitar disponibilização de orçamento\" && s.isCompleted\n      );\n      \n      if (budgetRequestStep) {\n        // Se \"Solicitar disponibilização de orçamento\" foi concluída, permite tramitar para Unidade de Orçamento e Finanças (Fluxo Repror)\n        const orcamentoFinancas = departments?.find(d => d.id === 4);\n        if (orcamentoFinancas) availableDepartments.push(orcamentoFinancas);\n      } else {\n        // PRIORIDADE 3: Verificar outros fluxos de autorização\n        const authStep = processSteps?.find(s => s.stepName === \"Autorização pelo Secretário SEAP\" && s.isCompleted);\n        if (authStep) {\n          // Baseado na decisão da autorização, liberar departamentos específicos\n          if (authStep.observations?.includes(\"INDISPONIBILIDADE ORÇAMENTÁRIA TOTAL OU PARCIAL\")) {\n            // Pode transferir para Unidade de Orçamento e Finanças (Fluxo Repror)\n            const orcamentoFinancas = departments?.find(d => d.id === 4);\n            if (orcamentoFinancas) availableDepartments.push(orcamentoFinancas);\n          } else if (authStep.observations?.includes(\"DISPONIBILIDADE ORÇAMENTÁRIA\")) {\n            // Permanece no mesmo setor (SEAP) para AUTORIZAR EMISSÃO DE R.O.\n            const seap = departments?.find(d => d.id === 5);\n            if (seap) availableDepartments.push(seap);\n          } else if (authStep.observations?.includes(\"Recurso de convênio insuficiente\")) {\n            // Verificar se a etapa de ajuste foi concluída\n            const adjustmentStep = processSteps?.find(s => s.stepName === \"Solicitar ajuste/aditivo do plano de trabalho\" && s.isCompleted);\n            if (adjustmentStep) {\n              // Pode transferir para SUBCC para reavaliação do plano de trabalho\n              const subcc = departments?.find(d => d.id === 11);\n              if (subcc) availableDepartments.push(subcc);\n            }\n          }\n        }\n      }\n    }\n  } else {\n    // Fluxo sequencial padrão para outros departamentos\n    if (currentIndex !== -1 && currentIndex < departmentFlow.length - 1) {\n      const nextDepartmentId = departmentFlow[currentIndex + 1];\n      const nextDepartment = departments?.find(d => d.id === nextDepartmentId);\n      if (nextDepartment) {\n        availableDepartments.push(nextDepartment);\n      }\n    }\n  }\n  \n  // Se não há departamento seguinte, o processo pode estar concluído\n  const isLastDepartment = currentIndex === departmentFlow.length - 1;\n\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <ArrowRight className=\"h-5 w-5 mr-2\" />\n            Transferir Processo\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div>\n            <h3 className=\"font-semibold text-lg mb-2\">Processo: {process.pbdocNumber}</h3>\n            <p className=\"text-gray-600\">{process.description}</p>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium mb-4\">Fluxo de Transferência</label>\n            \n            \n            {/* Visualização do fluxo de departamentos */}\n            <div className=\"space-y-4\">\n              {/* Mostrar departamento atual */}\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"flex-1 p-4 rounded-lg border-2 bg-blue-50 border-blue-400 text-blue-800\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <h4 className=\"font-medium\">{currentDepartmentName}</h4>\n                      <p className=\"text-sm opacity-75\">Atual</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-xs bg-blue-200 text-blue-800 px-2 py-1 rounded\">\n                        Departamento Atual\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Seta indicando transferência */}\n              {availableDepartments.length > 0 && (\n                <div className=\"flex justify-center\">\n                  <ArrowRight className=\"h-6 w-6 text-orange-500\" />\n                </div>\n              )}\n\n              {/* Mostrar próximo departamento disponível */}\n              {availableDepartments.length > 0 ? (\n                availableDepartments.map((dept) => (\n                  <div key={dept.id} className=\"flex items-center space-x-3\">\n                    <div className=\"flex-1 p-4 rounded-lg border-2 bg-orange-50 border-orange-300 text-orange-800 border-dashed\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">{dept.name}</h4>\n                          <p className=\"text-sm opacity-75\">Próximo</p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-xs bg-orange-200 text-orange-800 px-2 py-1 rounded\">\n                            Destino\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"flex-1 p-4 rounded-lg border-2 bg-green-50 border-green-300 text-green-800\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h4 className=\"font-medium\">Processo Finalizado</h4>\n                        <p className=\"text-sm opacity-75\">Não há mais departamentos para transferência</p>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-xs bg-green-200 text-green-800 px-2 py-1 rounded\">\n                          Concluído\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Fluxo sequencial padrão (oculto, mantido apenas para referência) */}\n            <div className=\"hidden space-y-4\">\n              {departmentFlow.map((deptId, index) => {\n                const dept = departments?.find(d => d.id === deptId);\n                if (!dept) return null;\n                \n                const isPrevious = index < currentIndex;\n                const isCurrent = index === currentIndex;\n                const isNext = index === currentIndex + 1;\n                const isFuture = index > currentIndex + 1;\n                \n                return (\n                  <div key={deptId} className=\"flex items-center space-x-3\">\n                    {/* Botão do departamento */}\n                    <div\n                      className={`flex-1 p-4 rounded-lg border-2 transition-all ${\n                        isPrevious \n                          ? \"bg-green-50 border-green-200 text-green-800\"\n                          : isCurrent \n                            ? \"bg-blue-50 border-blue-400 text-blue-800\"\n                            : isNext \n                              ? \"bg-orange-50 border-orange-300 text-orange-800 border-dashed\"\n                              : \"bg-gray-50 border-gray-200 text-gray-500\"\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">{dept.name}</h4>\n                          <p className=\"text-sm opacity-75\">\n                            {isPrevious && \"Concluído\"}\n                            {isCurrent && \"Atual\"}\n                            {isNext && \"Próximo\"}\n                            {isFuture && \"Aguardando\"}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center\">\n                          {isPrevious && <CheckCircle className=\"h-5 w-5 text-green-600\" />}\n                          {isCurrent && <div className=\"h-3 w-3 bg-blue-500 rounded-full animate-pulse\" />}\n                          {isNext && <ArrowRight className=\"h-5 w-5 text-orange-600\" />}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* Área de confirmação */}\n            <div className=\"mt-6 space-y-4\">\n              {/* Status das etapas do setor atual */}\n              {currentDepartmentSteps.length > 0 && (\n                <div className={`p-4 rounded-lg border ${\n                  allStepsCompleted \n                    ? \"bg-green-50 border-green-200\" \n                    : \"bg-red-50 border-red-200\"\n                }`}>\n                  <div className=\"flex items-start space-x-3\">\n                    {allStepsCompleted ? (\n                      <CheckCircle className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                    ) : (\n                      <div className=\"h-5 w-5 bg-red-500 rounded-full mt-0.5 flex items-center justify-center\">\n                        <span className=\"text-white text-xs font-bold\">!</span>\n                      </div>\n                    )}\n                    <div className=\"flex-1\">\n                      <p className={`font-medium ${\n                        allStepsCompleted ? \"text-green-800\" : \"text-red-800\"\n                      }`}>\n                        {allStepsCompleted \n                          ? \"Todas as etapas do setor foram concluídas\" \n                          : \"Etapas pendentes no setor atual\"\n                        }\n                      </p>\n                      {!allStepsCompleted && (\n                        <div className=\"mt-2\">\n                          <p className=\"text-red-600 text-sm mb-2\">\n                            É necessário concluir todas as etapas antes de transferir:\n                          </p>\n                          <ul className=\"text-sm text-red-700 space-y-1\">\n                            {incompleteSteps.map((step, index) => (\n                              <li key={index} className=\"flex items-center space-x-2\">\n                                <span className=\"w-1.5 h-1.5 bg-red-500 rounded-full\"></span>\n                                <span>{step.stepName}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Confirmação da transferência */}\n              <div className=\"p-4 bg-gray-50 rounded-lg border\">\n                {isLastDepartment ? (\n                  <div className=\"text-center\">\n                    <CheckCircle className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                    <p className=\"text-green-800 font-medium\">\n                      Este processo está no último departamento do fluxo\n                    </p>\n                    <p className=\"text-green-600 text-sm mt-1\">\n                      O processo pode ser finalizado ou arquivado\n                    </p>\n                  </div>\n                ) : availableDepartments.length === 0 ? (\n                  <div className=\"text-center\">\n                    <p className=\"text-yellow-800 font-medium\">\n                      Próximo departamento não encontrado\n                    </p>\n                    <p className=\"text-yellow-600 text-sm mt-1\">\n                      Verifique se todos os departamentos estão configurados\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-600 mb-3\">\n                      {allStepsCompleted \n                        ? \"Confirme a transferência para o próximo departamento:\" \n                        : \"Complete todas as etapas antes de transferir:\"\n                      }\n                    </p>\n                    <button\n                      onClick={() => setSelectedDepartmentId(availableDepartments[0].id.toString())}\n                      disabled={!allStepsCompleted}\n                      className={`px-6 py-3 rounded-lg border-2 font-medium transition-all ${\n                        !allStepsCompleted\n                          ? \"bg-gray-100 border-gray-300 text-gray-400 cursor-not-allowed\"\n                          : selectedDepartmentId \n                            ? \"bg-blue-500 border-blue-500 text-white\" \n                            : \"bg-white border-orange-300 text-orange-800 hover:bg-orange-50\"\n                      }`}\n                    >\n                      {!allStepsCompleted\n                        ? \"Transferência bloqueada\"\n                        : selectedDepartmentId \n                          ? \"✓ Confirmado\" \n                          : `Transferir para ${availableDepartments[0].name}`\n                      }\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Painel de Retorno */}\n          <Card className=\"border-yellow-200 bg-yellow-50\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span className=\"flex items-center gap-2\">\n                  <ArrowLeft className=\"h-5 w-5 text-yellow-600\" />\n                  Retornar Processo\n                </span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowReturnPanel(!showReturnPanel)}\n                >\n                  {showReturnPanel ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />}\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            {showReturnPanel && (\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"allowAllPrevious\"\n                    checked={allowAllPreviousDepartments}\n                    onChange={(e) => setAllowAllPreviousDepartments(e.target.checked)}\n                    className=\"rounded border-gray-300\"\n                  />\n                  <label htmlFor=\"allowAllPrevious\" className=\"text-sm font-medium\">\n                    {isAdmin ? \"Permitir retorno para todos os setores\" : \"Permitir retorno para todos os setores anteriores\"}\n                  </label>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Selecionar departamento de retorno:\n                  </label>\n                  <Select value={selectedReturnDepartment} onValueChange={setSelectedReturnDepartment}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Selecione o departamento\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(() => {\n                        const currentIndex = departmentFlow.findIndex(id => id === process.currentDepartmentId);\n                        const availableForReturn = [];\n                        \n                        if (allowAllPreviousDepartments) {\n                          if (isAdmin) {\n                            // Administradores podem retornar para TODOS os departamentos\n                            availableForReturn.push(...(departments || []));\n                          } else {\n                            // Usuários normais: apenas departamentos anteriores\n                            for (let i = 0; i < currentIndex; i++) {\n                              const dept = departments?.find(d => d.id === departmentFlow[i]);\n                              if (dept) availableForReturn.push(dept);\n                            }\n                          }\n                        } else {\n                          // Apenas o departamento anterior\n                          if (currentIndex > 0) {\n                            const dept = departments?.find(d => d.id === departmentFlow[currentIndex - 1]);\n                            if (dept) availableForReturn.push(dept);\n                          }\n                        }\n                        \n                        return availableForReturn.map(dept => (\n                          <SelectItem key={dept.id} value={dept.id.toString()}>\n                            {dept.name}\n                          </SelectItem>\n                        ));\n                      })()}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">\n                    Motivo do retorno *\n                  </label>\n                  <textarea\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    rows={4}\n                    placeholder=\"Descreva detalhadamente o motivo do retorno (mínimo 50 caracteres)...\"\n                    id=\"returnComment\"\n                    onChange={(e) => {\n                      const chars = e.target.value.length;\n                      const counter = document.getElementById('charCounter');\n                      if (counter) {\n                        counter.textContent = `${chars}/50 caracteres`;\n                        counter.className = chars >= 50 ? \"text-green-600 text-xs mt-1\" : \"text-red-600 text-xs mt-1\";\n                      }\n                    }}\n                  />\n                  <div \n                    id=\"charCounter\" \n                    className=\"text-red-600 text-xs mt-1\"\n                  >\n                    0/50 caracteres\n                  </div>\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  className=\"w-full\"\n                  disabled={!selectedReturnDepartment || returnMutation.isPending}\n                  onClick={() => {\n                    const comment = (document.getElementById('returnComment') as HTMLTextAreaElement)?.value;\n                    if (!comment.trim()) {\n                      toast({\n                        title: \"Motivo obrigatório\",\n                        description: \"Por favor, informe o motivo do retorno\",\n                        variant: \"destructive\"\n                      });\n                      return;\n                    }\n                    if (comment.trim().length < 50) {\n                      toast({\n                        title: \"Motivo insuficiente\",\n                        description: \"O motivo do retorno deve ter pelo menos 50 caracteres\",\n                        variant: \"destructive\"\n                      });\n                      return;\n                    }\n                    returnMutation.mutate({\n                      departmentId: parseInt(selectedReturnDepartment),\n                      comment: comment.trim()\n                    });\n                  }}\n                >\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  {returnMutation.isPending ? \"Retornando...\" : \"Confirmar Retorno\"}\n                </Button>\n              </CardContent>\n            )}\n          </Card>\n\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setLocation(`/processes/${parsedId}`)}\n              className=\"flex-1\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Cancelar\n            </Button>\n            {!isLastDepartment && availableDepartments.length > 0 && (\n              <Button\n                onClick={handleTransfer}\n                disabled={!selectedDepartmentId || transferMutation.isPending || !allStepsCompleted}\n                className=\"flex-1\"\n              >\n                {transferMutation.isPending \n                  ? \"Transferindo...\" \n                  : !allStepsCompleted \n                    ? \"Complete todas as etapas primeiro\"\n                    : \"Confirmar Transferência\"\n                }\n              </Button>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default ProcessTransfer;","size_bytes":36615},"client/src/pages/Processes.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport {\n  Process,\n  BiddingModality,\n  ResourceSource,\n  User,\n  Department,\n} from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  PlusCircle,\n  FileText,\n  Search,\n  SendHorizonal,\n  Loader2,\n  X,\n  Eye,\n  AlertTriangle,\n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { getProcessStatusLabel } from \"@/lib/utils/process\";\nimport { ColumnDef } from \"@tanstack/react-table\";\nimport { getQueryFn, apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { toast } from \"@/hooks/use-toast\";\n\n// Interface para o diálogo de transferência\ninterface TransferDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  processId: number;\n  processName: string;\n  onTransfer: (departmentId: number) => void;\n  isPending: boolean;\n}\n\n// Componente do diálogo de transferência\nconst TransferDialog = ({\n  isOpen,\n  onOpenChange,\n  processId,\n  processName,\n  onTransfer,\n  isPending,\n}: TransferDialogProps) => {\n  const [selectedDepartment, setSelectedDepartment] = useState<string>(\"\");\n\n  // Buscar departamentos disponíveis\n  const { data: departments } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n\n  const handleTransfer = () => {\n    if (!selectedDepartment) {\n      toast({\n        title: \"Erro\",\n        description: \"Selecione um departamento para transferir o processo\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    onTransfer(parseInt(selectedDepartment));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Transferir Processo</DialogTitle>\n          <DialogDescription>\n            Selecione o departamento para o qual deseja transferir o processo{\" \"}\n            <strong>{processName}</strong>.\n            <br />\n            <br />\n            <span className=\"text-yellow-600 font-medium\">\n              Atenção: Após a transferência, o processo não estará mais visível\n              para você.\n            </span>\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"space-y-2\">\n            <Select\n              onValueChange={setSelectedDepartment}\n              value={selectedDepartment}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Selecione o departamento destino\" />\n              </SelectTrigger>\n              <SelectContent>\n                {departments?.map((dept) => (\n                  <SelectItem key={dept.id} value={dept.id.toString()}>\n                    {dept.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={() => onOpenChange(false)}\n            disabled={isPending}\n          >\n            Cancelar\n          </Button>\n          <Button\n            onClick={handleTransfer}\n            disabled={!selectedDepartment || isPending}\n          >\n            {isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Transferindo...\n              </>\n            ) : (\n              <>Transferir Processo</>\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\n// Interface para o diálogo de exclusão\ninterface DeleteDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  processId: number;\n  processName: string;\n  onDelete: (processId: number, deletionReason: string) => void;\n  isPending: boolean;\n}\n\n// Componente do diálogo de exclusão\nconst DeleteDialog = ({\n  isOpen,\n  onOpenChange,\n  processId,\n  processName,\n  onDelete,\n  isPending,\n}: DeleteDialogProps) => {\n  const [deletionReason, setDeletionReason] = useState(\"\");\n\n  const handleDelete = () => {\n    if (!deletionReason.trim()) {\n      toast({\n        title: \"Erro\",\n        description: \"O motivo da exclusão é obrigatório\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (deletionReason.trim().length < 10) {\n      toast({\n        title: \"Erro\",\n        description: \"O motivo da exclusão deve ter pelo menos 10 caracteres\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    onDelete(processId, deletionReason.trim());\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"h-5 w-5 text-red-500\" />\n            Confirmar Exclusão\n          </DialogTitle>\n          <DialogDescription>\n            Você está prestes a excluir o processo{\" \"}\n            <strong>{processName}</strong>.\n            <br />\n            <br />\n            <span className=\"text-red-600 font-medium\">\n              Atenção: O processo será movido para a lixeira e poderá ser\n              recuperado posteriormente.\n            </span>\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"space-y-2\">\n            <label htmlFor=\"deletionReason\" className=\"text-sm font-medium\">\n              Motivo da exclusão (obrigatório)\n            </label>\n            <Textarea\n              id=\"deletionReason\"\n              placeholder=\"Descreva o motivo da exclusão do processo (mínimo 10 caracteres)...\"\n              value={deletionReason}\n              onChange={(e) => setDeletionReason(e.target.value)}\n              rows={4}\n              className=\"resize-none\"\n            />\n            <div className=\"text-xs text-gray-500\">\n              {deletionReason.length}/10 caracteres mínimos\n            </div>\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={() => onOpenChange(false)}\n            disabled={isPending}\n          >\n            Cancelar\n          </Button>\n          <Button\n            variant=\"destructive\"\n            onClick={handleDelete}\n            disabled={\n              !deletionReason.trim() ||\n              deletionReason.trim().length < 10 ||\n              isPending\n            }\n          >\n            {isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Excluindo...\n              </>\n            ) : (\n              <>Confirmar Exclusão</>\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst Processes = () => {\n  const [, setLocation] = useLocation();\n  const [pbdocFilter, setPbdocFilter] = useState(\"\");\n  const [modalityFilter, setModalityFilter] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [sourceFilter, setSourceFilter] = useState(\"\");\n  const [responsibleFilter, setResponsibleFilter] = useState(\"\");\n  const [centralDeComprasFilter, setCentralDeComprasFilter] = useState(\"\");\n\n  // Estado para controlar o diálogo de transferência\n  const [transferDialogOpen, setTransferDialogOpen] = useState(false);\n  const [selectedProcess, setSelectedProcess] = useState<Process | null>(null);\n\n  // Refresh automático ao entrar na página\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/modalities\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/sources\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/departments\"] });\n  }, []);\n\n  // Estado para controlar o diálogo de exclusão\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedProcessForDelete, setSelectedProcessForDelete] =\n    useState<Process | null>(null);\n\n  // Get all processes\n  const { data: processes, isLoading: processesLoading } = useQuery<Process[]>({\n    queryKey: [\"/api/processes\"],\n  });\n\n  // Get all modalities for filter\n  const { data: modalities } = useQuery<BiddingModality[]>({\n    queryKey: [\"/api/modalities\"],\n  });\n\n  // Get all sources for filter\n  const { data: sources } = useQuery<ResourceSource[]>({\n    queryKey: [\"/api/sources\"],\n  });\n\n  // Get all users for filter\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Mutação para transferir processo\n  const transferMutation = useMutation({\n    mutationFn: async ({\n      processId,\n      departmentId,\n    }: {\n      processId: number;\n      departmentId: number;\n    }) => {\n      const response = await apiRequest(\n        \"POST\",\n        `/api/processes/${processId}/transfer`,\n        { departmentId },\n      );\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Erro ao transferir processo\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      setTransferDialogOpen(false);\n\n      // Exibe mensagem de sucesso\n      toast({\n        title: \"Processo transferido com sucesso\",\n        description:\n          \"O processo foi transferido para outro departamento e não estará mais visível.\",\n        variant: \"default\",\n      });\n\n      // Invalida cache para recarregar processos\n      queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao transferir processo\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutação para excluir processo\n  const deleteProcessMutation = useMutation({\n    mutationFn: async ({\n      processId,\n      deletionReason,\n    }: {\n      processId: number;\n      deletionReason: string;\n    }) => {\n      const response = await apiRequest(\n        \"DELETE\",\n        `/api/processes/${processId}`,\n        { deletionReason },\n      );\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Erro ao excluir processo\");\n      }\n\n      return await response.json();\n    },\n    onSuccess: () => {\n      setDeleteDialogOpen(false);\n      setSelectedProcessForDelete(null);\n\n      toast({\n        title: \"Processo excluído com sucesso\",\n        description: \"O processo foi movido para a lixeira.\",\n      });\n\n      // Invalidar cache para recarregar processos\n      queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao excluir processo\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Função para abrir diálogo de transferência\n  const handleTransferClick = (process: Process) => {\n    setSelectedProcess(process);\n    setTransferDialogOpen(true);\n  };\n\n  // Função para realizar transferência\n  const handleTransfer = (departmentId: number) => {\n    if (!selectedProcess) return;\n\n    transferMutation.mutate({\n      processId: selectedProcess.id,\n      departmentId,\n    });\n  };\n\n  // Função para abrir diálogo de exclusão\n  const handleDeleteClick = (process: Process) => {\n    setSelectedProcessForDelete(process);\n    setDeleteDialogOpen(true);\n  };\n\n  // Função para realizar exclusão\n  const handleDelete = (processId: number, deletionReason: string) => {\n    deleteProcessMutation.mutate({\n      processId,\n      deletionReason,\n    });\n  };\n\n  // Filter processes based on selected filters\n  const filteredProcesses = processes?.filter((process) => {\n    let match = true;\n\n    if (\n      pbdocFilter &&\n      !process.pbdocNumber.toLowerCase().includes(pbdocFilter.toLowerCase())\n    ) {\n      match = false;\n    }\n\n    if (\n      modalityFilter &&\n      modalityFilter !== \"all\" &&\n      process.modalityId !== parseInt(modalityFilter)\n    ) {\n      match = false;\n    }\n\n    if (\n      statusFilter &&\n      statusFilter !== \"all\" &&\n      process.status !== statusFilter\n    ) {\n      match = false;\n    }\n\n    if (\n      sourceFilter &&\n      sourceFilter !== \"all\" &&\n      process.sourceId !== parseInt(sourceFilter)\n    ) {\n      match = false;\n    }\n\n    if (\n      responsibleFilter &&\n      responsibleFilter !== \"all\" &&\n      process.responsibleId !== parseInt(responsibleFilter)\n    ) {\n      match = false;\n    }\n\n    if (\n      centralDeComprasFilter &&\n      process.centralDeCompras &&\n      !process.centralDeCompras\n        .toLowerCase()\n        .includes(centralDeComprasFilter.toLowerCase())\n    ) {\n      match = false;\n    }\n\n    return match;\n  });\n\n  const handleViewProcess = (id: number) => {\n    setLocation(`/processes/${id}`);\n  };\n\n  const columns: ColumnDef<Process>[] = [\n    {\n      accessorKey: \"pbdocNumber\",\n      header: \"PBDOC\",\n      cell: ({ row }) => (\n        <button\n          onClick={() => handleViewProcess(row.original.id)}\n          className=\"font-medium text-blue-600 hover:text-blue-800 hover:underline cursor-pointer\"\n        >\n          {row.getValue(\"pbdocNumber\")}\n        </button>\n      ),\n    },\n    {\n      accessorKey: \"description\",\n      header: \"Descrição\",\n      cell: ({ row }) => (\n        <div className=\"max-w-[500px] truncate\">\n          {row.getValue(\"description\")}\n        </div>\n      ),\n    },\n    {\n      accessorKey: \"modalityId\",\n      header: \"Modalidade\",\n      cell: ({ row }) => {\n        const modalityId = row.getValue(\"modalityId\") as number;\n        const modality = modalities?.find((m) => m.id === modalityId);\n        return modality?.name || `Modalidade ${modalityId}`;\n      },\n    },\n    {\n      accessorKey: \"sourceId\",\n      header: \"Fonte\",\n      cell: ({ row }) => {\n        const sourceId = row.getValue(\"sourceId\") as number;\n        const source = sources?.find((s) => s.id === sourceId);\n        return source ? `Fonte ${source.code}` : `Fonte ${sourceId}`;\n      },\n    },\n    {\n      accessorKey: \"responsibleId\",\n      header: \"Responsável\",\n      cell: ({ row }) => {\n        const responsibleId = row.getValue(\"responsibleId\") as number;\n        const user = users?.find((u) => u.id === responsibleId);\n        return user?.fullName || `Usuário ${responsibleId}`;\n      },\n    },\n    {\n      accessorKey: \"priority\",\n      header: \"Prioridade\",\n      cell: ({ row }) => {\n        const priority = row.getValue(\"priority\") as string;\n        return (\n          <span className={`priority-badge priority-badge-${priority}`}>\n            {priority === \"low\"\n              ? \"Baixa\"\n              : priority === \"medium\"\n                ? \"Média\"\n                : \"Alta\"}\n          </span>\n        );\n      },\n    },\n    {\n      accessorKey: \"status\",\n      header: \"Status\",\n      cell: ({ row }) => {\n        const status = row.getValue(\"status\") as string;\n        return (\n          <span className={`status-badge status-badge-${status}`}>\n            {getProcessStatusLabel(status)}\n          </span>\n        );\n      },\n    },\n    {\n      id: \"actions\",\n      header: \"Ações\",\n      cell: ({ row }) => {\n        const process = row.original;\n        return (\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              title=\"Visualizar\"\n              onClick={() => handleViewProcess(process.id)}\n            >\n              <Eye className=\"h-5 w-5\" />\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              title=\"Excluir\"\n              className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n              onClick={() => handleDeleteClick(process)}\n            >\n              <X className=\"h-5 w-5\" />\n            </Button>\n          </div>\n        );\n      },\n    },\n  ];\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-gray-800\">\n            Processos de Licitação\n          </h1>\n          <p className=\"text-gray-600\">\n            Gerencie todos os processos licitatórios\n          </p>\n        </div>\n        <Link href=\"/processes/new\">\n          <Button>\n            <PlusCircle className=\"h-4 w-4 mr-2\" />\n            Novo Processo\n          </Button>\n        </Link>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            <div>\n              <label\n                htmlFor=\"pbdoc\"\n                className=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                PBDOC\n              </label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"pbdoc\"\n                  placeholder=\"Buscar por PBDOC\"\n                  className=\"pl-10\"\n                  value={pbdocFilter}\n                  onChange={(e) => setPbdocFilter(e.target.value)}\n                />\n              </div>\n            </div>\n\n            <div>\n              <label\n                htmlFor=\"centralDeCompras\"\n                className=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                Central de Compras\n              </label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"centralDeCompras\"\n                  placeholder=\"Número Central de Compras\"\n                  className=\"pl-10\"\n                  value={centralDeComprasFilter}\n                  onChange={(e) => setCentralDeComprasFilter(e.target.value)}\n                />\n              </div>\n            </div>\n\n            <div>\n              <label\n                htmlFor=\"modality\"\n                className=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                Modalidade\n              </label>\n              <Select value={modalityFilter} onValueChange={setModalityFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todas\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas</SelectItem>\n                  {modalities?.map((modality) => (\n                    <SelectItem\n                      key={modality.id}\n                      value={modality.id.toString()}\n                    >\n                      {modality.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label\n                htmlFor=\"status\"\n                className=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                Status\n              </label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"draft\">Rascunho</SelectItem>\n                  <SelectItem value=\"in_progress\">Em Andamento</SelectItem>\n                  <SelectItem value=\"completed\">Concluído</SelectItem>\n                  <SelectItem value=\"canceled\">Cancelado</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label\n                htmlFor=\"source\"\n                className=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                Fonte\n              </label>\n              <Select value={sourceFilter} onValueChange={setSourceFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todas\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todas</SelectItem>\n                  {sources?.map((source) => (\n                    <SelectItem key={source.id} value={source.id.toString()}>\n                      Fonte {source.code}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label\n                htmlFor=\"responsible\"\n                className=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                Responsável\n              </label>\n              <Select\n                value={responsibleFilter}\n                onValueChange={setResponsibleFilter}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  {users?.map((user) => (\n                    <SelectItem key={user.id} value={user.id.toString()}>\n                      {user.fullName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Process Table */}\n      <Card>\n        <CardContent className=\"p-0 sm:p-0\">\n          {processesLoading ? (\n            <div className=\"p-8 text-center\">Carregando processos...</div>\n          ) : (\n            <DataTable columns={columns} data={filteredProcesses || []} />\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Diálogo de Transferência */}\n      {selectedProcess && (\n        <TransferDialog\n          isOpen={transferDialogOpen}\n          onOpenChange={setTransferDialogOpen}\n          processId={selectedProcess.id}\n          processName={selectedProcess.pbdocNumber}\n          onTransfer={handleTransfer}\n          isPending={transferMutation.isPending}\n        />\n      )}\n\n      {/* Diálogo de Exclusão */}\n      {selectedProcessForDelete && (\n        <DeleteDialog\n          isOpen={deleteDialogOpen}\n          onOpenChange={setDeleteDialogOpen}\n          processId={selectedProcessForDelete.id}\n          processName={selectedProcessForDelete.pbdocNumber}\n          onDelete={handleDelete}\n          isPending={deleteProcessMutation.isPending}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Processes;\n","size_bytes":23085},"client/src/pages/RejectedSteps.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { AlertTriangle, Clock, User, FileText, Check, X } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { ColumnDef } from \"@tanstack/react-table\";\nimport { format } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { Link } from \"wouter\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface RejectedStep {\n  id: number;\n  processId: number;\n  stepName: string;\n  observations: string;\n  rejectedAt: string;\n  rejectionStatus: string;\n  process: {\n    pbdocNumber: string;\n    description: string;\n  };\n  department: {\n    name: string;\n  };\n  completedBy: {\n    username: string;\n  };\n}\n\nconst RejectedSteps = () => {\n  // Refresh automático ao entrar na página\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/steps/rejected\"] });\n  }, []);\n\n  const { data: rejectedSteps = [], isLoading } = useQuery<RejectedStep[]>({\n    queryKey: [\"/api/steps/rejected\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/steps/rejected\");\n      if (!response.ok) {\n        throw new Error(\"Erro ao buscar etapas rejeitadas\");\n      }\n      return response.json();\n    },\n  });\n\n  const columns: ColumnDef<RejectedStep>[] = [\n    {\n      accessorKey: \"process.pbdocNumber\",\n      header: \"PBDOC\",\n      cell: ({ row }) => (\n        <Link href={`/processes/${row.original.processId}`}>\n          <Button variant=\"link\" className=\"p-0 h-auto text-blue-600 hover:text-blue-800\">\n            {row.original.process.pbdocNumber}\n          </Button>\n        </Link>\n      ),\n    },\n    {\n      accessorKey: \"stepName\",\n      header: \"Etapa\",\n      cell: ({ row }) => (\n        <div className=\"max-w-xs\">\n          <p className=\"font-medium text-sm\">{row.original.stepName}</p>\n          <p className=\"text-xs text-gray-500 truncate\">{row.original.process.description}</p>\n        </div>\n      ),\n    },\n    {\n      accessorKey: \"department.name\",\n      header: \"Departamento\",\n      cell: ({ row }) => (\n        <Badge variant=\"outline\" className=\"text-xs\">\n          {row.original.department.name}\n        </Badge>\n      ),\n    },\n    {\n      accessorKey: \"completedBy.username\",\n      header: \"Rejeitado por\",\n      cell: ({ row }) => (\n        <div className=\"flex items-center\">\n          <User className=\"h-4 w-4 mr-1 text-gray-500\" />\n          <span className=\"text-sm\">{row.original.completedBy?.username || \"N/A\"}</span>\n        </div>\n      ),\n    },\n    {\n      accessorKey: \"rejectedAt\",\n      header: \"Data da Rejeição\",\n      cell: ({ row }) => (\n        <div className=\"flex items-center\">\n          <Clock className=\"h-4 w-4 mr-1 text-gray-500\" />\n          <span className=\"text-sm\">\n            {format(new Date(row.original.rejectedAt), \"dd/MM/yyyy HH:mm\", { locale: ptBR })}\n          </span>\n        </div>\n      ),\n    },\n    {\n      accessorKey: \"observations\",\n      header: \"Motivo da Rejeição\",\n      cell: ({ row }) => {\n        const observations = row.original.observations || \"\";\n        const cleanObservations = observations.replace(/^\\[REJEITADO\\]\\s*/, \"\");\n        \n        return (\n          <div className=\"max-w-md\">\n            <p className=\"text-sm text-gray-700 line-clamp-3\">{cleanObservations}</p>\n          </div>\n        );\n      },\n    },\n    {\n      id: \"actions\",\n      header: \"Ações\",\n      cell: ({ row }) => (\n        <div className=\"flex space-x-2\">\n          <Link href={`/processes/${row.original.processId}`}>\n            <Button variant=\"outline\" size=\"sm\">\n              <FileText className=\"h-4 w-4 mr-1\" />\n              Ver Processo\n            </Button>\n          </Link>\n        </div>\n      ),\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Carregando etapas rejeitadas...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 flex items-center\">\n              <AlertTriangle className=\"h-8 w-8 mr-3 text-orange-600\" />\n              Etapas Rejeitadas\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              Visualize e gerencie todas as etapas que foram rejeitadas mas aprovadas para continuidade do fluxo\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Estatísticas */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total de Rejeições</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{rejectedSteps.length}</div>\n            <p className=\"text-xs text-gray-500\">\n              Etapas rejeitadas com aprovação\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rejeições Recentes</CardTitle>\n            <Clock className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {rejectedSteps.filter(step => {\n                const rejectedDate = new Date(step.rejectedAt);\n                const today = new Date();\n                const diffTime = today.getTime() - rejectedDate.getTime();\n                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                return diffDays <= 7;\n              }).length}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              Últimos 7 dias\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Processos Afetados</CardTitle>\n            <FileText className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {new Set(rejectedSteps.map(step => step.processId)).size}\n            </div>\n            <p className=\"text-xs text-gray-500\">\n              Processos únicos com rejeições\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabela de Etapas Rejeitadas */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <AlertTriangle className=\"h-5 w-5 mr-2 text-orange-600\" />\n            Etapas Rejeitadas com Aprovação\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {rejectedSteps.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Check className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                Nenhuma etapa rejeitada\n              </h3>\n              <p className=\"text-gray-500\">\n                Todas as etapas foram aprovadas normalmente.\n              </p>\n            </div>\n          ) : (\n            <DataTable\n              columns={columns}\n              data={rejectedSteps}\n              searchKey=\"stepName\"\n              searchPlaceholder=\"Buscar por etapa...\"\n            />\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Informações sobre o sistema */}\n      <Card className=\"mt-8\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <AlertTriangle className=\"h-5 w-5 mr-2 text-blue-600\" />\n            Como funciona o sistema de rejeições\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-start space-x-3\">\n              <div className=\"flex-shrink-0 w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-medium text-orange-600\">1</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900\">Rejeição com Aprovação</h4>\n                <p className=\"text-gray-600 text-sm\">\n                  Quando uma etapa é rejeitada, ela é marcada como concluída para permitir a continuidade do fluxo, \n                  mas é registrada como rejeitada para revisão administrativa.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-3\">\n              <div className=\"flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-medium text-blue-600\">2</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900\">Continuidade do Processo</h4>\n                <p className=\"text-gray-600 text-sm\">\n                  O processo continua normalmente através dos departamentos, não sendo interrompido pela rejeição.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-start space-x-3\">\n              <div className=\"flex-shrink-0 w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-medium text-green-600\">3</span>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-900\">Revisão Administrativa</h4>\n                <p className=\"text-gray-600 text-sm\">\n                  Os administradores podem revisar todas as rejeições nesta página e tomar as ações necessárias.\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default RejectedSteps;","size_bytes":10443},"client/src/pages/ReportExport.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Download, FileText, Calendar, Building2 } from 'lucide-react';\n\nconst ReportExport = () => {\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const reportContent = `\n# RELATÓRIO DE DESENVOLVIMENTO - SISTEMA DE CONTROLE DE PROCESSOS DE LICITAÇÃO\n**Período:** 26/05/2025 - 28/05/2025  \n**Cliente:** Secretaria de Estado da Administração Penitenciária - PB  \n**Sistema:** Controle de Processos de Licitação Web\n\n## RESUMO EXECUTIVO\n\nDurante o período de 26 a 28 de maio de 2025, foram realizadas implementações significativas no sistema de controle de processos de licitação, focando em:\n- Correções críticas de visibilidade por departamento\n- Otimização da interface de usuário\n- Implementação de controles de acesso administrativo\n- Limpeza e otimização do sistema para produção\n\n## PRINCIPAIS IMPLEMENTAÇÕES REALIZADAS\n\n### ✅ CORREÇÃO CRÍTICA DE VISIBILIDADE POR DEPARTAMENTO\n- Implementação de filtro duplo de segurança por departamento\n- Mapeamento correto de departamentos incluindo \"Divisão de Licitação\"\n- Validação crítica para prevenir falhas após deploy\n- Administradores agora têm acesso total a todos os processos\n- Usuários comuns mantêm visibilidade restrita ao seu departamento\n\n### ✅ CONTROLE DE ACESSO ADMINISTRATIVO\n- Administradores visualizam todos os processos sem restrição de departamento\n- Usuários comuns mantêm acesso restrito ao departamento atual\n- Dupla validação de segurança para garantir integridade dos dados\n\n### ✅ OTIMIZAÇÃO DO SISTEMA PARA PRODUÇÃO\n- Removidos logs excessivos de autenticação\n- Eliminados logs de serialização/deserialização\n- Sistema funciona silenciosamente em produção\n- Mantidos apenas logs essenciais para debugging\n\n### ✅ MELHORIAS NA INTERFACE DE USUÁRIO\n- Visualização clara de processos por departamento\n- Filtragem automática baseada no usuário logado\n- Interface responsiva e limpa\n\n## FUNCIONALIDADES PRINCIPAIS DO SISTEMA\n\n### 1. Gestão de Processos\n✅ Criação, edição e exclusão de processos\n✅ Controle de status (Draft, Em Andamento, Concluído, Cancelado)\n✅ Transferência entre departamentos\n✅ Sistema de checklist por fase\n\n### 2. Controle de Acesso\n✅ Autenticação com Passport.js\n✅ Roles (Admin/Comum)\n✅ Visibilidade por departamento\n✅ Aprovação de novos usuários por admin\n\n### 3. Relatórios e Analytics\n✅ Dashboard com gráficos em tempo real\n✅ Estatísticas por fonte de recursos\n✅ Análise por responsável\n✅ Exportação em PDF\n\n### 4. Fluxo de Licitação\n✅ Visualização do fluxograma oficial\n✅ Checklist por fase do processo\n✅ Transferência automática entre departamentos\n✅ Controle de prazos e deadlines\n\n## TECNOLOGIAS UTILIZADAS\n\n### Backend\n- Node.js com TypeScript\n- Express.js para API REST\n- Passport.js para autenticação\n- PostgreSQL com Drizzle ORM\n- WebSocket para comunicação em tempo real\n\n### Frontend\n- React com TypeScript\n- Vite para build e desenvolvimento\n- TailwindCSS + shadcn/ui para interface\n- React Query para gerenciamento de estado\n- Wouter para roteamento\n\n## RESULTADOS ALCANÇADOS\n\n✅ **Funcionalidade** - Sistema totalmente funcional com visibilidade por departamento\n✅ **Segurança** - Controle de acesso robusto\n✅ **Performance** - Sistema otimizado para produção\n✅ **Usabilidade** - Interface intuitiva e limpa\n\n## CONCLUSÃO\n\nO sistema de controle de processos de licitação foi significativamente aprimorado durante o período analisado. As principais correções de segurança e visibilidade por departamento foram implementadas com sucesso.\n\n**Data do Relatório:** 28/05/2025  \n**Status:** Concluído com Sucesso ✅\n`;\n\n  const handlePrintReport = () => {\n    setIsGenerating(true);\n    \n    // Cria uma nova janela para impressão\n    const printWindow = window.open('', '_blank', 'width=800,height=600');\n    \n    if (printWindow) {\n      printWindow.document.write(`\n        <!DOCTYPE html>\n        <html>\n        <head>\n          <meta charset=\"UTF-8\">\n          <title>Relatório de Desenvolvimento - Sistema de Licitação</title>\n          <style>\n            body {\n              font-family: 'Arial', sans-serif;\n              line-height: 1.6;\n              margin: 40px;\n              color: #333;\n            }\n            h1 {\n              color: #1e40af;\n              border-bottom: 3px solid #1e40af;\n              padding-bottom: 10px;\n              font-size: 28px;\n            }\n            h2 {\n              color: #1e40af;\n              margin-top: 30px;\n              font-size: 22px;\n            }\n            h3 {\n              color: #374151;\n              margin-top: 25px;\n              font-size: 18px;\n            }\n            .check-item {\n              color: #059669;\n              font-weight: bold;\n            }\n            @media print {\n              body { margin: 20px; }\n              .no-print { display: none; }\n            }\n          </style>\n        </head>\n        <body>\n          ${reportContent\n            .replace(/# (.*)/g, '<h1>$1</h1>')\n            .replace(/## (.*)/g, '<h2>$1</h2>')\n            .replace(/### (.*)/g, '<h3>$1</h3>')\n            .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n            .replace(/✅/g, '<span class=\"check-item\">✅</span>')\n            .replace(/\\n\\n/g, '</p><p>')\n            .replace(/\\n/g, '<br>')\n            .replace(/^(.*)$/, '<p>$1</p>')\n          }\n          <div class=\"no-print\" style=\"margin-top: 40px;\">\n            <button onclick=\"window.print()\" style=\"background: #1e40af; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;\">\n              Imprimir / Salvar como PDF\n            </button>\n            <button onclick=\"window.close()\" style=\"background: #6b7280; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin-left: 10px;\">\n              Fechar\n            </button>\n          </div>\n        </body>\n        </html>\n      `);\n      \n      printWindow.document.close();\n      \n      // Auto-imprime após 1 segundo\n      setTimeout(() => {\n        printWindow.print();\n        setIsGenerating(false);\n      }, 1000);\n    } else {\n      setIsGenerating(false);\n      alert('Erro ao abrir janela de impressão. Verifique se o bloqueador de pop-ups está desabilitado.');\n    }\n  };\n\n  const handleDownloadMarkdown = () => {\n    const blob = new Blob([reportContent], { type: 'text/markdown' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'RELATORIO_DESENVOLVIMENTO_26-28_MAI_2025.md';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Exportar Relatório de Desenvolvimento\n        </h1>\n        <p className=\"text-gray-600\">\n          Relatório completo das implementações realizadas no período de 26-28/05/2025\n        </p>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              Informações do Relatório\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"h-4 w-4 text-gray-500\" />\n              <span className=\"text-sm\">Período: 26/05/2025 - 28/05/2025</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Building2 className=\"h-4 w-4 text-gray-500\" />\n              <span className=\"text-sm\">SEAP-PB</span>\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              <strong>Principais implementações:</strong>\n              <ul className=\"mt-2 list-disc list-inside space-y-1\">\n                <li>Correção de visibilidade por departamento</li>\n                <li>Controle de acesso administrativo</li>\n                <li>Otimização para produção</li>\n                <li>Melhorias na interface</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Opções de Exportação</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button \n              onClick={handlePrintReport}\n              disabled={isGenerating}\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              <Download className=\"mr-2 h-4 w-4\" />\n              {isGenerating ? 'Gerando PDF...' : 'Gerar PDF (Imprimir)'}\n            </Button>\n            \n            <Button \n              onClick={handleDownloadMarkdown}\n              variant=\"outline\"\n              className=\"w-full\"\n              size=\"lg\"\n            >\n              <FileText className=\"mr-2 h-4 w-4\" />\n              Download Markdown\n            </Button>\n            \n            <div className=\"text-xs text-gray-500 mt-4\">\n              <p><strong>PDF:</strong> Abre janela de impressão do navegador onde você pode salvar como PDF</p>\n              <p><strong>Markdown:</strong> Baixa o arquivo fonte em formato .md</p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Pré-visualização do Relatório</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"bg-gray-50 p-6 rounded-lg max-h-96 overflow-y-auto\">\n            <pre className=\"whitespace-pre-wrap text-sm font-mono\">\n              {reportContent.substring(0, 1000)}...\n            </pre>\n          </div>\n          <p className=\"text-sm text-gray-500 mt-2\">\n            Mostrando primeiros 1000 caracteres. O relatório completo será exportado.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default ReportExport;","size_bytes":10259},"client/src/pages/Reports.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { FileText, File, FileSpreadsheet } from \"lucide-react\";\nimport {\n  Process,\n  User,\n  BiddingModality,\n  ResourceSource,\n  Department,\n} from \"@shared/schema\";\nimport {\n  generateExcelReport,\n  generatePdfReport,\n} from \"@/lib/utils/exactReportExport\";\nimport { generateTimelinePdfReport } from \"@/lib/utils/timelineExport\";\nimport { generateModernPdf } from \"@/lib/utils/modernPdfGenerator\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n} from \"recharts\";\n\nconst Reports = () => {\n  const [reportType, setReportType] = useState(\"processes\");\n  const [selectedDepartment, setSelectedDepartment] = useState(\"\");\n  const [selectedMonth, setSelectedMonth] = useState(\"\");\n  const [selectedYear, setSelectedYear] = useState(\n    new Date().getFullYear().toString(),\n  );\n  const [centralDeComprasFilter, setCentralDeComprasFilter] = useState(\"\");\n\n  // Refresh automático ao entrar na página\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/departments\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/modalities\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/sources\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/analytics/process-statistics\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/analytics/temporal-distribution\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/analytics/department-ranking\"] });\n  }, []);\n\n  const { data: processes } = useQuery<Process[]>({\n    queryKey: [\"/api/processes\"],\n  });\n\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: modalities } = useQuery<BiddingModality[]>({\n    queryKey: [\"/api/modalities\"],\n  });\n\n  const { data: sources } = useQuery<ResourceSource[]>({\n    queryKey: [\"/api/sources\"],\n  });\n\n  const { data: departments } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  // Cores padronizadas para gráficos - seguindo o mesmo padrão do dashboard\n  const COLORS = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\", \"#8884d8\"];\n  \n  // Cores específicas para status dos processos (seguindo padrão dos gráficos do dashboard)\n  const STATUS_COLORS = {\n    \"Em Andamento\": \"#F59E0B\",    // amarelo\n    \"Concluído\": \"#10B981\",       // verde\n    \"Cancelado\": \"#F0F9FF\",       // azul claro quase branco\n    \"Atrasado\": \"#EF4444\"         // vermelho\n  };\n\n  // Filter processes based on filters\n  const getFilteredProcesses = () => {\n    if (!processes) return [];\n\n    return processes.filter((process) => {\n      // Filter by Central de Compras\n      if (centralDeComprasFilter && process.centralDeCompras) {\n        if (\n          !process.centralDeCompras\n            .toLowerCase()\n            .includes(centralDeComprasFilter.toLowerCase())\n        ) {\n          return false;\n        }\n      }\n\n      // Filter by department\n      if (selectedDepartment && selectedDepartment !== \"all\") {\n        if (process.currentDepartmentId !== parseInt(selectedDepartment)) {\n          return false;\n        }\n      }\n\n      // Filter by month and year\n      if (selectedMonth && selectedMonth !== \"all\") {\n        const processDate = new Date(process.createdAt);\n        if (processDate.getMonth() + 1 !== parseInt(selectedMonth)) {\n          return false;\n        }\n      }\n\n      if (selectedYear && selectedYear !== \"all\") {\n        const processDate = new Date(process.createdAt);\n        if (processDate.getFullYear() !== parseInt(selectedYear)) {\n          return false;\n        }\n      }\n\n      return true;\n    });\n  };\n\n  // Process data for charts\n  const getProcessStatusData = () => {\n    const filteredProcesses = getFilteredProcesses();\n    if (!filteredProcesses.length) return [];\n\n    const statusCounts = {\n      draft: 0,\n      in_progress: 0,\n      completed: 0,\n      canceled: 0,\n    };\n\n    filteredProcesses.forEach((process) => {\n      statusCounts[process.status as keyof typeof statusCounts]++;\n    });\n\n    // Calcular processos atrasados\n    const now = new Date();\n    const overdueCount = filteredProcesses.filter(p => \n      p.status === \"overdue\" || \n      (p.status !== \"completed\" && p.status !== \"canceled\" && p.deadline && new Date(p.deadline) < now)\n    ).length;\n    \n    return [\n      { name: \"Em Andamento\", value: statusCounts.in_progress },\n      { name: \"Atrasado\", value: overdueCount },\n      { name: \"Concluído\", value: statusCounts.completed },\n      { name: \"Cancelado\", value: statusCounts.canceled },\n    ];\n  };\n\n  const getProcessModalityData = () => {\n    const filteredProcesses = getFilteredProcesses();\n    if (!filteredProcesses.length || !modalities) return [];\n\n    const modalityCounts = new Map<number, number>();\n\n    filteredProcesses.forEach((process) => {\n      const count = modalityCounts.get(process.modalityId) || 0;\n      modalityCounts.set(process.modalityId, count + 1);\n    });\n\n    return Array.from(modalityCounts.entries()).map(([modalityId, count]) => {\n      const modality = modalities.find((m) => m.id === modalityId);\n      return {\n        name: modality?.name || `Modalidade ${modalityId}`,\n        value: count,\n      };\n    });\n  };\n\n  const getProcessSourceData = () => {\n    const filteredProcesses = getFilteredProcesses();\n    if (!filteredProcesses.length || !sources) return [];\n\n    const sourceCounts = new Map<number, number>();\n\n    filteredProcesses.forEach((process) => {\n      const count = sourceCounts.get(process.sourceId) || 0;\n      sourceCounts.set(process.sourceId, count + 1);\n    });\n\n    return Array.from(sourceCounts.entries()).map(([sourceId, count]) => {\n      const source = sources.find((s) => s.id === sourceId);\n      return {\n        name: source ? `Fonte ${source.code}` : `Fonte ${sourceId}`,\n        value: count,\n      };\n    });\n  };\n\n  const getUserPerformanceData = () => {\n    if (!processes || !users) return [];\n\n    const userPerformance = new Map<\n      number,\n      { total: number; completed: number }\n    >();\n\n    users.forEach((user) => {\n      userPerformance.set(user.id, { total: 0, completed: 0 });\n    });\n\n    processes.forEach((process) => {\n      const performance = userPerformance.get(process.responsibleId) || {\n        total: 0,\n        completed: 0,\n      };\n      performance.total++;\n\n      if (process.status === \"completed\") {\n        performance.completed++;\n      }\n\n      userPerformance.set(process.responsibleId, performance);\n    });\n\n    return Array.from(userPerformance.entries())\n      .filter(([, performance]) => performance.total > 0)\n      .map(([userId, performance]) => {\n        const user = users.find((u) => u.id === userId);\n        return {\n          name: user?.fullName || `Usuário ${userId}`,\n          total: performance.total,\n          completed: performance.completed,\n          percentage: (performance.completed / performance.total) * 100,\n        };\n      })\n      .sort((a, b) => b.percentage - a.percentage);\n  };\n\n  const prepareReportData = () => {\n    if (!processes || !users || !modalities || !sources) return null;\n\n    return {\n      processes,\n      users,\n      modalities,\n      sources,\n      departments,\n      filters: {\n        department: selectedDepartment,\n        month: selectedMonth,\n        year: selectedYear,\n      },\n      reportType,\n    };\n  };\n\n  const generateReport = (format: \"pdf\" | \"excel\") => {\n    const reportData = prepareReportData();\n    if (!reportData) return;\n\n    if (format === \"pdf\") {\n      generateTimelinePdfReport(reportData);\n    } else {\n      generateExcelReport(reportData);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-gray-800\">Relatórios</h1>\n        <p className=\"text-gray-600\">\n          Visualize e exporte relatórios do sistema\n        </p>\n      </div>\n\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Tipo de Relatório\n              </label>\n              <Select value={reportType} onValueChange={setReportType}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione o tipo\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"processes\">Processos</SelectItem>\n                  <SelectItem value=\"users\">Usuários</SelectItem>\n                  <SelectItem value=\"departments\">Setores</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Central de Compras\n              </label>\n              <div className=\"relative\">\n                <Input\n                  placeholder=\"Número Central de Compras\"\n                  value={centralDeComprasFilter}\n                  onChange={(e) => setCentralDeComprasFilter(e.target.value)}\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Setor\n              </label>\n              <Select\n                value={selectedDepartment}\n                onValueChange={setSelectedDepartment}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  {departments?.map((dept) => (\n                    <SelectItem key={dept.id} value={dept.id.toString()}>\n                      {dept.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Mês\n              </label>\n              <Select value={selectedMonth} onValueChange={setSelectedMonth}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Todos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos</SelectItem>\n                  <SelectItem value=\"1\">Janeiro</SelectItem>\n                  <SelectItem value=\"2\">Fevereiro</SelectItem>\n                  <SelectItem value=\"3\">Março</SelectItem>\n                  <SelectItem value=\"4\">Abril</SelectItem>\n                  <SelectItem value=\"5\">Maio</SelectItem>\n                  <SelectItem value=\"6\">Junho</SelectItem>\n                  <SelectItem value=\"7\">Julho</SelectItem>\n                  <SelectItem value=\"8\">Agosto</SelectItem>\n                  <SelectItem value=\"9\">Setembro</SelectItem>\n                  <SelectItem value=\"10\">Outubro</SelectItem>\n                  <SelectItem value=\"11\">Novembro</SelectItem>\n                  <SelectItem value=\"12\">Dezembro</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Ano\n              </label>\n              <Select value={selectedYear} onValueChange={setSelectedYear}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Selecione o ano\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"2025\">2025</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"mt-4 flex justify-end gap-2\">\n            <Button variant=\"outline\" onClick={() => generateReport(\"excel\")}>\n              <FileSpreadsheet className=\"h-4 w-4 mr-2\" />\n              Exportar Excel\n            </Button>\n            <Button\n              onClick={() => {\n                const data = prepareReportData();\n                if (!data) return;\n                generateModernPdf(data);\n              }}\n            >\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Exportar PDF\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"graphs\">\n        <TabsList className=\"mb-6\">\n          <TabsTrigger value=\"graphs\">Gráficos</TabsTrigger>\n          <TabsTrigger value=\"tables\">Tabelas</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"graphs\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Status Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Processos por Status</CardTitle>\n              </CardHeader>\n              <CardContent className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={getProcessStatusData()}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, percent, value }) => {\n                        // Só mostra label se tem valor > 0\n                        return value > 0 ? `${name}: ${(percent * 100).toFixed(0)}%` : null;\n                      }}\n                      labelStyle={{\n                        fontSize: '11px',\n                        fontWeight: 'normal'\n                      }}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {getProcessStatusData().map((entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={STATUS_COLORS[entry.name as keyof typeof STATUS_COLORS] || COLORS[index % COLORS.length]}\n                        />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                    <Legend \n                      verticalAlign=\"bottom\" \n                      height={36}\n                      wrapperStyle={{ paddingTop: '20px' }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Modality Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Processos por Modalidade</CardTitle>\n              </CardHeader>\n              <CardContent className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={getProcessModalityData()}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"value\" name=\"Quantidade\" fill=\"#0066cc\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Source Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Processos por Fonte</CardTitle>\n              </CardHeader>\n              <CardContent className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={getProcessSourceData()}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"value\" name=\"Quantidade\" fill=\"#00C49F\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* User Performance Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Desempenho por Usuário</CardTitle>\n              </CardHeader>\n              <CardContent className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart\n                    data={getUserPerformanceData()}\n                    margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                    layout=\"vertical\"\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis type=\"number\" />\n                    <YAxis type=\"category\" dataKey=\"name\" width={150} />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"total\" name=\"Total\" fill=\"#8884d8\" />\n                    <Bar dataKey=\"completed\" name=\"Concluídos\" fill=\"#82ca9d\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"tables\">\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {reportType === \"processes\" && \"Relatório de Processos\"}\n                {reportType === \"users\" && \"Relatório de Usuários\"}\n                {reportType === \"departments\" && \"Relatório de Setores\"}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {/* Process Report Table */}\n              {reportType === \"processes\" && (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          PBDOC\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Descrição\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Modalidade\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Responsável\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Status\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {processes?.map((process) => {\n                        const modality = modalities?.find(\n                          (m) => m.id === process.modalityId,\n                        );\n                        const user = users?.find(\n                          (u) => u.id === process.responsibleId,\n                        );\n\n                        return (\n                          <tr key={process.id}>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                              {process.pbdocNumber}\n                            </td>\n                            <td className=\"px-6 py-4 text-sm text-gray-500 max-w-xs truncate\">\n                              {process.description}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                              {modality?.name ||\n                                `Modalidade ${process.modalityId}`}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                              {user?.fullName ||\n                                `Usuário ${process.responsibleId}`}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <span\n                                className={`status-badge status-badge-${process.status}`}\n                              >\n                                {process.status === \"draft\"\n                                  ? \"Rascunho\"\n                                  : process.status === \"in_progress\"\n                                    ? \"Em Andamento\"\n                                    : process.status === \"completed\"\n                                      ? \"Concluído\"\n                                      : \"Cancelado\"}\n                              </span>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n\n              {/* User Report Table */}\n              {reportType === \"users\" && (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Nome\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Setor\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Processos Total\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Concluídos\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Taxa de Conclusão\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {getUserPerformanceData().map((user) => (\n                        <tr key={user.name}>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                            {user.name}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {users?.find((u) => u.fullName === user.name)\n                              ?.department || \"-\"}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {user.total}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {user.completed}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <span className=\"text-sm text-gray-900 mr-2\">\n                                {Math.round(user.percentage)}%\n                              </span>\n                              <div className=\"w-24 bg-gray-200 rounded-full h-2\">\n                                <div\n                                  className={`${\n                                    user.percentage >= 80\n                                      ? \"bg-green-600\"\n                                      : user.percentage >= 60\n                                        ? \"bg-yellow-500\"\n                                        : \"bg-red-500\"\n                                  } h-2 rounded-full`}\n                                  style={{ width: `${user.percentage}%` }}\n                                ></div>\n                              </div>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n\n              {/* Department Report Table */}\n              {reportType === \"departments\" && (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Setor\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Responsável\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Usuários\n                        </th>\n                        <th\n                          scope=\"col\"\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          Processos\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {departments?.map((department) => {\n                        const departmentUsers =\n                          users?.filter(\n                            (u) => u.department === department.name,\n                          ) || [];\n                        const departmentProcesses =\n                          processes?.filter((p) => {\n                            const responsibleUser = users?.find(\n                              (u) => u.id === p.responsibleId,\n                            );\n                            return (\n                              responsibleUser?.department === department.name\n                            );\n                          }) || [];\n\n                        return (\n                          <tr key={department.id}>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                              {department.name}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                              {departmentUsers.find((u) => u.role === \"admin\")\n                                ?.fullName || \"-\"}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                              {departmentUsers.length}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                              {departmentProcesses.length}\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default Reports;\n","size_bytes":29401},"client/src/pages/Settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { BiddingModality, ResourceSource, Department, InsertBiddingModality, InsertResourceSource, InsertDepartment } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { \n  Card, \n  CardContent, \n  CardDescription, \n  CardFooter, \n  CardHeader, \n  CardTitle \n} from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogDescription, \n  DialogFooter, \n  DialogHeader, \n  DialogTitle, \n  DialogTrigger \n} from \"@/components/ui/dialog\";\nimport { Plus, Edit, Trash } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Form, \n  FormControl, \n  FormDescription, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage \n} from \"@/components/ui/form\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\nconst Settings = () => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"modalities\");\n  const [openModalityDialog, setOpenModalityDialog] = useState(false);\n  const [openSourceDialog, setOpenSourceDialog] = useState(false);\n  const [openDepartmentDialog, setOpenDepartmentDialog] = useState(false);\n  const [editingModality, setEditingModality] = useState<BiddingModality | null>(null);\n  const [editingSource, setEditingSource] = useState<ResourceSource | null>(null);\n  const [editingDepartment, setEditingDepartment] = useState<Department | null>(null);\n  \n  // Get bidding modalities\n  const { data: modalities, isLoading: modalitiesLoading } = useQuery<BiddingModality[]>({\n    queryKey: ['/api/modalities'],\n  });\n  \n  // Get resource sources\n  const { data: sources, isLoading: sourcesLoading } = useQuery<ResourceSource[]>({\n    queryKey: ['/api/sources'],\n  });\n  \n  // Get departments\n  const { data: departments, isLoading: departmentsLoading } = useQuery<Department[]>({\n    queryKey: ['/api/departments'],\n  });\n  \n  // Forms\n  const modalityForm = useForm<InsertBiddingModality>({\n    resolver: zodResolver(z.object({\n      name: z.string().min(1, \"Nome é obrigatório\"),\n      description: z.string().optional(),\n    })),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n  \n  const sourceForm = useForm<InsertResourceSource>({\n    resolver: zodResolver(z.object({\n      code: z.string().min(1, \"Código é obrigatório\"),\n      description: z.string().optional(),\n    })),\n    defaultValues: {\n      code: \"\",\n      description: \"\",\n    },\n  });\n  \n  const departmentForm = useForm<InsertDepartment>({\n    resolver: zodResolver(z.object({\n      name: z.string().min(1, \"Nome é obrigatório\"),\n      description: z.string().optional(),\n    })),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n  \n  const openAddModalityDialog = () => {\n    modalityForm.reset({ name: \"\", description: \"\" });\n    setEditingModality(null);\n    setOpenModalityDialog(true);\n  };\n  \n  const openEditModalityDialog = (modality: BiddingModality) => {\n    modalityForm.reset({\n      name: modality.name,\n      description: modality.description || \"\",\n    });\n    setEditingModality(modality);\n    setOpenModalityDialog(true);\n  };\n  \n  const openAddSourceDialog = () => {\n    sourceForm.reset({ code: \"\", description: \"\" });\n    setEditingSource(null);\n    setOpenSourceDialog(true);\n  };\n  \n  const openEditSourceDialog = (source: ResourceSource) => {\n    sourceForm.reset({\n      code: source.code,\n      description: source.description || \"\",\n    });\n    setEditingSource(source);\n    setOpenSourceDialog(true);\n  };\n  \n  const openAddDepartmentDialog = () => {\n    departmentForm.reset({ name: \"\", description: \"\" });\n    setEditingDepartment(null);\n    setOpenDepartmentDialog(true);\n  };\n  \n  const openEditDepartmentDialog = (department: Department) => {\n    departmentForm.reset({\n      name: department.name,\n      description: department.description || \"\",\n    });\n    setEditingDepartment(department);\n    setOpenDepartmentDialog(true);\n  };\n  \n  const onSubmitModality = async (data: InsertBiddingModality) => {\n    try {\n      if (editingModality) {\n        await apiRequest(\"PATCH\", `/api/modalities/${editingModality.id}`, data);\n        toast({\n          title: \"Modalidade atualizada\",\n          description: \"A modalidade foi atualizada com sucesso\",\n        });\n      } else {\n        await apiRequest(\"POST\", \"/api/modalities\", data);\n        toast({\n          title: \"Modalidade criada\",\n          description: \"A modalidade foi criada com sucesso\",\n        });\n      }\n      \n      // Refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/modalities'] });\n      \n      // Close dialog\n      setOpenModalityDialog(false);\n    } catch (error) {\n      console.error(\"Error saving modality:\", error);\n      toast({\n        title: \"Erro\",\n        description: `Erro ao ${editingModality ? \"atualizar\" : \"criar\"} modalidade`,\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  const onSubmitSource = async (data: InsertResourceSource) => {\n    try {\n      if (editingSource) {\n        await apiRequest(\"PATCH\", `/api/sources/${editingSource.id}`, data);\n        toast({\n          title: \"Fonte atualizada\",\n          description: \"A fonte foi atualizada com sucesso\",\n        });\n      } else {\n        await apiRequest(\"POST\", \"/api/sources\", data);\n        toast({\n          title: \"Fonte criada\",\n          description: \"A fonte foi criada com sucesso\",\n        });\n      }\n      \n      // Refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/sources'] });\n      \n      // Close dialog\n      setOpenSourceDialog(false);\n    } catch (error) {\n      console.error(\"Error saving source:\", error);\n      toast({\n        title: \"Erro\",\n        description: `Erro ao ${editingSource ? \"atualizar\" : \"criar\"} fonte`,\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  const onSubmitDepartment = async (data: InsertDepartment) => {\n    try {\n      if (editingDepartment) {\n        await apiRequest(\"PATCH\", `/api/departments/${editingDepartment.id}`, data);\n        toast({\n          title: \"Setor atualizado\",\n          description: \"O setor foi atualizado com sucesso\",\n        });\n      } else {\n        await apiRequest(\"POST\", \"/api/departments\", data);\n        toast({\n          title: \"Setor criado\",\n          description: \"O setor foi criado com sucesso\",\n        });\n      }\n      \n      // Refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/departments'] });\n      \n      // Close dialog\n      setOpenDepartmentDialog(false);\n    } catch (error) {\n      console.error(\"Error saving department:\", error);\n      toast({\n        title: \"Erro\",\n        description: `Erro ao ${editingDepartment ? \"atualizar\" : \"criar\"} setor`,\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  return (\n    <div>\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-semibold text-gray-800\">Configurações</h1>\n        <p className=\"text-gray-600\">Gerencie as configurações do sistema</p>\n      </div>\n      \n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"mb-6\">\n          <TabsTrigger value=\"modalities\">Modalidades</TabsTrigger>\n          <TabsTrigger value=\"sources\">Fontes de Recurso</TabsTrigger>\n          <TabsTrigger value=\"departments\">Setores</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"modalities\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle>Modalidades de Licitação</CardTitle>\n              <Button size=\"sm\" onClick={openAddModalityDialog}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nova Modalidade\n              </Button>\n            </CardHeader>\n            <CardContent>\n              {modalitiesLoading ? (\n                <div className=\"p-4 text-center\">Carregando modalidades...</div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {modalities?.map((modality) => (\n                    <div \n                      key={modality.id} \n                      className=\"flex items-center justify-between p-4 border rounded-md\"\n                    >\n                      <div>\n                        <h3 className=\"font-medium\">{modality.name}</h3>\n                        {modality.description && (\n                          <p className=\"text-sm text-gray-500\">{modality.description}</p>\n                        )}\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => openEditModalityDialog(modality)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {modalities?.length === 0 && (\n                    <div className=\"text-center p-4 text-gray-500\">\n                      Nenhuma modalidade cadastrada\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"sources\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle>Fontes de Recurso</CardTitle>\n              <Button size=\"sm\" onClick={openAddSourceDialog}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nova Fonte\n              </Button>\n            </CardHeader>\n            <CardContent>\n              {sourcesLoading ? (\n                <div className=\"p-4 text-center\">Carregando fontes...</div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {sources?.map((source) => (\n                    <div \n                      key={source.id} \n                      className=\"flex items-center justify-between p-4 border rounded-md\"\n                    >\n                      <div>\n                        <h3 className=\"font-medium\">Fonte {source.code}</h3>\n                        {source.description && (\n                          <p className=\"text-sm text-gray-500\">{source.description}</p>\n                        )}\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => openEditSourceDialog(source)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {sources?.length === 0 && (\n                    <div className=\"text-center p-4 text-gray-500\">\n                      Nenhuma fonte cadastrada\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"departments\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle>Setores</CardTitle>\n              <Button size=\"sm\" onClick={openAddDepartmentDialog}>\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Novo Setor\n              </Button>\n            </CardHeader>\n            <CardContent>\n              {departmentsLoading ? (\n                <div className=\"p-4 text-center\">Carregando setores...</div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {departments?.map((department) => (\n                    <div \n                      key={department.id} \n                      className=\"flex items-center justify-between p-4 border rounded-md\"\n                    >\n                      <div>\n                        <h3 className=\"font-medium\">{department.name}</h3>\n                        {department.description && (\n                          <p className=\"text-sm text-gray-500\">{department.description}</p>\n                        )}\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => openEditDepartmentDialog(department)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                  \n                  {departments?.length === 0 && (\n                    <div className=\"text-center p-4 text-gray-500\">\n                      Nenhum setor cadastrado\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n      \n      {/* Modality Dialog */}\n      <Dialog open={openModalityDialog} onOpenChange={setOpenModalityDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {editingModality ? \"Editar Modalidade\" : \"Nova Modalidade\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingModality \n                ? \"Edite as informações da modalidade de licitação\" \n                : \"Preencha as informações para criar uma nova modalidade\"}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...modalityForm}>\n            <form onSubmit={modalityForm.handleSubmit(onSubmitModality)} className=\"space-y-4\">\n              <FormField\n                control={modalityForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Ex: Pregão Eletrônico\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={modalityForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Descrição</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Descrição da modalidade\" \n                        {...field} \n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <DialogFooter>\n                <Button type=\"submit\">\n                  {editingModality ? \"Salvar Alterações\" : \"Criar Modalidade\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Source Dialog */}\n      <Dialog open={openSourceDialog} onOpenChange={setOpenSourceDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {editingSource ? \"Editar Fonte\" : \"Nova Fonte\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingSource \n                ? \"Edite as informações da fonte de recurso\" \n                : \"Preencha as informações para criar uma nova fonte\"}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...sourceForm}>\n            <form onSubmit={sourceForm.handleSubmit(onSubmitSource)} className=\"space-y-4\">\n              <FormField\n                control={sourceForm.control}\n                name=\"code\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Código</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Ex: 500\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={sourceForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Descrição</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Descrição da fonte de recurso\" \n                        {...field} \n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <DialogFooter>\n                <Button type=\"submit\">\n                  {editingSource ? \"Salvar Alterações\" : \"Criar Fonte\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Department Dialog */}\n      <Dialog open={openDepartmentDialog} onOpenChange={setOpenDepartmentDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {editingDepartment ? \"Editar Setor\" : \"Novo Setor\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingDepartment \n                ? \"Edite as informações do setor\" \n                : \"Preencha as informações para criar um novo setor\"}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...departmentForm}>\n            <form onSubmit={departmentForm.handleSubmit(onSubmitDepartment)} className=\"space-y-4\">\n              <FormField\n                control={departmentForm.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Ex: Licitação\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={departmentForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Descrição</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Descrição do setor\" \n                        {...field} \n                        value={field.value || \"\"}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <DialogFooter>\n                <Button type=\"submit\">\n                  {editingDepartment ? \"Salvar Alterações\" : \"Criar Setor\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Settings;\n","size_bytes":19960},"client/src/pages/TermsOfUse.tsx":{"content":"import React from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ChevronLeft } from \"lucide-react\";\n\nconst TermsOfUse = () => {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-b from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800 p-4\">\n      <Card className=\"w-full max-w-3xl shadow-lg\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-primary\">\n            Termos de Uso do Software\n          </CardTitle>\n          <CardDescription>\n            Sistema de Controle de Processos de Licitação - SEAP-PB\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"prose dark:prose-invert max-w-none\">\n            <h3>1. Aceitação dos Termos</h3>\n            <p>Ao utilizar o software Sistema de Controle de Processos de Licitação da SEAP-PB, você concorda em cumprir estes Termos de Uso e todas as leis e regulamentos aplicáveis.</p>\n            \n            <h3>2. Licença de Uso</h3>\n            <p>Este software é fornecido para uso exclusivo dos funcionários e colaboradores autorizados da Secretaria de Estado da Administração Penitenciária. O uso não autorizado é estritamente proibido.</p>\n            \n            <h3>3. Restrições</h3>\n            <p>É expressamente proibido:</p>\n            <ul>\n              <li>Copiar, modificar ou distribuir o software sem autorização</li>\n              <li>Utilizar o software para fins não relacionados às atividades da SEAP-PB</li>\n              <li>Realizar engenharia reversa do código</li>\n              <li>Remover ou alterar avisos de direitos autorais</li>\n            </ul>\n            \n            <h3>4. Segurança e Privacidade</h3>\n            <p>Os usuários são responsáveis por manter suas credenciais seguras e por todas as atividades realizadas sob sua conta. Qualquer suspeita de uso não autorizado deve ser reportada imediatamente.</p>\n            \n            <h3>5. Disponibilidade e Suporte</h3>\n            <p>O sistema é fornecido \"como está\", sem garantias de disponibilidade contínua. A equipe de TI da SEAP-PB é responsável pelo suporte e manutenção do sistema.</p>\n            \n            <h3>6. Alterações aos Termos</h3>\n            <p>A SEAP-PB reserva-se o direito de modificar estes termos a qualquer momento. As alterações entrarão em vigor imediatamente após sua publicação.</p>\n          </div>\n        </CardContent>\n        <CardFooter className=\"justify-center\">\n          <Button variant=\"outline\" size=\"sm\" asChild>\n            <Link href=\"/download/seappb2025\">\n              <ChevronLeft className=\"h-4 w-4 mr-1\" />\n              Voltar para Download\n            </Link>\n          </Button>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n};\n\nexport default TermsOfUse;","size_bytes":3041},"client/src/pages/Trash.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Trash2, RotateCcw, AlertTriangle, Calendar, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Process } from \"@shared/schema\";\n\nconst Trash = () => {\n  const { toast } = useToast();\n\n  // Refresh automático ao entrar na página\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/processes/deleted\"] });\n  }, []);\n\n  // Buscar processos excluídos com refresh automático\n  const { data: deletedProcesses = [], isLoading } = useQuery<Process[]>({\n    queryKey: [\"/api/processes/deleted\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/processes/deleted\");\n      return response.json();\n    },\n    refetchInterval: 5000, // Atualiza a cada 5 segundos\n    refetchIntervalInBackground: true, // Continua atualizando mesmo quando a aba não está ativa\n  });\n\n  // WebSocket para atualizações em tempo real\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    const socket = new WebSocket(wsUrl);\n\n    socket.onopen = () => {\n      console.log(\"Conexão WebSocket estabelecida para lixeira\");\n    };\n\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      console.log(\"Mensagem WebSocket recebida na lixeira:\", data);\n\n      if (data.type === \"process_deleted\" || data.type === \"process_restored\") {\n        // Invalidar cache para recarregar a lista de processos excluídos\n        queryClient.invalidateQueries({ queryKey: [\"/api/processes/deleted\"] });\n      }\n    };\n\n    socket.onclose = () => {\n      console.log(\"Conexão WebSocket fechada na lixeira\");\n    };\n\n    socket.onerror = (error) => {\n      console.error(\"Erro WebSocket na lixeira:\", error);\n    };\n\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  // Mutation para restaurar processo\n  const restoreMutation = useMutation({\n    mutationFn: async (processId: number) => {\n      const response = await apiRequest(\"POST\", `/api/processes/${processId}/restore`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/processes/deleted\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n      toast({\n        title: \"Processo restaurado\",\n        description: \"O processo foi restaurado com sucesso\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível restaurar o processo\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para excluir permanentemente\n  const permanentDeleteMutation = useMutation({\n    mutationFn: async (processId: number) => {\n      const response = await apiRequest(\"DELETE\", `/api/processes/${processId}/permanent`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/processes/deleted\"] });\n      toast({\n        title: \"Processo excluído permanentemente\",\n        description: \"O processo foi excluído definitivamente do sistema\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível excluir o processo permanentemente\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRestore = (processId: number) => {\n    if (confirm(\"Tem certeza que deseja restaurar este processo?\")) {\n      restoreMutation.mutate(processId);\n    }\n  };\n\n  const handlePermanentDelete = (processId: number) => {\n    if (confirm(\"ATENÇÃO: Esta ação é irreversível! Tem certeza que deseja excluir permanentemente este processo?\")) {\n      permanentDeleteMutation.mutate(processId);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"bg-green-100 text-green-800\";\n      case \"in_progress\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"canceled\":\n        return \"bg-red-100 text-red-800\";\n      case \"overdue\":\n        return \"bg-orange-100 text-orange-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"Concluído\";\n      case \"in_progress\":\n        return \"Em Andamento\";\n      case \"canceled\":\n        return \"Cancelado\";\n      case \"overdue\":\n        return \"Atrasado\";\n      case \"draft\":\n        return \"Rascunho\";\n      default:\n        return status;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p>Carregando processos excluídos...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center gap-3 mb-2\">\n          <Trash2 className=\"h-8 w-8 text-red-600\" />\n          <h1 className=\"text-3xl font-bold\">Lixeira Eletrônica</h1>\n        </div>\n        <p className=\"text-muted-foreground\">\n          Gerencie processos que foram excluídos do sistema\n        </p>\n      </div>\n\n      {deletedProcesses.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <Trash2 className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">Lixeira vazia</h3>\n              <p className=\"text-muted-foreground\">\n                Não há processos excluídos no momento\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <>\n          <Alert className=\"mb-6\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Os processos nesta lixeira podem ser restaurados ou excluídos permanentemente.\n              <strong> A exclusão permanente é irreversível.</strong>\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"grid gap-4\">\n            {deletedProcesses.map((process) => (\n              <Card key={process.id} className=\"border-red-200\">\n                <CardHeader>\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <CardTitle className=\"flex items-center gap-2 text-lg\">\n                        {process.pbdocNumber}\n                        <Badge className={getStatusColor(process.status)}>\n                          {getStatusLabel(process.status)}\n                        </Badge>\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {process.description}\n                      </p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleRestore(process.id)}\n                        disabled={restoreMutation.isPending}\n                        className=\"text-green-600 hover:text-green-700\"\n                      >\n                        <RotateCcw className=\"h-4 w-4 mr-2\" />\n                        Restaurar\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handlePermanentDelete(process.id)}\n                        disabled={permanentDeleteMutation.isPending}\n                        className=\"text-red-600 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                        Excluir Definitivamente\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                      <div>\n                        <span className=\"font-medium\">Excluído em:</span>\n                        <p>{process.deletedAt ? new Date(process.deletedAt).toLocaleDateString('pt-BR') : '-'}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"h-4 w-4 text-muted-foreground\" />\n                      <div>\n                        <span className=\"font-medium\">Excluído por:</span>\n                        <p>{process.deletedByName || `Usuário ID: ${process.deletedBy}` || '-'}</p>\n                      </div>\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Criado em:</span>\n                      <p>{new Date(process.createdAt).toLocaleDateString('pt-BR')}</p>\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Última atualização:</span>\n                      <p>{new Date(process.updatedAt).toLocaleDateString('pt-BR')}</p>\n                    </div>\n                  </div>\n                  \n                  {process.deletionReason && (\n                    <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-md\">\n                      <span className=\"font-medium text-red-800\">Motivo da exclusão:</span>\n                      <p className=\"text-sm mt-1 text-red-700\">{process.deletionReason}</p>\n                    </div>\n                  )}\n                  \n                  {process.returnComments && (\n                    <div className=\"mt-4 p-3 bg-muted rounded-md\">\n                      <span className=\"font-medium\">Últimos comentários:</span>\n                      <p className=\"text-sm mt-1\">{process.returnComments}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Trash;","size_bytes":10665},"client/src/pages/Users.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { User, Department, insertUserSchema } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { DataTable } from \"@/components/ui/data-table\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { PlusCircle, Search, UserPlus, Edit, Trash, UserCheck, UserX } from \"lucide-react\";\nimport { ColumnDef } from \"@tanstack/react-table\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\nconst Users = () => {\n  const [nameFilter, setNameFilter] = useState(\"\");\n  const [openUserDialog, setOpenUserDialog] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n\n  // Refresh automático ao entrar na página\n  useEffect(() => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/departments\"] });\n  }, []);\n  const [deleting, setDeleting] = useState(false);\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Extended user schema for the form\n  const userFormSchema = insertUserSchema\n    .extend({\n      confirmPassword: z.string().min(1, \"Confirme sua senha\"),\n    })\n    .superRefine(({ password, confirmPassword }, ctx) => {\n      if (password !== confirmPassword) {\n        ctx.addIssue({\n          code: \"custom\",\n          message: \"As senhas não conferem\",\n          path: [\"confirmPassword\"],\n        });\n      }\n    });\n\n  type UserFormValues = z.infer<typeof userFormSchema>;\n\n  const form = useForm<UserFormValues>({\n    resolver: zodResolver(userFormSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      fullName: \"\",\n      email: \"\",\n      department: \"\",\n      role: \"common\",\n    },\n  });\n\n  // Get all users\n  const { data: users, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Get all departments\n  const { data: departments } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n  });\n\n  // Filter users based on name filter\n  const filteredUsers = users?.filter((user) => {\n    if (!nameFilter) return true;\n    return (\n      user.fullName.toLowerCase().includes(nameFilter.toLowerCase()) ||\n      user.username.toLowerCase().includes(nameFilter.toLowerCase())\n    );\n  });\n\n  const openAddUserDialog = () => {\n    form.reset({\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      fullName: \"\",\n      email: \"\",\n      department: \"\",\n      role: \"common\",\n    });\n    setEditingUser(null);\n    setOpenUserDialog(true);\n  };\n\n  const openEditUserDialog = (user: User) => {\n    form.reset({\n      username: user.username,\n      password: \"\",\n      confirmPassword: \"\",\n      fullName: user.fullName,\n      email: user.email || \"\",\n      department: user.department,\n      role: user.role,\n    });\n    setEditingUser(user);\n    setOpenUserDialog(true);\n  };\n\n  const onSubmit = async (data: UserFormValues) => {\n    try {\n      // Remove confirmPassword as it's not in the API\n      const { confirmPassword, ...userData } = data;\n\n      if (editingUser) {\n        // If password is empty, don't send it (keep existing)\n        const updateData = userData.password\n          ? userData\n          : { ...userData, password: undefined };\n\n        await apiRequest(\"PATCH\", `/api/users/${editingUser.id}`, updateData);\n        toast({\n          title: \"Usuário atualizado\",\n          description: \"O usuário foi atualizado com sucesso\",\n        });\n      } else {\n        await apiRequest(\"POST\", \"/api/users\", userData);\n        toast({\n          title: \"Usuário criado\",\n          description: \"O usuário foi criado com sucesso\",\n        });\n      }\n\n      // Refresh users list\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n\n      // Close dialog\n      setOpenUserDialog(false);\n    } catch (error) {\n      console.error(\"Error saving user:\", error);\n      toast({\n        title: \"Erro\",\n        description: `Erro ao ${editingUser ? \"atualizar\" : \"criar\"} usuário`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteUser = async (userId: number) => {\n    setDeleting(true);\n    try {\n      console.log(\"Deleting user ID:\", userId);\n\n      await apiRequest(\"DELETE\", `/api/users/${userId}`, null);\n\n      toast({\n        title: \"Usuário excluído\",\n        description: \"O usuário foi excluído com sucesso\",\n      });\n\n      await queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      toast({\n        title: \"Erro\",\n        description: \"Erro ao excluir usuário\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setDeleting(false);\n    }\n  };\n  \n  const toggleUserActive = async (userId: number, isActive: boolean) => {\n    try {\n      await apiRequest(\"PATCH\", `/api/users/${userId}`, { \n        isActive: !isActive \n      });\n      \n      toast({\n        title: isActive ? \"Usuário desativado\" : \"Usuário ativado\",\n        description: isActive \n          ? \"O usuário foi desativado com sucesso\" \n          : \"O usuário foi ativado e agora pode acessar o sistema\",\n      });\n      \n      await queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n    } catch (error) {\n      console.error(\"Error toggling user active status:\", error);\n      toast({\n        title: \"Erro\",\n        description: `Erro ao ${isActive ? \"desativar\" : \"ativar\"} usuário`,\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const columns: ColumnDef<User>[] = [\n    {\n      accessorKey: \"username\",\n      header: \"Usuário\",\n    },\n    {\n      accessorKey: \"fullName\",\n      header: \"Nome Completo\",\n    },\n    {\n      accessorKey: \"email\",\n      header: \"Email\",\n      cell: ({ row }) => row.getValue(\"email\") || \"—\",\n    },\n    {\n      accessorKey: \"department\",\n      header: \"Setor\",\n    },\n    {\n      accessorKey: \"role\",\n      header: \"Perfil\",\n      cell: ({ row }) => {\n        const role = row.getValue(\"role\") as string;\n        return role === \"admin\" ? \"Administrador\" : \"Comum\";\n      },\n    },\n    {\n      accessorKey: \"isActive\",\n      header: \"Status\",\n      cell: ({ row }) => {\n        const isActive = row.getValue(\"isActive\") as boolean;\n        return (\n          <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n            isActive \n              ? \"bg-green-100 text-green-800\" \n              : \"bg-orange-100 text-orange-800\"\n          }`}>\n            {isActive ? \"Ativo\" : \"Pendente\"}\n          </span>\n        );\n      },\n    },\n    {\n      id: \"actions\",\n      header: \"Ações\",\n      cell: ({ row }) => {\n        const user = row.original;\n        return (\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => openEditUserDialog(user)}\n            >\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n            \n            {/* Botão para ativar/desativar usuário */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => toggleUserActive(user.id, user.isActive)}\n              title={user.isActive ? \"Desativar usuário\" : \"Ativar usuário\"}\n            >\n              {user.isActive ? (\n                <UserX className=\"h-4 w-4 text-orange-500\" />\n              ) : (\n                <UserCheck className=\"h-4 w-4 text-green-500\" />\n              )}\n            </Button>\n\n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Trash className=\"h-4 w-4 text-red-500\" />\n                </Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent>\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Confirmar exclusão</AlertDialogTitle>\n                  <AlertDialogDescription>\n                    Tem certeza que deseja excluir o usuário \"{user.fullName}\"?\n                    Esta ação não pode ser desfeita.\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                  <AlertDialogCancel>Cancelar</AlertDialogCancel>\n                  <AlertDialogAction\n                    onClick={() => handleDeleteUser(user.id)}\n                    disabled={deleting}\n                  >\n                    {deleting ? \"Excluindo...\" : \"Excluir\"}\n                  </AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n          </div>\n        );\n      },\n    },\n  ];\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-gray-800\">Usuários</h1>\n          <p className=\"text-gray-600\">Gerencie os usuários do sistema</p>\n        </div>\n        <Button onClick={openAddUserDialog}>\n          <UserPlus className=\"h-4 w-4 mr-2\" />\n          Novo Usuário\n        </Button>\n      </div>\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"flex-1\">\n              <label\n                htmlFor=\"name-filter\"\n                className=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                Nome ou Usuário\n              </label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  id=\"name-filter\"\n                  placeholder=\"Buscar por nome ou usuário\"\n                  className=\"pl-10\"\n                  value={nameFilter}\n                  onChange={(e) => setNameFilter(e.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users Table */}\n      <Card>\n        <CardContent className=\"p-0 sm:p-0\">\n          {usersLoading ? (\n            <div className=\"p-8 text-center\">Carregando usuários...</div>\n          ) : (\n            <DataTable columns={columns} data={filteredUsers || []} />\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Add/Edit User Dialog */}\n      <Dialog open={openUserDialog} onOpenChange={setOpenUserDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>\n              {editingUser ? \"Editar Usuário\" : \"Novo Usuário\"}\n            </DialogTitle>\n            <DialogDescription>\n              {editingUser\n                ? \"Edite as informações do usuário abaixo\"\n                : \"Preencha as informações para criar um novo usuário\"}\n            </DialogDescription>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome de Usuário</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"usuario\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Nome de usuário para login no sistema\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"fullName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nome Completo</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Nome Completo\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        {editingUser ? \"Nova Senha\" : \"Senha\"}\n                      </FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder={\n                            editingUser\n                              ? \"Deixe em branco para manter a atual\"\n                              : \"Senha\"\n                          }\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirmar Senha</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"password\"\n                          placeholder=\"Confirme a senha\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"email@exemplo.com\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"department\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Setor</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione o setor\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {departments?.map((department) => (\n                            <SelectItem\n                              key={department.id}\n                              value={department.name}\n                            >\n                              {department.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Perfil</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione o perfil\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"common\">Comum</SelectItem>\n                          <SelectItem value=\"admin\">Administrador</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <DialogFooter>\n                <Button type=\"submit\">\n                  {editingUser ? \"Salvar Alterações\" : \"Criar Usuário\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Users;\n","size_bytes":17638},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/notification.ts":{"content":"export type NotificationType = 'deadline' | 'new_process' | 'update' | 'admin' | 'system';\n\nexport interface Notification {\n  id: string;\n  title: string;\n  message: string;\n  type: NotificationType;\n  read: boolean;\n  createdAt: Date;\n  link?: string;\n  entityId?: number;\n}\n\nexport interface NotificationState {\n  notifications: Notification[];\n  unreadCount: number;\n}","size_bytes":371},"client/src/components/alerts/DeadlineAlert.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, Clock, X } from \"lucide-react\";\nimport { Process } from \"@shared/schema\";\n\ninterface ProcessWithDeadline extends Process {\n  daysUntilDeadline: number;\n  isOverdue: boolean;\n}\n\nexport function DeadlineAlert() {\n  const [showAlert, setShowAlert] = useState(false);\n  const [processesNearDeadline, setProcessesNearDeadline] = useState<ProcessWithDeadline[]>([]);\n  const [dismissedAlerts, setDismissedAlerts] = useState<Set<number>>(new Set());\n  const [introCompleted, setIntroCompleted] = useState(false);\n\n  const { data: processes = [] } = useQuery<Process[]>({\n    queryKey: ['/api/processes'],\n    refetchInterval: 5 * 60 * 1000, // Verifica a cada 5 minutos\n  });\n\n  // Aguarda a conclusão da intro (4 segundos)\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIntroCompleted(true);\n    }, 4000); // Mesma duração da intro\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  useEffect(() => {\n    if (processes.length === 0 || !introCompleted) return;\n\n    const today = new Date();\n    const urgentProcesses: ProcessWithDeadline[] = [];\n\n    processes.forEach(process => {\n      if (!process.deadline || process.status === 'completed' || process.status === 'canceled') {\n        return;\n      }\n\n      const deadline = new Date(process.deadline);\n      const daysUntilDeadline = getBusinessDaysBetween(today, deadline);\n      const isOverdue = deadline < today;\n\n      // Alerta para processos com 3 dias ou menos para vencer, ou já vencidos\n      if (daysUntilDeadline <= 3 || isOverdue) {\n        urgentProcesses.push({\n          ...process,\n          daysUntilDeadline,\n          isOverdue\n        });\n      }\n    });\n\n    setProcessesNearDeadline(urgentProcesses);\n    \n    // Mostra o popup se há processos urgentes e não foram dispensados\n    const hasUndismissedProcesses = urgentProcesses.some(p => !dismissedAlerts.has(p.id));\n    if (urgentProcesses.length > 0 && hasUndismissedProcesses && !showAlert) {\n      setShowAlert(true);\n    }\n  }, [processes, dismissedAlerts, showAlert, introCompleted]);\n\n  // Função para calcular dias úteis entre duas datas\n  const getBusinessDaysBetween = (startDate: Date, endDate: Date): number => {\n    let count = 0;\n    const current = new Date(startDate);\n    current.setHours(0, 0, 0, 0);\n    const end = new Date(endDate);\n    end.setHours(0, 0, 0, 0);\n\n    while (current <= end) {\n      // Verifica se é dia útil (não é fim de semana)\n      if (current.getDay() !== 0 && current.getDay() !== 6) {\n        count++;\n      }\n      current.setDate(current.getDate() + 1);\n    }\n\n    return count;\n  };\n\n  const getUrgencyColor = (process: ProcessWithDeadline) => {\n    if (process.isOverdue) return \"destructive\";\n    return \"default\"; // Yellow/amber for all deadline alerts\n  };\n\n  const getUrgencyText = (process: ProcessWithDeadline) => {\n    if (process.isOverdue) return \"Vencido\";\n    if (process.daysUntilDeadline === 0) return \"Vence hoje\";\n    if (process.daysUntilDeadline === 1) return \"Vence amanhã\";\n    return `${process.daysUntilDeadline} dias`;\n  };\n\n  if (processesNearDeadline.length === 0) {\n    return null;\n  }\n\n  const handleClose = () => {\n    // Marca todos os processos atualmente exibidos como dispensados\n    const currentProcessIds = processesNearDeadline.map(p => p.id);\n    setDismissedAlerts(prev => new Set([...prev, ...currentProcessIds]));\n    setShowAlert(false);\n    console.log('Alerta de prazo fechado para processos:', currentProcessIds);\n  };\n\n  return (\n    <Dialog open={showAlert} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-yellow-600\">\n            <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />\n            Processos com Prazo Próximo ao Vencimento\n          </DialogTitle>\n          <DialogDescription>\n            Os seguintes processos estão próximos do prazo de vencimento ou já venceram:\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-3\">\n          {processesNearDeadline.map((process) => (\n            <Alert key={process.id} className=\"border-l-4 border-l-yellow-500 bg-yellow-50\">\n              <Clock className=\"h-4 w-4 text-yellow-600\" />\n              <AlertDescription className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"font-medium\">{process.pbdocNumber}</div>\n                  <div className=\"text-sm text-muted-foreground truncate\">\n                    {process.description}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground mt-1\">\n                    Prazo: {new Date(process.deadline!).toLocaleDateString('pt-BR')}\n                  </div>\n                </div>\n                <Badge variant={getUrgencyColor(process)} className=\"ml-2 bg-yellow-200 text-yellow-800 border-yellow-300\">\n                  {getUrgencyText(process)}\n                </Badge>\n              </AlertDescription>\n            </Alert>\n          ))}\n        </div>\n\n        <div className=\"flex justify-between items-center pt-4 border-t\">\n          <div className=\"text-sm text-muted-foreground\">\n            {processesNearDeadline.length} processo{processesNearDeadline.length !== 1 ? 's' : ''} com prazo urgente\n          </div>\n          <Button \n            onClick={handleClose}\n            size=\"sm\"\n            className=\"bg-yellow-600 hover:bg-yellow-700 text-white\"\n          >\n            <X className=\"h-4 w-4 mr-1\" />\n            Entendi\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6047},"client/src/components/bidding/BiddingFlowchart (copy).tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BiddingModality } from \"@shared/schema\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst FLOW_CHARTS = {\n  1: { // Pregão Eletrônico\n    steps: [\n      \"Termo de Referência\",\n      \"Pesquisa de Preço\",\n      \"Autorização\",\n      \"Elaboração do Edital\",\n      \"Publicação\",\n      \"Sessão de Lances\",\n      \"Análise de Documentação\",\n      \"Homologação\",\n      \"Contratação\"\n    ],\n    connections: [\n      [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]\n    ]\n  },\n  2: { // Concorrência\n    steps: [\n      \"Projeto Básico\",\n      \"Pesquisa de Preço\",\n      \"Autorização\",\n      \"Elaboração do Edital\",\n      \"Publicação\",\n      \"Habilitação\",\n      \"Julgamento\",\n      \"Homologação\",\n      \"Adjudicação\",\n      \"Contratação\"\n    ],\n    connections: [\n      [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]\n    ]\n  },\n  3: { // Dispensa\n    steps: [\n      \"Termo de Referência\",\n      \"Justificativa da Dispensa\",\n      \"Pesquisa de Preço\",\n      \"Autorização\",\n      \"Habilitação do Fornecedor\",\n      \"Ratificação\",\n      \"Contratação\"\n    ],\n    connections: [\n      [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]\n    ]\n  },\n  4: { // Inexigibilidade\n    steps: [\n      \"Termo de Referência\",\n      \"Justificativa da Inexigibilidade\",\n      \"Comprovação de Exclusividade\",\n      \"Autorização\",\n      \"Habilitação do Fornecedor\",\n      \"Ratificação\",\n      \"Contratação\"\n    ],\n    connections: [\n      [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]\n    ]\n  }\n};\n\ninterface BiddingFlowchartProps {\n  selectedModalityId?: number;\n  onModalitySelect?: (modalityId: number) => void;\n}\n\nconst BiddingFlowchart = ({ selectedModalityId, onModalitySelect }: BiddingFlowchartProps) => {\n  const [modalityId, setModalityId] = useState<number>(selectedModalityId || 0);\n\n  // Get modalities\n  const { data: modalities, isLoading, error } = useQuery<BiddingModality[]>({\n    queryKey: ['/api/modalities'],\n  });\n\n  const handleModalitySelect = (id: number) => {\n    setModalityId(id);\n    if (onModalitySelect) {\n      onModalitySelect(id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Fluxograma de Licitação</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p>Carregando modalidades...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error || !modalities) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Fluxograma de Licitação</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-red-500\">Erro ao carregar modalidades</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Get flowchart data for the selected modality\n  const flowchart = FLOW_CHARTS[modalityId as keyof typeof FLOW_CHARTS];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Fluxograma de Licitação</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"mb-6\">\n          <div className=\"flex flex-wrap gap-2\">\n            {modalities.map((modality) => (\n              <Button\n                key={modality.id}\n                variant={modalityId === modality.id ? \"default\" : \"outline\"}\n                onClick={() => handleModalitySelect(modality.id)}\n                className=\"mb-2\"\n              >\n                {modality.name}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {modalityId && flowchart ? (\n          <div className=\"mt-6\">\n            <div className=\"overflow-auto pb-4\">\n              <div className=\"min-w-[600px]\">\n                <svg width=\"100%\" height=\"150\" viewBox=\"0 0 1000 150\" className=\"mx-auto\">\n                  {flowchart.steps.map((step, index) => {\n                    const x = (index * 120) + 60;\n                    return (\n                      <g key={index}>\n                        {/* Node */}\n                        <rect\n                          x={x - 50}\n                          y=\"50\"\n                          width=\"100\"\n                          height=\"50\"\n                          rx=\"5\"\n                          fill=\"#0066cc\"\n                          className=\"transition-all hover:fill-blue-700\"\n                        />\n                        {/* Text */}\n                        <text\n                          x={x}\n                          y=\"75\"\n                          fontSize=\"12\"\n                          fontWeight=\"bold\"\n                          fill=\"white\"\n                          textAnchor=\"middle\"\n                          dominantBaseline=\"middle\"\n                        >\n                          {step}\n                        </text>\n                        {/* Arrow */}\n                        {index < flowchart.steps.length - 1 && (\n                          <>\n                            <line\n                              x1={x + 50}\n                              y1=\"75\"\n                              x2={x + 70}\n                              y2=\"75\"\n                              stroke=\"#666\"\n                              strokeWidth=\"2\"\n                            />\n                            <polygon\n                              points={`${x + 70},70 ${x + 80},75 ${x + 70},80`}\n                              fill=\"#666\"\n                            />\n                          </>\n                        )}\n                      </g>\n                    );\n                  })}\n                </svg>\n              </div>\n            </div>\n\n            <div className=\"mt-4\">\n              <h3 className=\"text-lg font-medium mb-2\">Descrição do Fluxo</h3>\n              <ol className=\"list-decimal pl-5 space-y-2\">\n                {flowchart.steps.map((step, index) => (\n                  <li key={index} className=\"text-gray-700\">\n                    <span className=\"font-medium\">{step}</span>\n                    {index === 0 && \" - Início do processo com a definição do objeto\"}\n                    {index === flowchart.steps.length - 1 && \" - Finalização do processo\"}\n                  </li>\n                ))}\n              </ol>\n            </div>\n          </div>\n        ) : (\n          <div className=\"p-8 text-center\">\n            <p className=\"text-gray-500\">Selecione uma modalidade para visualizar o fluxo</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default BiddingFlowchart;\n","size_bytes":6604},"client/src/components/bidding/BiddingFlowchart.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BiddingModality } from \"@shared/schema\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst FLOW_CHARTS = {\n  1: { // Pregão Eletrônico\n    steps: [\n      \"Termo de Referência\",\n      \"Pesquisa de Preço\",\n      \"Autorização\",\n      \"Elaboração do Edital\",\n      \"Publicação\",\n      \"Sessão de Lances\",\n      \"Análise de Documentação\",\n      \"Homologação\",\n      \"Contratação\"\n    ],\n    connections: [\n      [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]\n    ]\n  },\n  2: { // Concorrência\n    steps: [\n      \"Projeto Básico\",\n      \"Pesquisa de Preço\",\n      \"Autorização\",\n      \"Elaboração do Edital\",\n      \"Publicação\",\n      \"Habilitação\",\n      \"Julgamento\",\n      \"Homologação\",\n      \"Adjudicação\",\n      \"Contratação\"\n    ],\n    connections: [\n      [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9]\n    ]\n  },\n  3: { // Dispensa\n    steps: [\n      \"Termo de Referência\",\n      \"Justificativa da Dispensa\",\n      \"Pesquisa de Preço\",\n      \"Autorização\",\n      \"Habilitação do Fornecedor\",\n      \"Ratificação\",\n      \"Contratação\"\n    ],\n    connections: [\n      [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]\n    ]\n  },\n  4: { // Inexigibilidade\n    steps: [\n      \"Termo de Referência\",\n      \"Justificativa da Inexigibilidade\",\n      \"Comprovação de Exclusividade\",\n      \"Autorização\",\n      \"Habilitação do Fornecedor\",\n      \"Ratificação\",\n      \"Contratação\"\n    ],\n    connections: [\n      [0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6]\n    ]\n  }\n};\n\ninterface BiddingFlowchartProps {\n  selectedModalityId?: number;\n  onModalitySelect?: (modalityId: number) => void;\n}\n\nconst BiddingFlowchart = ({ selectedModalityId, onModalitySelect }: BiddingFlowchartProps) => {\n  const [modalityId, setModalityId] = useState<number>(selectedModalityId || 0);\n\n  // Get modalities\n  const { data: modalities, isLoading, error } = useQuery<BiddingModality[]>({\n    queryKey: ['/api/modalities'],\n  });\n\n  const handleModalitySelect = (id: number) => {\n    setModalityId(id);\n    if (onModalitySelect) {\n      onModalitySelect(id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Fluxograma de Licitação</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p>Carregando modalidades...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error || !modalities) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Fluxograma de Licitação</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-red-500\">Erro ao carregar modalidades</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Get flowchart data for the selected modality\n  const flowchart = FLOW_CHARTS[modalityId as keyof typeof FLOW_CHARTS];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Fluxograma de Licitação</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"mb-6\">\n          <div className=\"flex flex-wrap gap-2\">\n            {modalities.map((modality) => (\n              <Button\n                key={modality.id}\n                variant={modalityId === modality.id ? \"default\" : \"outline\"}\n                onClick={() => handleModalitySelect(modality.id)}\n                className=\"mb-2\"\n              >\n                {modality.name}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {modalityId && flowchart ? (\n          <div className=\"mt-6\">\n            <div className=\"overflow-auto pb-4\">\n              <div className=\"min-w-[600px]\">\n                <svg width=\"100%\" height=\"150\" viewBox=\"0 0 1000 150\" className=\"mx-auto\">\n                  {flowchart.steps.map((step, index) => {\n                    const x = (index * 120) + 60;\n                    return (\n                      <g key={index}>\n                        {/* Node */}\n                        <rect\n                          x={x - 50}\n                          y=\"50\"\n                          width=\"100\"\n                          height=\"50\"\n                          rx=\"5\"\n                          fill=\"#0066cc\"\n                          className=\"transition-all hover:fill-blue-700\"\n                        />\n                        {/* Text */}\n                        <text\n                          x={x}\n                          y=\"75\"\n                          fontSize=\"12\"\n                          fontWeight=\"bold\"\n                          fill=\"white\"\n                          textAnchor=\"middle\"\n                          dominantBaseline=\"middle\"\n                        >\n                          {step}\n                        </text>\n                        {/* Arrow */}\n                        {index < flowchart.steps.length - 1 && (\n                          <>\n                            <line\n                              x1={x + 50}\n                              y1=\"75\"\n                              x2={x + 70}\n                              y2=\"75\"\n                              stroke=\"#666\"\n                              strokeWidth=\"2\"\n                            />\n                            <polygon\n                              points={`${x + 70},70 ${x + 80},75 ${x + 70},80`}\n                              fill=\"#666\"\n                            />\n                          </>\n                        )}\n                      </g>\n                    );\n                  })}\n                </svg>\n              </div>\n            </div>\n\n            <div className=\"mt-4\">\n              <h3 className=\"text-lg font-medium mb-2\">Descrição do Fluxo</h3>\n              <ol className=\"list-decimal pl-5 space-y-2\">\n                {flowchart.steps.map((step, index) => (\n                  <li key={index} className=\"text-gray-700\">\n                    <span className=\"font-medium\">{step}</span>\n                    {index === 0 && \" - Início do processo com a definição do objeto\"}\n                    {index === flowchart.steps.length - 1 && \" - Finalização do processo\"}\n                  </li>\n                ))}\n              </ol>\n            </div>\n          </div>\n        ) : (\n          <div className=\"p-8 text-center\">\n            <p className=\"text-gray-500\">Selecione uma modalidade para visualizar o fluxo</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default BiddingFlowchart;\n","size_bytes":6604},"client/src/components/bidding/StepChecklist.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ProcessStep } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { XCircle, Check } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\ninterface StepChecklistProps {\n  processId: number;\n  modalityId: number;\n  userDepartment: string;\n  authorizationModalOpen?: boolean;\n  setAuthorizationModalOpen?: (open: boolean) => void;\n  onStepReject?: (step: ProcessStep) => void;\n  onAuthorizationStep?: (step: ProcessStep) => void;\n}\n\nconst StepChecklist = ({\n  processId,\n  modalityId,\n  userDepartment,\n  authorizationModalOpen: externalAuthModalOpen,\n  setAuthorizationModalOpen: setExternalAuthModalOpen,\n  onStepReject,\n  onAuthorizationStep,\n}: StepChecklistProps) => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeStep, setActiveStep] = useState<ProcessStep | null>(null);\n  const [observation, setObservation] = useState(\"\");\n  const [authorizationDecision, setAuthorizationDecision] = useState(\"\");\n  // Usar modal externo se fornecido, senão usar interno\n  const [internalAuthModalOpen, setInternalAuthModalOpen] = useState(false);\n  const authorizationModalOpen = externalAuthModalOpen ?? internalAuthModalOpen;\n  const setAuthorizationModalOpen =\n    setExternalAuthModalOpen ?? setInternalAuthModalOpen;\n\n  // Fetch process steps\n  const {\n    data: steps,\n    isLoading,\n    error,\n  } = useQuery<ProcessStep[]>({\n    queryKey: [`/api/processes/${processId}/steps`],\n  });\n\n  // Fetch departments\n  const { data: departments } = useQuery({\n    queryKey: [\"/api/departments\"],\n  });\n\n  // Get current user\n  const { data: currentUser } = useQuery({\n    queryKey: [\"/api/auth/status\"],\n  });\n\n  // Mapeamento de departamentos por nome\n  const departmentMap: { [key: string]: number } = {\n    \"Setor Demandante\": 1,\n    \"Divisão de Licitação\": 2,\n    \"Núcleo de Pesquisa de Preços – NPP\": 3,\n    \"Unidade de Orçamento e Finanças\": 4,\n    \"Secretário de Estado da Administração Penitenciária - SEAP\": 5,\n    // Mapeamentos adicionais para compatibilidade\n    TI: 1,\n    Licitações: 2,\n    Jurídico: 3,\n    Financeiro: 4,\n    Administrativo: 5,\n  };\n\n  // Checklist específico por setor baseado no fluxograma do Pregão Eletrônico\n  const getSectorSpecificSteps = () => {\n    if (modalityId !== 1) return []; // Apenas para Pregão Eletrônico\n\n    const currentDeptId = departmentMap[userDepartment];\n\n    // Etapas por setor conforme fluxograma oficial\n    const stepsBySector: { [key: number]: any[] } = {\n      // TI - Setor Demandante (Fase de Iniciação)\n      1: [\n        {\n          name: \"1. Documento de Formalização da Demanda - DFD\",\n          departmentId: 1,\n          phase: \"Iniciação\",\n        },\n        {\n          name: \"2. Estudo Técnico Preliminar - ETP\",\n          departmentId: 1,\n          phase: \"Iniciação\",\n        },\n        { name: \"3. Mapa de Risco - MR\", departmentId: 1, phase: \"Iniciação\" },\n        {\n          name: \"4. Termo de Referência - TR\",\n          departmentId: 1,\n          phase: \"Iniciação\",\n        },\n      ],\n\n      // Licitações - Divisão de Licitação (Fase de Preparação e Execução)\n      2: [\n        {\n          name: \"6. Criar Processo no Órgão\",\n          departmentId: 2,\n          phase: \"Preparação\",\n        },\n        {\n          name: \"8. Pesquisa de Preços - NPP\",\n          departmentId: 2,\n          phase: \"Preparação\",\n        },\n        {\n          name: \"9. Aprovação da Pesquisa de Preços\",\n          departmentId: 2,\n          phase: \"Preparação\",\n        },\n        {\n          name: \"11. Designação do Pregoeiro e Equipe de Apoio\",\n          departmentId: 2,\n          phase: \"Preparação\",\n        },\n        {\n          name: \"12. Elaboração do Edital\",\n          departmentId: 2,\n          phase: \"Preparação\",\n        },\n        {\n          name: \"14. Publicação do Edital\",\n          departmentId: 2,\n          phase: \"Execução\",\n        },\n        {\n          name: \"15. Recebimento das Propostas\",\n          departmentId: 2,\n          phase: \"Execução\",\n        },\n        {\n          name: \"16. Sessão Pública do Pregão\",\n          departmentId: 2,\n          phase: \"Execução\",\n        },\n        {\n          name: \"17. Julgamento das Propostas\",\n          departmentId: 2,\n          phase: \"Execução\",\n        },\n        {\n          name: \"18. Habilitação do Vencedor\",\n          departmentId: 2,\n          phase: \"Execução\",\n        },\n        { name: \"19. Adjudicação\", departmentId: 2, phase: \"Execução\" },\n      ],\n\n      // Jurídico - Assessoria Jurídica (Análise Legal)\n      3: [\n        {\n          name: \"13. Análise Jurídica do Edital\",\n          departmentId: 3,\n          phase: \"Preparação\",\n        },\n        { name: \"20. Análise de Recursos\", departmentId: 3, phase: \"Execução\" },\n      ],\n\n      // Financeiro - Ordenador de Despesa (Autorizações e Homologação)\n      4: [\n        {\n          name: \"5. Autorização pelo Ordenador de Despesa\",\n          departmentId: 4,\n          phase: \"Iniciação\",\n        },\n        {\n          name: \"10. Autorização da Licitação\",\n          departmentId: 4,\n          phase: \"Preparação\",\n        },\n        { name: \"21. Homologação\", departmentId: 4, phase: \"Finalização\" },\n        { name: \"22. Empenho\", departmentId: 4, phase: \"Finalização\" },\n      ],\n\n      // Administrativo - Gestão Contratual (Finalização)\n      5: [\n        {\n          name: \"23. Elaboração do Contrato\",\n          departmentId: 5,\n          phase: \"Finalização\",\n        },\n        {\n          name: \"24. Assinatura do Contrato\",\n          departmentId: 5,\n          phase: \"Finalização\",\n        },\n        {\n          name: \"25. Publicação do Contrato\",\n          departmentId: 5,\n          phase: \"Finalização\",\n        },\n        {\n          name: \"26. Fiscalização Contratual\",\n          departmentId: 5,\n          phase: \"Finalização\",\n        },\n      ],\n    };\n\n    return stepsBySector[currentDeptId] || [];\n  };\n\n  // Função para obter todas as etapas (para compatibilidade)\n  const getDefaultSteps = () => {\n    if (modalityId === 1) {\n      // Pregão Eletrônico\n      return [\n        // FASE 1: INICIAÇÃO (Setor Demandante)\n        {\n          name: \"1. Documento de Formalização da Demanda - DFD\",\n          departmentId: 1,\n          phase: \"Iniciação\",\n          timeLimit: null,\n        },\n        {\n          name: \"2. Estudo Técnico Preliminar - ETP\",\n          departmentId: 1,\n          phase: \"Iniciação\",\n          timeLimit: null,\n        },\n        {\n          name: \"3. Mapa de Risco - MR\",\n          departmentId: 1,\n          phase: \"Iniciação\",\n          timeLimit: null,\n        },\n        {\n          name: \"4. Termo de Referência - TR\",\n          departmentId: 1,\n          phase: \"Iniciação\",\n          timeLimit: null,\n        },\n\n        // DECISÃO: Ordenador de Despesa\n        {\n          name: \"5. Autorização pelo Ordenador de Despesa\",\n          departmentId: 4,\n          phase: \"Iniciação\",\n          timeLimit: \"10 dias\",\n        },\n\n        // FASE 2: PREPARAÇÃO (Divisão de Licitação)\n        {\n          name: \"6. Criar Processo no Órgão\",\n          departmentId: 2,\n          phase: \"Preparação\",\n          timeLimit: \"2 dias\",\n        },\n\n        // NPP - Núcleo de Pesquisa de Preços\n        {\n          name: \"7. Fazer Pesquisa de Preços\",\n          departmentId: 2,\n          phase: \"Preparação\",\n          timeLimit: \"2 dias\",\n        },\n        {\n          name: \"8. Elaborar Mapa Comparativo de Preços\",\n          departmentId: 2,\n          phase: \"Preparação\",\n          timeLimit: \"10 dias\",\n        },\n        {\n          name: \"9. Metodologia da Pesquisa de Preços\",\n          departmentId: 2,\n          phase: \"Preparação\",\n          timeLimit: \"10 dias\",\n        },\n\n        // Orçamento e Finanças\n        {\n          name: \"10. Consultar Disponibilidade Orçamentária\",\n          departmentId: 4,\n          phase: \"Preparação\",\n          timeLimit: \"1 dia\",\n        },\n        {\n          name: \"11. Emitir Reserva Orçamentária - R.O.\",\n          departmentId: 4,\n          phase: \"Preparação\",\n          timeLimit: \"1 dia\",\n        },\n\n        // FASE 3: AUTORIZAÇÃO (Secretário SEAP)\n        {\n          name: \"12. Autorização Final pelo Secretário SEAP\",\n          departmentId: 5,\n          phase: \"Execução\",\n          timeLimit: null,\n        },\n\n        // FASE 4: EXECUÇÃO (Divisão de Licitação)\n        {\n          name: \"13. Elaborar Edital e seus Anexos\",\n          departmentId: 2,\n          phase: \"Execução\",\n          timeLimit: \"10 dias\",\n        },\n        {\n          name: \"14. Consultar Comitê Gestor de Gasto Público\",\n          departmentId: 2,\n          phase: \"Execução\",\n          timeLimit: \"2 dias\",\n        },\n        {\n          name: \"15. Solicitar Elaboração de Nota Técnica\",\n          departmentId: 3,\n          phase: \"Execução\",\n          timeLimit: \"1 dia\",\n        },\n\n        // FASE 5: PUBLICAÇÃO E SESSÃO\n        {\n          name: \"16. Publicar Edital\",\n          departmentId: 2,\n          phase: \"Execução\",\n          timeLimit: null,\n        },\n        {\n          name: \"17. Realizar Sessão Pública de Lances\",\n          departmentId: 2,\n          phase: \"Execução\",\n          timeLimit: null,\n        },\n        {\n          name: \"18. Análise de Documentação dos Licitantes\",\n          departmentId: 2,\n          phase: \"Execução\",\n          timeLimit: null,\n        },\n        {\n          name: \"19. Adjudicação e Homologação\",\n          departmentId: 2,\n          phase: \"Finalização\",\n          timeLimit: null,\n        },\n\n        // FASE 6: CONTRATAÇÃO\n        {\n          name: \"20. Elaboração do Contrato\",\n          departmentId: 3,\n          phase: \"Finalização\",\n          timeLimit: null,\n        },\n        {\n          name: \"21. Assinatura do Contrato\",\n          departmentId: 5,\n          phase: \"Finalização\",\n          timeLimit: null,\n        },\n      ];\n    }\n\n    // Para outras modalidades, manter etapas básicas\n    return [\n      {\n        name: \"Elaboração do Termo de Referência\",\n        departmentId: 1,\n        phase: \"Iniciação\",\n        timeLimit: null,\n      },\n      {\n        name: \"Pesquisa de Preço\",\n        departmentId: 1,\n        phase: \"Preparação\",\n        timeLimit: null,\n      },\n      {\n        name: \"Aprovação do Ordenador de Despesa\",\n        departmentId: 4,\n        phase: \"Execução\",\n        timeLimit: null,\n      },\n    ];\n  };\n\n  // Verificar se a autorização foi concluída e obter a decisão\n  const authorizationStep = steps?.find(\n    (s) => s.stepName === \"Autorização pelo Secretário SEAP\" && s.isCompleted,\n  );\n  const completedAuthDecision = authorizationStep?.observations || \"\";\n\n  // Verificar se foi selecionada \"DISPONIBILIDADE ORÇAMENTÁRIA\"\n  const hasAvailableBudget = completedAuthDecision.includes(\n    \"DISPONIBILIDADE ORÇAMENTÁRIA\",\n  );\n  console.log(\n    \"🔍🔍🔍 CHEQUE DISPONIBILIDADE - completedAuthDecision:\",\n    completedAuthDecision,\n  );\n  console.log(\n    \"🔍🔍🔍 CHEQUE DISPONIBILIDADE - hasAvailableBudget:\",\n    hasAvailableBudget,\n  );\n\n  // Debug da decisão\n  console.log(\"🔍 StepChecklist - Decisão encontrada:\", completedAuthDecision);\n  console.log(\"🔍 StepChecklist - hasAvailableBudget:\", hasAvailableBudget);\n  console.log(\"🔍 StepChecklist - authorizationStep:\", authorizationStep);\n\n  // Etapas condicionais que serão tratadas separadamente\n  const conditionalStepNames = [\n    \"Devolver para correção ou arquivamento\",\n    \"Solicitar ajuste/aditivo do plano de trabalho\",\n    \"Solicitar disponibilização de orçamento\",\n    // \"Autorizar Emissão de R.O\" será exibida condicionalmente quando hasAvailableBudget for true\n  ];\n\n  // Debug detalhado\n  console.log(\"🔍🔍🔍 =========================\");\n  console.log(\"🔍🔍🔍 STEPCHECKLIST CARREGADO PARA PROCESSO\", processId);\n  console.log(\"🔍🔍🔍 =========================\");\n  console.log(\"🔍 StepChecklist - userDepartment:\", userDepartment);\n  console.log(\"🔍 StepChecklist - steps total:\", steps?.length);\n  console.log(\n    \"🔍 StepChecklist - Todas as etapas do processo:\",\n    steps?.map((s) => ({\n      name: s.stepName,\n      deptId: s.departmentId,\n      completed: s.isCompleted,\n      observations: s.observations,\n    })),\n  );\n\n  // Verificar especificamente se a etapa \"Autorizar Emissão de R.O\" existe\n  const authRoStep = steps?.find(\n    (s) => s.stepName === \"Autorizar Emissão de R.O\",\n  );\n  console.log(\n    \"🔍 StepChecklist - Etapa 'Autorizar Emissão de R.O' encontrada no banco:\",\n    authRoStep,\n  );\n\n  // Verificar especificamente a etapa de autorização\n  console.log(\n    \"🔍 StepChecklist - Etapa de autorização completa:\",\n    authorizationStep,\n  );\n  console.log(\"🔍 StepChecklist - Decisão encontrada:\", completedAuthDecision);\n  console.log(\"🔍 StepChecklist - hasAvailableBudget:\", hasAvailableBudget);\n\n  // Filtrar etapas do setor atual, EXCLUINDO as etapas condicionais\n  const filteredSteps =\n    steps?.filter((step) => {\n      const currentDeptId = departmentMap[userDepartment];\n      console.log(\n        \"🔍 StepChecklist - currentDeptId para\",\n        userDepartment,\n        \"=\",\n        currentDeptId,\n      );\n\n      // Excluir etapas de \"Transferência de Setor\" (são automáticas)\n      if (step.stepName === \"Transferência de Setor\") {\n        return false;\n      }\n\n      // EXCLUIR as 4 etapas condicionais da lista principal\n      if (conditionalStepNames.includes(step.stepName)) {\n        return false;\n      }\n\n      // EXCLUIR etapas marcadas como removidas\n      if (step.observations && step.observations.includes(\"ETAPA_REMOVIDA\")) {\n        return false;\n      }\n\n      // Mostrar etapas do departamento atual (concluídas e não concluídas)\n      // Para etapa de Autorização, sempre mostrar mesmo se concluída para poder editar decisão\n      if (step.stepName === \"Autorização pelo Secretário SEAP\") {\n        // Admin pode ver todas as etapas de autorização\n        if ((currentUser as any)?.role === \"admin\") {\n          return true;\n        }\n        return step.departmentId === currentDeptId;\n      }\n\n      // Mostrar \"Autorizar Emissão de R.O\" automaticamente quando há disponibilidade orçamentária\n      if (step.stepName === \"Autorizar Emissão de R.O\") {\n        console.log(\n          \"🔍🔍🔍 StepChecklist - Etapa 'Autorizar Emissão de R.O' encontrada!\",\n        );\n        console.log(\n          \"🔍 StepChecklist - hasAvailableBudget:\",\n          hasAvailableBudget,\n        );\n        console.log(\"🔍 StepChecklist - step.departmentId:\", step.departmentId);\n        console.log(\"🔍 StepChecklist - currentDeptId:\", currentDeptId);\n        console.log(\n          \"🔍 StepChecklist - User role:\",\n          (currentUser as any)?.role,\n        );\n        console.log(\"🔍 StepChecklist - step.isCompleted:\", step.isCompleted);\n\n        // SEMPRE mostrar se há disponibilidade orçamentária E se não está concluída\n        // Admin pode ver independente do departamento\n        const canViewStep =\n          hasAvailableBudget &&\n          !step.isCompleted &&\n          ((currentUser as any)?.role === \"admin\" ||\n            step.departmentId === currentDeptId);\n\n        console.log(\n          \"🔍🔍🔍 StepChecklist - RESULTADO - Vai mostrar etapa:\",\n          canViewStep,\n        );\n        return canViewStep;\n      }\n\n      // Para outras etapas, mostrar apenas não concluídas\n      // IMPORTANTE: Administrador pode ver etapas de todos os departamentos\n      if ((currentUser as any)?.role === \"admin\") {\n        return !step.isCompleted; // Admin vê todas as etapas não concluídas\n      }\n      return step.departmentId === currentDeptId && !step.isCompleted;\n    }) || [];\n\n  // REMOVIDO: Sistema de etapas condicionais completamente excluído\n\n  // Create initial steps if none exist\n  useEffect(() => {\n    const createInitialSteps = async () => {\n      if (steps && steps.length === 0) {\n        try {\n          const defaultSteps = getDefaultSteps();\n\n          for (const step of defaultSteps) {\n            await apiRequest(\"POST\", `/api/processes/${processId}/steps`, {\n              stepName: step.name,\n              departmentId: step.departmentId,\n              isCompleted: false,\n              observations: step.timeLimit ? `Prazo: ${step.timeLimit}` : null,\n            });\n          }\n\n          // Refetch steps after creating them\n          queryClient.invalidateQueries({\n            queryKey: [`/api/processes/${processId}/steps`],\n          });\n\n          toast({\n            title: \"Etapas criadas\",\n            description: \"Etapas padrão foram criadas para este processo\",\n          });\n        } catch (error) {\n          toast({\n            title: \"Erro\",\n            description: \"Não foi possível criar as etapas padrão\",\n            variant: \"destructive\",\n          });\n        }\n      }\n    };\n\n    if (steps && steps.length === 0) {\n      createInitialSteps();\n    }\n  }, [steps, processId, queryClient, modalityId, toast]);\n\n  // REMOVIDA: Função createConditionalStepsIfNeeded\n  // As etapas condicionais agora são criadas apenas APÓS a autorização ser concluída\n\n  // Effect para EXCLUIR PERMANENTEMENTE as etapas condicionais indesejadas\n  useEffect(() => {\n    if (steps && processId) {\n      const removeConditionalSteps = async () => {\n        // Remover PERMANENTEMENTE todas as etapas condicionais\n        for (const stepName of conditionalStepNames) {\n          const existingStep = steps.find(\n            (s) => s.stepName === stepName && s.departmentId === 5,\n          );\n          if (existingStep) {\n            try {\n              // Marcar como ETAPA_REMOVIDA para exclusão total\n              await apiRequest(\n                \"PATCH\",\n                `/api/processes/${processId}/steps/${existingStep.id}`,\n                {\n                  observations:\n                    \"ETAPA_REMOVIDA - Etapa condicional excluída permanentemente\",\n                  isCompleted: false,\n                  isLocked: false,\n                },\n              );\n              console.log(`🗑️ Etapa condicional EXCLUÍDA: ${stepName}`);\n            } catch (error) {\n              console.log(`❌ Erro ao excluir etapa: ${stepName}`, error);\n            }\n          }\n        }\n\n        queryClient.invalidateQueries({\n          queryKey: [`/api/processes/${processId}/steps`],\n        });\n      };\n\n      removeConditionalSteps();\n    }\n  }, [steps, processId]);\n\n  const handleStepClick = (step: ProcessStep) => {\n    setActiveStep(step);\n    setObservation(step.observations || \"\");\n  };\n\n  const handleToggleStep = async (step: ProcessStep) => {\n    console.log(\"🔍 handleToggleStep chamado:\", {\n      stepName: step.stepName,\n      isCompleted: step.isCompleted,\n      stepId: step.id,\n      isLocked: step.isLocked,\n    });\n\n    // ESPECIAL: \"Autorizar via sistema\" - arquivar automaticamente\n    if (step.stepName === \"Autorizar via sistema\" && !step.isCompleted) {\n      console.log(\n        \"🔥 INTERCEPTANDO Autorizar via sistema - Iniciando arquivamento automático\",\n      );\n\n      try {\n        // Concluir etapa primeiro\n        const updateResponse = await apiRequest(\n          \"PATCH\",\n          `/api/processes/${processId}/steps/${step.id}`,\n          {\n            isCompleted: true,\n            observations:\n              \"Autorizado via sistema - Processo arquivado automaticamente\",\n          },\n        );\n\n        if (updateResponse.ok) {\n          console.log(\n            \"✅ Etapa 'Autorizar via sistema' concluída, iniciando arquivamento...\",\n          );\n\n          // Arquivar processo automaticamente\n          const archiveResponse = await apiRequest(\n            \"DELETE\",\n            `/api/processes/${processId}`,\n            {\n              deletionReason:\n                \"Autorizado via sistema - Secretário de Estado da Administração Penitenciária - SEAP\",\n            },\n          );\n\n          if (archiveResponse.ok) {\n            console.log(\"✅ Processo arquivado com sucesso!\");\n            queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n            toast({\n              title: \"Processo Autorizado e Arquivado\",\n              description:\n                \"Autorização via sistema concluída. Processo arquivado automaticamente.\",\n              variant: \"default\",\n            });\n\n            // Redirecionar para lista de processos\n            setTimeout(() => {\n              window.location.href = \"/processes\";\n            }, 2000);\n            return; // Sair da função para não executar a lógica padrão\n          } else {\n            const errorText = await archiveResponse.text();\n            console.error(\"❌ Erro no arquivamento:\", errorText);\n            toast({\n              title: \"Erro no arquivamento\",\n              description:\n                \"Etapa aprovada mas processo não foi arquivado. Erro: \" +\n                errorText,\n              variant: \"destructive\",\n            });\n          }\n        } else {\n          console.error(\"❌ Erro ao concluir etapa\");\n        }\n      } catch (error) {\n        console.error(\"❌ Erro geral no arquivamento:\", error);\n        toast({\n          title: \"Erro\",\n          description: \"Erro ao processar autorização via sistema\",\n          variant: \"destructive\",\n        });\n      }\n      return; // Não executar lógica padrão\n    }\n\n    // BLOQUEIO ABSOLUTO: Verificar se a etapa está bloqueada primeiro\n    if (step.isLocked && !step.isCompleted) {\n      console.log(\"🚫 ETAPA BLOQUEADA - Impedindo ação\");\n      toast({\n        title: \"Etapa Bloqueada\",\n        description:\n          \"Esta etapa só pode ser acessada após uma decisão na 'Autorização pelo Secretário SEAP'\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Se é etapa \"Autorizar via sistema\", arquivar automaticamente quando aprovada\n      if (step.stepName === \"Autorizar via sistema\" && !step.isCompleted) {\n        console.log(\n          \"🔥 StepChecklist - APROVANDO Autorizar via sistema via botão 'Aprovar etapa'\",\n        );\n\n        // Concluir etapa e arquivar processo automaticamente\n        const updateResponse = await apiRequest(\n          \"PATCH\",\n          `/api/processes/${processId}/steps/${step.id}`,\n          {\n            isCompleted: true,\n            observations:\n              \"Autorizado via sistema - Processo arquivado automaticamente\",\n          },\n        );\n\n        console.log(\n          \"🔥 StepChecklist - Update response:\",\n          updateResponse.ok,\n          updateResponse.status,\n        );\n\n        if (updateResponse.ok) {\n          // Arquivar o processo automaticamente\n          console.log(\n            \"🔥 StepChecklist - Tentando arquivar processo ID:\",\n            processId,\n          );\n          const archiveResponse = await apiRequest(\n            \"DELETE\",\n            `/api/processes/${processId}`,\n            {\n              deletionReason:\n                \"Autorizado via sistema - Secretário de Estado da Administração Penitenciária - SEAP\",\n            },\n          );\n\n          console.log(\n            \"🔥 StepChecklist - Archive response:\",\n            archiveResponse.ok,\n            archiveResponse.status,\n          );\n\n          if (archiveResponse.ok) {\n            queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n            toast({\n              title: \"Processo Autorizado e Arquivado\",\n              description:\n                \"Autorização via sistema concluída. Processo arquivado automaticamente.\",\n              variant: \"default\",\n            });\n\n            // Redirecionar para lista de processos\n            setTimeout(() => {\n              window.location.href = \"/processes\";\n            }, 2000);\n          } else {\n            // Log do erro de arquivamento\n            const errorText = await archiveResponse.text();\n            console.error(\n              \"🔥 StepChecklist - Erro no arquivamento:\",\n              errorText,\n            );\n            toast({\n              title: \"Erro no arquivamento\",\n              description:\n                \"Etapa aprovada mas processo não foi arquivado. Erro: \" +\n                errorText,\n              variant: \"destructive\",\n            });\n          }\n        } else {\n          // Log do erro na atualização da etapa\n          const errorText = await updateResponse.text();\n          console.error(\"🔥 StepChecklist - Erro na atualização:\", errorText);\n          toast({\n            title: \"Erro na aprovação\",\n            description: \"Não foi possível aprovar a etapa. Erro: \" + errorText,\n            variant: \"destructive\",\n          });\n        }\n        return; // Importante: interromper execução aqui\n      }\n\n      // Se é etapa de Autorização pelo Secretário SEAP, notificar parent (ProcessDetail.tsx)\n      if (step.stepName.includes(\"Autorização pelo Secretário SEAP\")) {\n        console.log(\n          \"🔥 StepChecklist - Etapa de Autorização detectada - notificando ProcessDetail\",\n        );\n        if (onAuthorizationStep) {\n          onAuthorizationStep(step);\n        } else {\n          // Fallback: tentar abrir modal local se callback não existir\n          setAuthorizationModalOpen(true);\n          setActiveStep(step);\n          setAuthorizationDecision(\"\");\n        }\n        return; // NÃO CONTINUA - Etapa só será concluída após escolher opção no modal\n      }\n\n      // Se é etapa \"SOLICITAR DISPONIBILIZAÇÃO DE ORÇAMENTO\", criar próxima etapa baseada na decisão da autorização\n      if (\n        step.stepName === \"SOLICITAR DISPONIBILIZAÇÃO DE ORÇAMENTO\" &&\n        !step.isCompleted\n      ) {\n        // Buscar a etapa de autorização anterior para saber qual foi a decisão\n        const authStep = steps?.find(\n          (s) =>\n            s.stepName === \"Autorização pelo Secretário SEAP\" && s.isCompleted,\n        );\n\n        if (authStep?.observations) {\n          let nextStepName = \"\";\n          let nextDepartmentId = step.departmentId; // Por padrão, mesmo departamento\n\n          if (\n            authStep.observations.includes(\n              \"INDISPONIBILIDADE ORÇAMENTÁRIA TOTAL OU PARCIAL\",\n            )\n          ) {\n            nextStepName = \"Fluxo Repror\";\n            nextDepartmentId = 4; // Unidade de Orçamento e Finanças\n          }\n\n          // Concluir a etapa atual primeiro\n          const updateResponse = await apiRequest(\n            \"PATCH\",\n            `/api/processes/${processId}/steps/${step.id}`,\n            {\n              isCompleted: true,\n              observations: `Etapa concluída baseada na decisão: ${authStep.observations}`,\n            },\n          );\n\n          if (updateResponse.ok && nextStepName) {\n            // Criar próxima etapa\n            await apiRequest(\"POST\", `/api/processes/${processId}/steps`, {\n              stepName: nextStepName,\n              departmentId: nextDepartmentId,\n              isCompleted: false,\n              observations: `Criada automaticamente após conclusão de SOLICITAR DISPONIBILIZAÇÃO DE ORÇAMENTO`,\n            });\n          }\n\n          queryClient.invalidateQueries({\n            queryKey: [`/api/processes/${processId}/steps`],\n          });\n          toast({\n            title: \"Etapa concluída\",\n            description: nextStepName\n              ? `Próxima etapa: ${nextStepName}`\n              : \"Etapa concluída com sucesso\",\n          });\n          return;\n        }\n      }\n\n      // Se é etapa \"Autorizar via sistema\", verificar se está sendo aprovada ou reprovada\n      if (step.stepName === \"Autorizar via sistema\") {\n        // Se já está completada, não fazer nada\n        if (step.isCompleted) {\n          toast({\n            title: \"Etapa já processada\",\n            description: \"Esta etapa já foi concluída anteriormente\",\n            variant: \"default\",\n          });\n          return;\n        }\n        // Para esta etapa, vamos usar um modal de confirmação para aprovar/reprovar\n        const userDecision = window.confirm(\n          \"Escolha a ação para 'Autorizar via sistema':\\n\\n\" +\n            \"OK = APROVAR (Arquivar processo automaticamente)\\n\" +\n            \"Cancelar = REPROVAR (Voltar para 'Autorizar Emissão de R.O')\",\n        );\n\n        if (userDecision) {\n          // APROVAR: Concluir etapa e arquivar processo\n          console.log(\"🔥 StepChecklist - APROVANDO Autorizar via sistema\");\n          const updateResponse = await apiRequest(\n            \"PATCH\",\n            `/api/processes/${processId}/steps/${step.id}`,\n            {\n              isCompleted: true,\n              observations: \"Aprovado - Processo arquivado automaticamente\",\n            },\n          );\n\n          console.log(\n            \"🔥 StepChecklist - Update response:\",\n            updateResponse.ok,\n            updateResponse.status,\n          );\n\n          if (updateResponse.ok) {\n            // Arquivar o processo automaticamente\n            console.log(\n              \"🔥 StepChecklist - Tentando arquivar processo ID:\",\n              processId,\n            );\n            const archiveResponse = await apiRequest(\n              \"DELETE\",\n              `/api/processes/${processId}`,\n              {\n                deletionReason:\n                  \"Autorizado via sistema - Secretário de Estado da Administração Penitenciária - SEAP\",\n              },\n            );\n\n            console.log(\n              \"🔥 StepChecklist - Archive response:\",\n              archiveResponse.ok,\n              archiveResponse.status,\n            );\n\n            if (archiveResponse.ok) {\n              queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n              toast({\n                title: \"Processo Autorizado e Arquivado\",\n                description:\n                  \"Autorização via sistema concluída. Processo arquivado automaticamente.\",\n                variant: \"default\",\n              });\n\n              // Redirecionar para lista de processos\n              setTimeout(() => {\n                window.location.href = \"/processes\";\n              }, 2000);\n            } else {\n              // Log do erro de arquivamento\n              const errorText = await archiveResponse.text();\n              console.error(\n                \"🔥 StepChecklist - Erro no arquivamento:\",\n                errorText,\n              );\n              toast({\n                title: \"Erro no arquivamento\",\n                description:\n                  \"Etapa aprovada mas processo não foi arquivado. Erro: \" +\n                  errorText,\n                variant: \"destructive\",\n              });\n            }\n          } else {\n            // Log do erro na atualização da etapa\n            const errorText = await updateResponse.text();\n            console.error(\"🔥 StepChecklist - Erro na atualização:\", errorText);\n            toast({\n              title: \"Erro na aprovação\",\n              description:\n                \"Não foi possível aprovar a etapa. Erro: \" + errorText,\n              variant: \"destructive\",\n            });\n          }\n        } else {\n          // REPROVAR: Voltar para etapa anterior e tornar \"Autorizar Emissão de R.O\" visível novamente\n          // 1. Marcar \"Autorizar via sistema\" como invisível/incompleta\n          const hideSystemStep = await apiRequest(\n            \"PATCH\",\n            `/api/processes/${processId}/steps/${step.id}`,\n            {\n              isVisible: false,\n              isCompleted: false,\n              observations: \"Reprovado - Retornando para etapa anterior\",\n            },\n          );\n\n          if (hideSystemStep.ok) {\n            // 2. Buscar e marcar \"Autorizar Emissão de R.O\" como incompleta e visível\n            const stepsResponse = await apiRequest(\n              \"GET\",\n              `/api/processes/${processId}/steps`,\n            );\n            const currentSteps = await stepsResponse.json();\n            const authorizeRoStep = currentSteps.find(\n              (s: any) => s.stepName === \"Autorizar Emissão de R.O\",\n            );\n\n            if (authorizeRoStep) {\n              await apiRequest(\n                \"PATCH\",\n                `/api/processes/${processId}/steps/${authorizeRoStep.id}`,\n                {\n                  isCompleted: false,\n                  isVisible: true,\n                  observations:\n                    \"Retornado da etapa 'Autorizar via sistema' - requer nova autorização\",\n                },\n              );\n            }\n\n            queryClient.invalidateQueries({\n              queryKey: [`/api/processes/${processId}/steps`],\n            });\n            toast({\n              title: \"Autorização Reprovada\",\n              description:\n                \"Processo retornado para a etapa 'Autorizar Emissão de R.O'\",\n              variant: \"default\",\n            });\n          }\n        }\n        return;\n      }\n\n      // Se é etapa \"Fluxo Repror\", arquivar automaticamente quando concluída\n      if (step.stepName === \"Fluxo Repror\" && !step.isCompleted) {\n        // Concluir a etapa\n        const updateResponse = await apiRequest(\n          \"PATCH\",\n          `/api/processes/${processId}/steps/${step.id}`,\n          {\n            isCompleted: true,\n            observations:\n              \"Fluxo Repror concluído - processo será arquivado automaticamente\",\n          },\n        );\n\n        if (updateResponse.ok) {\n          // Arquivar o processo automaticamente\n          const archiveResponse = await apiRequest(\n            \"DELETE\",\n            `/api/processes/${processId}`,\n            {\n              deletionReason:\n                \"Processo arquivado automaticamente após conclusão do Fluxo Repror (Indisponibilidade Orçamentária)\",\n            },\n          );\n\n          if (archiveResponse.ok) {\n            queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n            toast({\n              title: \"Processo arquivado\",\n              description:\n                \"Fluxo Repror concluído. Processo arquivado automaticamente por indisponibilidade orçamentária.\",\n              variant: \"default\",\n            });\n\n            // Redirecionar para lista de processos\n            setTimeout(() => {\n              window.location.href = \"/processes\";\n            }, 2000);\n          }\n        }\n        return;\n      }\n\n      // Se a etapa não existe, criar primeiro\n      if (!step.id) {\n        const createResponse = await apiRequest(\n          \"POST\",\n          `/api/processes/${processId}/steps`,\n          {\n            stepName: step.stepName,\n            departmentId: step.departmentId,\n            isCompleted: true,\n            observations: null,\n            isLocked: step.isLocked || false,\n          },\n        );\n\n        if (createResponse.ok) {\n          // Refetch steps after creating\n          queryClient.invalidateQueries({\n            queryKey: [`/api/processes/${processId}/steps`],\n          });\n\n          toast({\n            title: \"Etapa criada e concluída\",\n            description: `Etapa \"${step.stepName}\" foi criada e marcada como concluída`,\n          });\n        }\n      } else {\n        // Atualizar etapa existente\n        await apiRequest(\n          \"PATCH\",\n          `/api/processes/${processId}/steps/${step.id}`,\n          {\n            isCompleted: !step.isCompleted,\n            observations: step.observations,\n          },\n        );\n\n        // Refetch steps after updating\n        queryClient.invalidateQueries({\n          queryKey: [`/api/processes/${processId}/steps`],\n        });\n\n        toast({\n          title: step.isCompleted ? \"Etapa desmarcada\" : \"Etapa concluída\",\n          description: `Etapa \"${step.stepName}\" ${step.isCompleted ? \"desmarcada\" : \"marcada como concluída\"}`,\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível atualizar o status da etapa\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const saveObservation = async () => {\n    if (!activeStep) return;\n\n    try {\n      await apiRequest(\n        \"PATCH\",\n        `/api/processes/${processId}/steps/${activeStep.id}`,\n        {\n          observations: observation,\n        },\n      );\n\n      // Refetch steps after updating\n      queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${processId}/steps`],\n      });\n\n      toast({\n        title: \"Observações salvas\",\n        description: \"As observações foram salvas com sucesso\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível salvar as observações\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Função para completar a autorização com a decisão escolhida\n  const handleAuthorizationComplete = async () => {\n    if (!activeStep || !authorizationDecision) return;\n\n    try {\n      // Completar a etapa com a decisão de autorização como observação\n      if (!activeStep.id) {\n        // Criar etapa se não existe\n        await apiRequest(\"POST\", `/api/processes/${processId}/steps`, {\n          stepName: activeStep.stepName,\n          departmentId: activeStep.departmentId,\n          isCompleted: true,\n          observations: `AUTORIZAÇÃO: ${authorizationDecision}`,\n        });\n      } else {\n        // Atualizar etapa existente\n        await apiRequest(\n          \"PATCH\",\n          `/api/processes/${processId}/steps/${activeStep.id}`,\n          {\n            isCompleted: true,\n            observations: `AUTORIZAÇÃO: ${authorizationDecision}`,\n          },\n        );\n      }\n\n      // Se a decisão for \"DISPONIBILIDADE ORÇAMENTÁRIA\", criar a etapa \"Autorizar Emissão de R.O\"\n      if (authorizationDecision === \"DISPONIBILIDADE ORÇAMENTÁRIA\") {\n        console.log(\n          \"🔥🔥🔥 StepChecklist - Criando etapa 'Autorizar Emissão de R.O' para disponibilidade orçamentária\",\n        );\n\n        try {\n          // Verificar se a etapa já existe\n          const stepsResponse = await apiRequest(\n            \"GET\",\n            `/api/processes/${processId}/steps`,\n          );\n          const currentSteps = await stepsResponse.json();\n          const authRoStepExists = currentSteps.find(\n            (s: any) => s.stepName === \"Autorizar Emissão de R.O\",\n          );\n\n          if (!authRoStepExists) {\n            // Criar etapa \"Autorizar Emissão de R.O\" no setor SEAP (ID 5)\n            console.log(\n              \"🔥🔥🔥 StepChecklist - Criando etapa no departamento SEAP (ID: 5)\",\n            );\n            const authRoResponse = await apiRequest(\n              \"POST\",\n              `/api/processes/${processId}/steps`,\n              {\n                stepName: \"Autorizar Emissão de R.O\",\n                departmentId: 5, // SEAP - Secretário de Estado da Administração Penitenciária\n                phase: \"Execução\",\n              },\n            );\n\n            if (authRoResponse.ok) {\n              console.log(\n                \"✅✅✅ StepChecklist - Etapa 'Autorizar Emissão de R.O' criada com sucesso\",\n              );\n              const createdStep = await authRoResponse.json();\n              console.log(\n                \"🔥 StepChecklist - Dados da etapa criada:\",\n                createdStep,\n              );\n            } else {\n              console.error(\n                \"❌❌❌ StepChecklist - Erro ao criar etapa 'Autorizar Emissão de R.O'\",\n              );\n              const errorData = await authRoResponse.text();\n              console.error(\"🔥 StepChecklist - Erro detalhes:\", errorData);\n            }\n          } else {\n            console.log(\n              \"✅ StepChecklist - Etapa 'Autorizar Emissão de R.O' já existe\",\n            );\n          }\n        } catch (etapasError) {\n          console.error(\n            \"❌ StepChecklist - Erro ao verificar/criar etapa:\",\n            etapasError,\n          );\n        }\n      }\n\n      // Liberar etapa específica baseada na decisão\n      let stepToUnlock = \"\";\n      if (\n        authorizationDecision ===\n        \"INDISPONIBILIDADE ORÇAMENTÁRIA TOTAL OU PARCIAL\"\n      ) {\n        stepToUnlock = \"Solicitar disponibilização de orçamento\";\n      } else if (authorizationDecision === \"DISPONIBILIDADE ORÇAMENTÁRIA\") {\n        stepToUnlock = \"Autorizar emissão de R.O.\";\n      }\n\n      // Liberar a etapa correspondente\n      if (stepToUnlock) {\n        const stepToUnlockObj = steps?.find(\n          (s) => s.stepName === stepToUnlock && s.departmentId === 5,\n        );\n        if (stepToUnlockObj) {\n          await apiRequest(\n            \"PATCH\",\n            `/api/processes/${processId}/steps/${stepToUnlockObj.id}`,\n            {\n              observations: `Etapa liberada pela decisão: ${authorizationDecision}`,\n              isLocked: false, // Desbloquear a etapa\n            },\n          );\n        }\n      }\n\n      // Refetch steps after updating\n      queryClient.invalidateQueries({\n        queryKey: [`/api/processes/${processId}/steps`],\n      });\n\n      toast({\n        title: \"Etapa de Autorização concluída\",\n        description: `Decisão: ${authorizationDecision}`,\n      });\n\n      // Limpar estados e fechar modal\n      setAuthorizationModalOpen(false);\n      setAuthorizationDecision(\"\");\n      setActiveStep(null);\n    } catch (error) {\n      toast({\n        title: \"Erro\",\n        description: \"Não foi possível completar a autorização\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Checklist de Etapas</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p>Carregando etapas...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error || !steps) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Checklist de Etapas</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-red-500\">Erro ao carregar etapas</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Agrupar etapas filtradas por fase\n  const stepsByPhase =\n    filteredSteps?.reduce(\n      (acc, step) => {\n        // Extrair fase do nome da etapa ou usar uma fase padrão\n        let phase = \"Execução\";\n        if (\n          step.stepName.includes(\"DFD\") ||\n          step.stepName.includes(\"ETP\") ||\n          step.stepName.includes(\"Mapa de Risco\") ||\n          step.stepName.includes(\"Termo de Referência\") ||\n          step.stepName.includes(\"Ordenador\")\n        ) {\n          phase = \"Iniciação\";\n        } else if (\n          step.stepName.includes(\"Processo no Órgão\") ||\n          step.stepName.includes(\"Pesquisa\") ||\n          step.stepName.includes(\"Orçament\") ||\n          step.stepName.includes(\"Reserva\")\n        ) {\n          phase = \"Preparação\";\n        } else if (\n          step.stepName.includes(\"Elaboração\") ||\n          step.stepName.includes(\"Contrato\") ||\n          step.stepName.includes(\"Assinatura\") ||\n          step.stepName.includes(\"Adjudica\") ||\n          step.stepName.includes(\"Homologa\")\n        ) {\n          phase = \"Finalização\";\n        }\n\n        if (!acc[phase]) acc[phase] = [];\n        acc[phase].push(step);\n        return acc;\n      },\n      {} as Record<string, typeof filteredSteps>,\n    ) || {};\n\n  const phaseOrder = [\"Iniciação\", \"Preparação\", \"Execução\", \"Finalização\"];\n  const phaseColors = {\n    Iniciação: \"bg-blue-50 border-blue-200\",\n    Preparação: \"bg-yellow-50 border-yellow-200\",\n    Execução: \"bg-green-50 border-green-200\",\n    Finalização: \"bg-purple-50 border-purple-200\",\n  };\n\n  // Debug do estado do modal\n  console.log(\n    \"🔥 StepChecklist renderizando - authorizationModalOpen:\",\n    authorizationModalOpen,\n  );\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            Checklist - Fluxograma Pregão Eletrônico\n            <span className=\"text-sm font-normal text-gray-500\">SEAP/PB</span>\n          </CardTitle>\n          <p className=\"text-sm text-gray-600\">\n            Siga as etapas conforme o fluxograma oficial da Lei nº 14.133/2021\n          </p>\n        </CardHeader>\n        <CardContent>\n          {steps.length === 0 ? (\n            <p>Nenhuma etapa cadastrada para este processo</p>\n          ) : (\n            <div className=\"space-y-6\">\n              {/* Resumo de etapas concluídas */}\n              {(() => {\n                const currentDeptId = departmentMap[userDepartment];\n                const allSectorSteps =\n                  steps?.filter(\n                    (step) =>\n                      step.departmentId === currentDeptId &&\n                      step.stepName !== \"Transferência de Setor\",\n                  ) || [];\n                const completedSteps = allSectorSteps.filter(\n                  (step) => step.isCompleted,\n                );\n\n                if (completedSteps.length > 0) {\n                  return (\n                    <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium text-green-800\">\n                          ✓ {completedSteps.length} de {allSectorSteps.length}{\" \"}\n                          etapas concluídas\n                        </span>\n                        <span className=\"text-xs text-green-600\">\n                          (etapas concluídas ocultas)\n                        </span>\n                      </div>\n                    </div>\n                  );\n                }\n                return null;\n              })()}\n\n              {phaseOrder.map((phase) => {\n                const phaseSteps = stepsByPhase[phase] || [];\n                if (phaseSteps.length === 0) return null;\n\n                return (\n                  <div\n                    key={phase}\n                    className={`p-4 rounded-lg border-2 ${phaseColors[phase as keyof typeof phaseColors]}`}\n                  >\n                    <h3 className=\"font-semibold text-sm mb-3 uppercase tracking-wide\">\n                      {phase}\n                    </h3>\n                    <div className=\"space-y-3\">\n                      {phaseSteps.map((step) => (\n                        <div\n                          key={step.id}\n                          className={`flex items-start space-x-3 p-3 rounded-md border ${\n                            step.isLocked && !step.isCompleted\n                              ? \"bg-gray-200 border-gray-400 opacity-40\"\n                              : activeStep && activeStep.id === step.id\n                                ? \"bg-white border-blue-500 shadow-md\"\n                                : \"bg-white border-gray-200\"\n                          } ${step.isLocked && !step.isCompleted ? \"cursor-not-allowed\" : \"cursor-pointer hover:shadow-sm\"} transition-all`}\n                          onClick={() => {\n                            if (step.isLocked && !step.isCompleted) {\n                              toast({\n                                title: \"❌ Etapa Bloqueada\",\n                                description:\n                                  \"Esta etapa só pode ser acessada após uma decisão na 'Autorização pelo Secretário SEAP'\",\n                                variant: \"destructive\",\n                              });\n                              return;\n                            }\n                            handleStepClick(step);\n                          }}\n                        >\n                          <Checkbox\n                            id={`step-${step.id}`}\n                            checked={step.isCompleted || false}\n                            disabled={\n                              (step.isLocked || false) && !step.isCompleted\n                            }\n                            onCheckedChange={async (checked) => {\n                              // Primeira validação: bloquear no frontend\n                              if (step.isLocked && !step.isCompleted) {\n                                toast({\n                                  title: \"❌ Etapa Bloqueada\",\n                                  description:\n                                    \"Esta etapa só pode ser acessada após uma decisão na 'Autorização pelo Secretário SEAP'\",\n                                  variant: \"destructive\",\n                                });\n                                return;\n                              }\n\n                              // Especial para \"Autorizar via sistema\" - arquivar automaticamente\n                              if (\n                                step.stepName === \"Autorizar via sistema\" &&\n                                !step.isCompleted\n                              ) {\n                                try {\n                                  console.log(\n                                    \"🔥 Arquivando processo ao aprovar 'Autorizar via sistema' (checkbox)\",\n                                  );\n\n                                  // Concluir etapa primeiro\n                                  const updateResponse = await apiRequest(\n                                    \"PATCH\",\n                                    `/api/processes/${processId}/steps/${step.id}`,\n                                    {\n                                      isCompleted: true,\n                                      observations:\n                                        \"Autorizado via sistema - Processo arquivado automaticamente\",\n                                    },\n                                  );\n\n                                  if (updateResponse.ok) {\n                                    // Arquivar processo automaticamente\n                                    const archiveResponse = await apiRequest(\n                                      \"DELETE\",\n                                      `/api/processes/${processId}`,\n                                      {\n                                        deletionReason:\n                                          \"Autorizado via sistema - Secretário de Estado da Administração Penitenciária - SEAP\",\n                                      },\n                                    );\n\n                                    if (archiveResponse.ok) {\n                                      queryClient.invalidateQueries({\n                                        queryKey: [\"/api/processes\"],\n                                      });\n                                      toast({\n                                        title:\n                                          \"Processo Autorizado e Arquivado\",\n                                        description:\n                                          \"Autorização via sistema concluída. Processo arquivado automaticamente.\",\n                                        variant: \"default\",\n                                      });\n\n                                      // Redirecionar para lista de processos\n                                      setTimeout(() => {\n                                        window.location.href = \"/processes\";\n                                      }, 2000);\n                                    } else {\n                                      const errorText =\n                                        await archiveResponse.text();\n                                      toast({\n                                        title: \"Erro no arquivamento\",\n                                        description:\n                                          \"Etapa aprovada mas processo não foi arquivado. Erro: \" +\n                                          errorText,\n                                        variant: \"destructive\",\n                                      });\n                                    }\n                                  }\n                                } catch (error) {\n                                  toast({\n                                    title: \"Erro\",\n                                    description:\n                                      \"Erro ao processar autorização via sistema\",\n                                    variant: \"destructive\",\n                                  });\n                                }\n                              } else {\n                                // Comportamento padrão para outras etapas\n                                handleToggleStep(step);\n                              }\n                            }}\n                            onClick={(e) => e.stopPropagation()}\n                          />\n                          <div className=\"grid gap-1.5 leading-none flex-1\">\n                            <Label\n                              htmlFor={`step-${step.id}`}\n                              className={`text-sm font-medium ${\n                                step.isLocked && !step.isCompleted\n                                  ? \"text-gray-400\"\n                                  : step.isCompleted\n                                    ? \"line-through text-gray-500\"\n                                    : step.observations &&\n                                        step.observations.startsWith(\n                                          \"REJEITADA:\",\n                                        )\n                                      ? \"text-red-600\"\n                                      : \"text-gray-800\"\n                              }`}\n                            >\n                              {step.stepName}\n                              {step.isLocked && !step.isCompleted && (\n                                <span className=\"ml-2 text-xs bg-red-100 text-red-700 px-2 py-1 rounded font-semibold\">\n                                  🔒 BLOQUEADA\n                                </span>\n                              )}\n                            </Label>\n                            <div className=\"flex items-center gap-3 text-xs text-gray-500\">\n                              <span>\n                                Setor:{\" \"}\n                                {departments && Array.isArray(departments)\n                                  ? departments.find(\n                                      (d: any) => d.id === step.departmentId,\n                                    )?.name || `Setor ${step.departmentId}`\n                                  : `Setor ${step.departmentId}`}\n                              </span>\n                              {step.observations &&\n                                step.observations.includes(\"Prazo:\") && (\n                                  <span className=\"text-orange-600 font-medium\">\n                                    {step.observations}\n                                  </span>\n                                )}\n                            </div>\n                            {step.completedAt && (\n                              <p className=\"text-xs text-green-600\">\n                                ✓ Concluído em:{\" \"}\n                                {new Date(step.completedAt).toLocaleDateString(\n                                  \"pt-BR\",\n                                )}\n                              </p>\n                            )}\n                            {step.observations &&\n                              step.observations.startsWith(\"REJEITADA:\") && (\n                                <p className=\"text-xs text-red-600 font-medium\">\n                                  ✗ Rejeitada:{\" \"}\n                                  {step.observations.replace(\"REJEITADA: \", \"\")}\n                                </p>\n                              )}\n                          </div>\n                          <div className=\"flex flex-row gap-2 items-center\">\n                            {/* Botão de Aprovar */}\n                            <Button\n                              size=\"sm\"\n                              variant={\n                                step.isCompleted ? \"secondary\" : \"default\"\n                              }\n                              onClick={async (e) => {\n                                e.stopPropagation();\n\n                                // Especial para \"Autorizar via sistema\" - arquivar automaticamente\n                                if (\n                                  step.stepName === \"Autorizar via sistema\" &&\n                                  !step.isCompleted\n                                ) {\n                                  try {\n                                    console.log(\n                                      \"🔥 Arquivando processo ao aprovar 'Autorizar via sistema'\",\n                                    );\n\n                                    // Concluir etapa primeiro\n                                    const updateResponse = await apiRequest(\n                                      \"PATCH\",\n                                      `/api/processes/${processId}/steps/${step.id}`,\n                                      {\n                                        isCompleted: true,\n                                        observations:\n                                          \"Autorizado via sistema - Processo arquivado automaticamente\",\n                                      },\n                                    );\n\n                                    if (updateResponse.ok) {\n                                      // Arquivar processo automaticamente\n                                      const archiveResponse = await apiRequest(\n                                        \"DELETE\",\n                                        `/api/processes/${processId}`,\n                                        {\n                                          deletionReason:\n                                            \"Autorizado via sistema - Secretário de Estado da Administração Penitenciária - SEAP\",\n                                        },\n                                      );\n\n                                      if (archiveResponse.ok) {\n                                        queryClient.invalidateQueries({\n                                          queryKey: [\"/api/processes\"],\n                                        });\n                                        toast({\n                                          title:\n                                            \"Processo Autorizado e Arquivado\",\n                                          description:\n                                            \"Autorização via sistema concluída. Processo arquivado automaticamente.\",\n                                          variant: \"default\",\n                                        });\n\n                                        // Redirecionar para lista de processos\n                                        setTimeout(() => {\n                                          window.location.href = \"/processes\";\n                                        }, 2000);\n                                      } else {\n                                        const errorText =\n                                          await archiveResponse.text();\n                                        toast({\n                                          title: \"Erro no arquivamento\",\n                                          description:\n                                            \"Etapa aprovada mas processo não foi arquivado. Erro: \" +\n                                            errorText,\n                                          variant: \"destructive\",\n                                        });\n                                      }\n                                    }\n                                  } catch (error) {\n                                    toast({\n                                      title: \"Erro\",\n                                      description:\n                                        \"Erro ao processar autorização via sistema\",\n                                      variant: \"destructive\",\n                                    });\n                                  }\n                                } else {\n                                  // Comportamento padrão para outras etapas\n                                  handleToggleStep(step);\n                                }\n                              }}\n                              className=\"h-8 w-8 p-0\"\n                              title=\"Aprovar etapa\"\n                            >\n                              <Check className=\"h-4 w-4\" />\n                            </Button>\n\n                            {/* Botão de Rejeitar */}\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                if (onStepReject) {\n                                  onStepReject(step);\n                                } else {\n                                  toast({\n                                    title: \"Erro\",\n                                    description:\n                                      \"Função de rejeição não configurada\",\n                                    variant: \"destructive\",\n                                  });\n                                }\n                              }}\n                              className=\"h-8 w-8 p-0\"\n                              title=\"Rejeitar etapa\"\n                            >\n                              <XCircle className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {activeStep && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Observações</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <p className=\"text-sm font-medium mb-2\">\n                  Etapa:{\" \"}\n                  {activeStep.stepName === \"Autorização pelo Secretário SEAP\"\n                    ? \"Autorização\"\n                    : activeStep.stepName}\n                </p>\n                <Textarea\n                  value={observation}\n                  onChange={(e) => setObservation(e.target.value)}\n                  placeholder=\"Adicione observações sobre esta etapa\"\n                  rows={5}\n                />\n              </div>\n              <Button onClick={saveObservation}>Salvar Observações</Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default StepChecklist;\n","size_bytes":63725},"client/src/components/dashboard/DashboardFilters.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { User, BiddingModality } from \"@shared/schema\";\n\ninterface DashboardFiltersProps {\n  onApplyFilters: (filters: {\n    pbdoc?: string;\n    centralcompras?: string;\n    modality?: string;\n    responsible?: string;\n    deadline?: string;\n  }) => void;\n}\n\nconst DashboardFilters = ({ onApplyFilters }: DashboardFiltersProps) => {\n  const [pbdoc, setPbdoc] = useState(\"\");\n  const [centralcompras, setCentralcompras] = useState(\"\");\n  const [modality, setModality] = useState(\"\");\n  const [responsible, setResponsible] = useState(\"\");\n  const [deadline, setDeadline] = useState(\"\");\n\n  // Get users for responsible selector\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Get modalities for modality selector\n  const { data: modalities } = useQuery<BiddingModality[]>({\n    queryKey: [\"/api/modalities\"],\n  });\n\n  const handleApplyFilters = () => {\n    onApplyFilters({\n      pbdoc: pbdoc || undefined,\n      centralcompras: centralcompras || undefined,\n      modality: modality === \"all\" ? undefined : modality || undefined,\n      responsible: responsible === \"all\" ? undefined : responsible || undefined,\n      deadline: deadline === \"all\" ? undefined : deadline || undefined,\n    });\n  };\n\n  const handleClearFilters = () => {\n    setPbdoc(\"\");\n    setCentralcompras(\"\");\n    setModality(\"\");\n    setResponsible(\"\");\n    setDeadline(\"\");\n    onApplyFilters({});\n  };\n\n  return (\n    <Card>\n      <CardContent className=\"p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <div>\n            <label\n              htmlFor=\"filter-pbdoc\"\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              PBDOC\n            </label>\n            <Input\n              id=\"filter-pbdoc\"\n              value={pbdoc}\n              onChange={(e) => setPbdoc(e.target.value)}\n              placeholder=\"Número do PBDOC\"\n              className=\"w-25%\"\n            />\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"filter-central-compras\"\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              Central de Compras\n            </label>\n            <Input\n              id=\"filter-central-compras\"\n              value={centralcompras}\n              onChange={(e) => setCentralcompras(e.target.value)}\n              placeholder=\"Número da Central de Compras\"\n              className=\"w-25%\"\n            />\n          </div>\n\n          <div className=\"w-[100%]\">\n            <label\n              htmlFor=\"filter-modalidade\"\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              Modalidade\n            </label>\n            <Select value={modality} onValueChange={setModality}>\n              <SelectTrigger id=\"filter-modalidade\">\n                <SelectValue placeholder=\"Todas\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todas</SelectItem>\n                {modalities?.map((modalityItem) => (\n                  <SelectItem\n                    key={modalityItem.id}\n                    value={modalityItem.id.toString()}\n                  >\n                    {modalityItem.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"w-[100%]\">\n            <label\n              htmlFor=\"filter-responsavel\"\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              Responsável\n            </label>\n            <Select value={responsible} onValueChange={setResponsible}>\n              <SelectTrigger id=\"filter-responsavel\">\n                <SelectValue placeholder=\"Todos\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos</SelectItem>\n                {users?.map((user) => (\n                  <SelectItem key={user.id} value={user.id.toString()}>\n                    {user.fullName}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"w-[100%]\">\n            <label\n              htmlFor=\"filter-prazo\"\n              className=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              Prazo\n            </label>\n            <Select value={deadline} onValueChange={setDeadline}>\n              <SelectTrigger id=\"filter-prazo\">\n                <SelectValue placeholder=\"Todos\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos</SelectItem>\n                <SelectItem value=\"urgent\">Urgentes (até 5 dias)</SelectItem>\n                <SelectItem value=\"soon\">Próximos (até 10 dias)</SelectItem>\n                <SelectItem value=\"future\">\n                  Futuros (mais de 10 dias)\n                </SelectItem>\n                <SelectItem value=\"expired\">Vencidos</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"mt-4 flex items-center justify-center\">\n          <Button\n            variant=\"outline\"\n            onClick={handleClearFilters}\n            className=\"mr-2\"\n          >\n            Limpar Filtros\n          </Button>\n          <Button onClick={handleApplyFilters}>Aplicar Filtros</Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default DashboardFilters;\n","size_bytes":5859},"client/src/components/dashboard/DepartmentRanking.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trophy, TrendingUp, Clock, CheckCircle } from \"lucide-react\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\ninterface DepartmentRankingData {\n  departmentId: number;\n  departmentName: string;\n  total: number;\n  inProgress: number;\n  overdue: number;\n  completed: number;\n}\n\ninterface DepartmentRankingProps {\n  filters: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  };\n}\n\nexport function DepartmentRanking({ filters }: DepartmentRankingProps) {\n  console.log('DepartmentRanking - Filtros aplicados:', filters);\n  \n  // Construir query params\n  const queryParams = new URLSearchParams();\n  Object.entries(filters).forEach(([key, value]) => {\n    if (value !== undefined && value !== null && value !== '') {\n      queryParams.append(key, value.toString());\n    }\n  });\n  const urlParams = queryParams.toString();\n  console.log('DepartmentRanking - URL params:', urlParams);\n\n  const { data: rankingData = [] } = useQuery<DepartmentRankingData[]>({\n    queryKey: ['/api/analytics/department-ranking', urlParams],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const getRankPosition = (index: number) => {\n    const positions = ['🥇', '🥈', '🥉'];\n    return positions[index] || `${index + 1}º`;\n  };\n\n  const getPercentage = (value: number, total: number) => {\n    return total > 0 ? Math.round((value / total) * 100) : 0;\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-purple-600\">\n          <Trophy className=\"h-5 w-5\" />\n          Ranking de Departamentos\n        </CardTitle>\n        <CardDescription>\n          Volume de processos por setor ordenado por quantidade total\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {rankingData.length === 0 ? (\n          <p className=\"text-center text-gray-500 py-8\">\n            Nenhum dado disponível para os filtros aplicados\n          </p>\n        ) : (\n          rankingData.slice(0, 10).map((dept, index) => (\n            <div\n              key={dept.departmentId}\n              className=\"p-4 border rounded-lg hover:bg-gray-50 transition-colors\"\n            >\n              <div className=\"flex items-start gap-3 mb-3\">\n                <div className=\"text-2xl font-bold text-gray-600 min-w-[3rem] flex-shrink-0\">\n                  {getRankPosition(index)}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <h3 className=\"font-semibold text-gray-900 truncate\">\n                    {dept.departmentName}\n                  </h3>\n                </div>\n              </div>\n              \n              <div className=\"flex flex-wrap gap-2 ml-[3.75rem]\">\n                <Badge variant=\"outline\" className=\"flex items-center gap-1 flex-shrink-0\">\n                  <TrendingUp className=\"h-3 w-3\" />\n                  {dept.total} total\n                </Badge>\n                {dept.inProgress > 0 && (\n                  <Badge variant=\"secondary\" className=\"flex items-center gap-1 bg-yellow-100 text-yellow-700 flex-shrink-0\">\n                    <Clock className=\"h-3 w-3\" />\n                    {dept.inProgress} em andamento\n                  </Badge>\n                )}\n                {dept.overdue > 0 && (\n                  <Badge variant=\"destructive\" className=\"flex items-center gap-1 flex-shrink-0\">\n                    <Clock className=\"h-3 w-3\" />\n                    {dept.overdue} atrasados\n                  </Badge>\n                )}\n                {dept.completed > 0 && (\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1 bg-green-100 text-green-700 flex-shrink-0\">\n                    <CheckCircle className=\"h-3 w-3\" />\n                    {dept.completed} concluídos\n                  </Badge>\n                )}\n              </div>\n            </div>\n          ))\n        )}\n        \n        {rankingData.length > 10 && (\n          <div className=\"text-center pt-4 border-t\">\n            <p className=\"text-sm text-gray-500\">\n              Mostrando top 10 de {rankingData.length} departamentos\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4438},"client/src/components/dashboard/MonthlyGoalSettings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Settings } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface MonthlyGoalSettingsProps {\n  isAdmin: boolean;\n}\n\nconst MonthlyGoalSettings = ({ isAdmin }: MonthlyGoalSettingsProps) => {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [open, setOpen] = useState(false);\n  const [monthlyGoal, setMonthlyGoal] = useState<number>(200);\n  const [inputValue, setInputValue] = useState<string>(\"200\");\n\n  // Obter a meta mensal do localStorage ou da API\n  const { data } = useQuery({\n    queryKey: ['/api/settings/monthly-goal'],\n    queryFn: async () => {\n      // Primeiro tenta buscar da API\n      try {\n        const response = await fetch('/api/settings/monthly-goal');\n        if (response.ok) {\n          const data = await response.json();\n          return data.value;\n        }\n      } catch (error) {\n        console.error(\"Erro ao buscar meta mensal da API:\", error);\n      }\n      \n      // Como fallback, usa o localStorage\n      const storedGoal = localStorage.getItem('monthlyGoal');\n      return storedGoal ? parseInt(storedGoal) : 200;\n    }\n  });\n  \n  // Atualizar estados quando os dados chegarem\n  useEffect(() => {\n    if (data) {\n      setMonthlyGoal(data);\n      setInputValue(data.toString());\n    }\n  }, [data]);\n\n  // Atualizar a meta mensal\n  const updateGoalMutation = useMutation({\n    mutationFn: async (newGoal: number) => {\n      try {\n        // Tentar atualizar via API\n        const response = await apiRequest('POST', '/api/settings/monthly-goal', { value: newGoal });\n        return newGoal;\n      } catch (error) {\n        console.error(\"Erro ao atualizar meta via API:\", error);\n        // Como fallback, salva no localStorage\n        localStorage.setItem('monthlyGoal', newGoal.toString());\n        return newGoal;\n      }\n    },\n    onSuccess: (data) => {\n      setMonthlyGoal(data);\n      queryClient.invalidateQueries({ queryKey: ['/api/settings/monthly-goal'] });\n      toast({\n        title: \"Meta atualizada\",\n        description: `A meta mensal foi atualizada para ${data} processos.`,\n      });\n      setOpen(false);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erro ao atualizar meta\",\n        description: \"Ocorreu um erro ao atualizar a meta mensal.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    const newGoal = parseInt(inputValue);\n    if (isNaN(newGoal) || newGoal <= 0) {\n      toast({\n        title: \"Valor inválido\",\n        description: \"A meta deve ser um número positivo.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateGoalMutation.mutate(newGoal);\n  };\n\n  if (!isAdmin) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"outline\" \n          size=\"sm\" \n          className=\"flex items-center gap-1\"\n        >\n          <Settings className=\"h-4 w-4\" />\n          <span>Meta Mensal</span>\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Configurar Meta Mensal</DialogTitle>\n          <DialogDescription>\n            Defina a meta mensal de processos para o departamento.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"grid gap-4 py-4\">\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"monthlyGoal\">Meta de Processos</Label>\n            <Input\n              id=\"monthlyGoal\"\n              type=\"number\"\n              min=\"1\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n            />\n          </div>\n        </div>\n        \n        <DialogFooter>\n          <Button onClick={() => setOpen(false)} variant=\"outline\">Cancelar</Button>\n          <Button onClick={handleSave} disabled={updateGoalMutation.isPending}>\n            {updateGoalMutation.isPending ? \"Salvando...\" : \"Salvar\"}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default MonthlyGoalSettings;","size_bytes":4626},"client/src/components/dashboard/MonthlyProcessesChart.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { getQueryFn } from \"@/lib/queryClient\";\nimport { useMemo } from \"react\";\nimport { Process } from \"@shared/schema\";\n\ninterface MonthlyData {\n  month: number;\n  count: number;\n}\n\ninterface FilterState {\n  pbdoc?: string;\n  modality?: string;\n  responsible?: string;\n}\n\ninterface MonthlyProcessesChartProps {\n  filters?: FilterState;\n}\n\nconst MonthlyProcessesChart = ({ filters = {} }: MonthlyProcessesChartProps) => {\n  // Obter todos os processos\n  const { data: processos, isLoading: loadingProcessos, error: processosError } = useQuery<Process[]>({\n    queryKey: ['/api/processes'],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n  \n  // Calcular dados por mês aplicando filtros no frontend\n  const { data, isLoading, error } = useMemo(() => {\n    if (loadingProcessos) return { data: undefined, isLoading: true, error: undefined };\n    if (processosError) return { data: undefined, isLoading: false, error: processosError };\n    if (!processos) return { data: undefined, isLoading: false, error: undefined };\n    \n    // Filtrar processos\n    let processosFiltrados = [...processos];\n    \n    if (filters?.pbdoc) {\n      processosFiltrados = processosFiltrados.filter(p => \n        p.pbdocNumber.toLowerCase().includes(filters.pbdoc!.toLowerCase())\n      );\n    }\n    \n    if (filters?.modality) {\n      const modalityId = parseInt(filters.modality);\n      processosFiltrados = processosFiltrados.filter(p => p.modalityId === modalityId);\n    }\n    \n    if (filters?.responsible) {\n      const responsibleId = parseInt(filters.responsible);\n      console.log(`MonthlyChart - Filtrando responsibleId=${responsibleId}, processos antes: ${processosFiltrados.length}`);\n      processosFiltrados = processosFiltrados.filter(p => {\n        console.log(`Processo ${p.id}: responsibleId=${p.responsibleId} === ${responsibleId} => ${p.responsibleId === responsibleId}`);\n        return p.responsibleId === responsibleId;\n      });\n      console.log(`MonthlyChart - Após filtro: ${processosFiltrados.length} processos`);\n    }\n    \n    // Agrupar por mês\n    const processosPorMes = new Map<number, number>();\n    for (let i = 0; i < 12; i++) {\n      processosPorMes.set(i, 0);\n    }\n    \n    processosFiltrados.forEach(processo => {\n      const mes = new Date(processo.createdAt).getMonth();\n      processosPorMes.set(mes, (processosPorMes.get(mes) || 0) + 1);\n    });\n    \n    const monthlyData: MonthlyData[] = Array.from(processosPorMes.entries()).map(([month, count]) => ({\n      month,\n      count\n    }));\n    \n    return { data: monthlyData, isLoading: false, error: undefined };\n  }, [processos, loadingProcessos, processosError, filters]);\n  \n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-4\">\n          <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Processos por Mês</h2>\n          <div className=\"p-4 h-64 flex items-center justify-center\">\n            <p>Carregando...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  if (error || !data) {\n    return (\n      <Card>\n        <CardContent className=\"p-4\">\n          <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Processos por Mês</h2>\n          <div className=\"p-4 h-64 flex items-center justify-center\">\n            <p className=\"text-red-500\">Erro ao carregar dados</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  // Map month numbers to names\n  const monthNames = [\"Jan\", \"Fev\", \"Mar\", \"Abr\", \"Mai\", \"Jun\", \"Jul\", \"Ago\", \"Set\", \"Out\", \"Nov\", \"Dez\"];\n  \n  // Prepare data for chart\n  const chartData = data.map(item => ({\n    month: monthNames[item.month],\n    count: item.count\n  }));\n  \n  return (\n    <Card>\n      <CardContent className=\"p-4\">\n        <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Processos por Mês</h2>\n        <div className=\"p-4 h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={chartData} margin={{ top: 10, right: 10, left: 10, bottom: 10 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n              <XAxis dataKey=\"month\" axisLine={false} tickLine={false} />\n              <YAxis axisLine={false} tickLine={false} />\n              <Tooltip \n                formatter={(value) => [`${value} processos`, \"Quantidade\"]}\n                labelFormatter={(label) => `Mês: ${label}`}\n              />\n              <Bar dataKey=\"count\" fill=\"#0066cc\" radius={[4, 4, 0, 0]} maxBarSize={40} />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MonthlyProcessesChart;\n","size_bytes":4828},"client/src/components/dashboard/ProcessOverdueRanking.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, TrendingDown, Clock } from \"lucide-react\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\ninterface DepartmentRankingData {\n  departmentId: number;\n  departmentName: string;\n  total: number;\n  inProgress: number;\n  overdue: number;\n  completed: number;\n}\n\ninterface ProcessOverdueRankingProps {\n  filters: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  };\n}\n\nexport function ProcessOverdueRanking({ filters }: ProcessOverdueRankingProps) {\n  // Adicionar filtro para processos atrasados\n  const overdueFilters = {\n    ...filters,\n    status: 'overdue'\n  };\n  \n  // Construir query params\n  const queryParams = new URLSearchParams();\n  Object.entries(overdueFilters).forEach(([key, value]) => {\n    if (value !== undefined && value !== null && value !== '') {\n      queryParams.append(key, value.toString());\n    }\n  });\n  const urlParams = queryParams.toString();\n\n  const { data: rankingData = [] } = useQuery<DepartmentRankingData[]>({\n    queryKey: ['/api/analytics/department-ranking', urlParams],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  // Filtrar apenas departamentos com processos atrasados\n  const overdueRanking = rankingData\n    .filter(dept => dept.overdue > 0)\n    .sort((a, b) => b.overdue - a.overdue)\n    .slice(0, 5);\n\n  const getOverduePercentage = (overdue: number, total: number) => {\n    return total > 0 ? Math.round((overdue / total) * 100) : 0;\n  };\n\n  return (\n    <Card className=\"border-red-200\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2 text-red-600\">\n          <AlertTriangle className=\"h-5 w-5\" />\n          Processos Atrasados por Setor\n        </CardTitle>\n        <CardDescription>\n          Departamentos com maior concentração de processos atrasados\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {overdueRanking.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Clock className=\"h-12 w-12 text-green-500 mx-auto mb-3\" />\n            <p className=\"text-green-600 font-medium\">Nenhum processo atrasado</p>\n            <p className=\"text-sm text-gray-500\">Todos os processos estão dentro do prazo!</p>\n          </div>\n        ) : (\n          overdueRanking.map((dept, index) => (\n            <div\n              key={dept.departmentId}\n              className=\"flex items-center justify-between p-3 border border-red-100 rounded-lg bg-red-50\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <div className=\"flex items-center justify-center w-8 h-8 bg-red-100 rounded-full\">\n                  <span className=\"text-sm font-bold text-red-600\">\n                    {index + 1}\n                  </span>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-900\">\n                    {dept.departmentName}\n                  </h4>\n                  <div className=\"flex items-center gap-2 mt-1\">\n                    <Badge variant=\"destructive\" className=\"text-xs\">\n                      {dept.overdue} atrasados\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {dept.total} total\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"text-right\">\n                <div className=\"text-lg font-bold text-red-600\">\n                  {getOverduePercentage(dept.overdue, dept.total)}%\n                </div>\n                <div className=\"text-xs text-gray-500\">\n                  atraso\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4009},"client/src/components/dashboard/ProcessStatusChart.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from \"recharts\";\n\ninterface ProcessStatistics {\n  total: number;\n  completed: number;\n  inProgress: number;\n  overdue: number;\n  canceled: number;\n}\n\ninterface FilterState {\n  pbdoc?: string;\n  modality?: string;\n  responsible?: string;\n}\n\ninterface ProcessStatusChartProps {\n  filters?: FilterState;\n}\n\nconst ProcessStatusChart = ({ filters = {} }: ProcessStatusChartProps) => {\n  const { data, isLoading, error } = useQuery<ProcessStatistics>({\n    queryKey: ['/api/analytics/process-statistics', filters],\n    queryFn: async ({ queryKey }) => {\n      const [endpoint, queryFilters] = queryKey as [string, FilterState];\n      \n      // Construir string de parâmetros de consulta\n      const params = new URLSearchParams();\n      if (queryFilters.pbdoc) params.append('pbdocNumber', queryFilters.pbdoc);\n      if (queryFilters.modality) params.append('modalityId', queryFilters.modality);\n      if (queryFilters.responsible) {\n        console.log(\"Adicionando responsibleId:\", queryFilters.responsible, \"tipo:\", typeof queryFilters.responsible);\n        params.append('responsibleId', queryFilters.responsible);\n      }\n      \n      console.log(\"ProcessStatusChart - Filtros aplicados:\", queryFilters);\n      console.log(\"ProcessStatusChart - URL params:\", params.toString());\n      \n      const queryString = params.toString();\n      const url = queryString ? `${endpoint}?${queryString}` : endpoint;\n      \n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error('Falha ao buscar estatísticas');\n      }\n      return response.json();\n    },\n  });\n  \n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-4\">\n          <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Status dos Processos</h2>\n          <div className=\"p-4 h-64 flex items-center justify-center\">\n            <p>Carregando...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  if (error || !data) {\n    return (\n      <Card>\n        <CardContent className=\"p-4\">\n          <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Status dos Processos</h2>\n          <div className=\"p-4 h-64 flex items-center justify-center\">\n            <p className=\"text-red-500\">Erro ao carregar dados</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  // Transform data for chart com dados corretos\n  const chartData = [\n    { name: \"Em Andamento\", value: data.inProgress, color: \"#F59E0B\" }, // Amarelo\n    { name: \"Atrasados\", value: data.overdue, color: \"#EF4444\" },       // Vermelho\n    { name: \"Concluídos\", value: data.completed, color: \"#10B981\" },    // Verde\n    { name: \"Cancelados\", value: data.canceled, color: \"#9CA3AF\" },     // Cinza\n  ];\n  \n  // Filtrar apenas dados com valores > 0 para mostrar no gráfico\n  const displayData = chartData.filter(item => item.value > 0);\n  \n  // Se não há dados, mostrar placeholder\n  if (displayData.length === 0) {\n    displayData.push({ name: \"Sem dados\", value: 1, color: \"#E5E7EB\" });\n  }\n  \n  return (\n    <Card>\n      <CardContent className=\"p-4\">\n        <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Status dos Processos</h2>\n        <div className=\"p-4 flex justify-center\">\n          <div className=\"relative w-64 h-64\">\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <span className=\"text-lg font-medium text-gray-800\">{data.total} Total</span>\n            </div>\n            \n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <PieChart>\n                <Pie\n                  data={displayData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  innerRadius={60}\n                  outerRadius={80}\n                  paddingAngle={5}\n                  dataKey=\"value\"\n                >\n                  {displayData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip \n                  formatter={(value) => [`${value} processos`, \"\"]}\n                  labelFormatter={() => \"\"}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4 px-4 mt-8\">\n          <div className=\"flex items-center justify-center sm:justify-start\">\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full mr-3 flex-shrink-0\"></div>\n            <div className=\"text-center sm:text-left\">\n              <div className=\"text-sm text-gray-600\">Em Andamento</div>\n              <div className=\"text-xs text-gray-500\">\n                {data.inProgress} {data.total > 0 && `(${((data.inProgress / data.total) * 100).toFixed(1)}%)`}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-center sm:justify-start\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full mr-3 flex-shrink-0\"></div>\n            <div className=\"text-center sm:text-left\">\n              <div className=\"text-sm text-gray-600\">Atrasados</div>\n              <div className=\"text-xs text-gray-500\">\n                {data.overdue} {data.total > 0 && `(${((data.overdue / data.total) * 100).toFixed(1)}%)`}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-center sm:justify-start\">\n            <div className=\"w-3 h-3 bg-emerald-500 rounded-full mr-3 flex-shrink-0\"></div>\n            <div className=\"text-center sm:text-left\">\n              <div className=\"text-sm text-gray-600\">Concluídos</div>\n              <div className=\"text-xs text-gray-500\">\n                {data.completed} {data.total > 0 && `(${((data.completed / data.total) * 100).toFixed(1)}%)`}\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center justify-center sm:justify-start\">\n            <div className=\"w-3 h-3 bg-gray-500 rounded-full mr-3 flex-shrink-0\"></div>\n            <div className=\"text-center sm:text-left\">\n              <div className=\"text-sm text-gray-600\">Cancelados</div>\n              <div className=\"text-xs text-gray-500\">\n                {data.canceled} {data.total > 0 && `(${((data.canceled / data.total) * 100).toFixed(1)}%)`}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ProcessStatusChart;\n","size_bytes":6645},"client/src/components/dashboard/ProcessTable.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Process, User, BiddingModality, Department } from \"@shared/schema\";\nimport { Link } from \"wouter\";\nimport { Eye, X, SendHorizonal, Loader2, Clock, AlertTriangle } from \"lucide-react\";\nimport { format, differenceInDays } from \"date-fns\";\nimport {\n  getProcessStatusLabel,\n  getProcessStatusClass,\n} from \"@/lib/utils/process\";\nimport { getQueryFn, apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useMemo, useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { toast } from \"@/hooks/use-toast\";\n\ninterface FilterState {\n  pbdoc?: string;\n  modality?: string;\n  responsible?: string;\n  deadline?: string;\n}\n\ninterface ProcessTableProps {\n  filters?: FilterState;\n}\n\n// Interface para o diálogo de transferência\ninterface TransferDialogProps {\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  processId: number;\n  processName: string;\n  onTransfer: (departmentId: number) => void;\n  isPending: boolean;\n}\n\n// Componente do diálogo de transferência\nconst TransferDialog = ({\n  isOpen,\n  onOpenChange,\n  processId,\n  processName,\n  onTransfer,\n  isPending,\n}: TransferDialogProps) => {\n  const [selectedDepartment, setSelectedDepartment] = useState<string>(\"\");\n\n  // Buscar departamentos disponíveis\n  const { data: departments } = useQuery<Department[]>({\n    queryKey: [\"/api/departments\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n\n  const handleTransfer = () => {\n    if (!selectedDepartment) {\n      toast({\n        title: \"Erro\",\n        description: \"Selecione um departamento para transferir o processo\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    onTransfer(parseInt(selectedDepartment));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Transferir Processo</DialogTitle>\n          <DialogDescription>\n            Selecione o departamento para o qual deseja transferir o processo{\" \"}\n            <strong>{processName}</strong>.\n            <br />\n            <br />\n            <span className=\"text-yellow-600 font-medium\">\n              Atenção: Após a transferência, o processo não estará mais visível\n              para você.\n            </span>\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"space-y-2\">\n            <Select\n              onValueChange={setSelectedDepartment}\n              value={selectedDepartment}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Selecione o departamento destino\" />\n              </SelectTrigger>\n              <SelectContent>\n                {departments?.map((dept) => (\n                  <SelectItem key={dept.id} value={dept.id.toString()}>\n                    {dept.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button\n            variant=\"outline\"\n            onClick={() => onOpenChange(false)}\n            disabled={isPending}\n          >\n            Cancelar\n          </Button>\n          <Button\n            onClick={handleTransfer}\n            disabled={!selectedDepartment || isPending}\n          >\n            {isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Transferindo...\n              </>\n            ) : (\n              <>Transferir Processo</>\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nconst ProcessTable = ({ filters = {} }: ProcessTableProps) => {\n  // Estado para controlar o diálogo de transferência\n  const [transferDialogOpen, setTransferDialogOpen] = useState(false);\n  const [selectedProcess, setSelectedProcess] = useState<Process | null>(null);\n\n  // Get all processes\n  const {\n    data: allProcesses,\n    isLoading,\n    error,\n  } = useQuery<Process[]>({\n    queryKey: [\"/api/processes\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n\n  // Mutation para excluir processo\n  const deleteProcessMutation = useMutation({\n    mutationFn: async (processId: number) => {\n      const res = await apiRequest(\n        \"DELETE\",\n        `/api/processes/${processId}`,\n      );\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.message || \"Erro ao excluir processo\");\n      }\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso\",\n        description: \"Processo excluído com sucesso\",\n      });\n      // Invalidar cache para atualizar a lista\n      queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao excluir processo\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mutation para transferir processo\n  const transferMutation = useMutation({\n    mutationFn: async ({\n      processId,\n      departmentId,\n    }: {\n      processId: number;\n      departmentId: number;\n    }) => {\n      const res = await apiRequest(\n        \"POST\",\n        `/api/processes/${processId}/transfer/${departmentId}`,\n      );\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.message || \"Erro ao transferir processo\");\n      }\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Sucesso\",\n        description: \"Processo transferido com sucesso\",\n      });\n      setTransferDialogOpen(false);\n      setSelectedProcess(null);\n      // Invalidar cache para atualizar a lista\n      queryClient.invalidateQueries({ queryKey: [\"/api/processes\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erro ao transferir processo\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filtrar processos no lado do cliente\n  const processes = useMemo(() => {\n    if (!allProcesses) return [];\n\n    let filteredProcesses = [...allProcesses];\n\n    if (filters?.pbdoc) {\n      filteredProcesses = filteredProcesses.filter((p) =>\n        p.pbdocNumber.toLowerCase().includes(filters.pbdoc!.toLowerCase()),\n      );\n    }\n    \n    if (filters?.deadline) {\n      const today = new Date();\n      filteredProcesses = filteredProcesses.filter((p) => {\n        if (!p.deadline) return filters.deadline === \"all\";\n        \n        const daysRemaining = differenceInDays(new Date(p.deadline), today);\n        \n        switch (filters.deadline) {\n          case \"urgent\":\n            return daysRemaining >= 0 && daysRemaining < 5;\n          case \"soon\":\n            return daysRemaining >= 0 && daysRemaining < 10;\n          case \"future\":\n            return daysRemaining >= 10;\n          case \"expired\":\n            return daysRemaining < 0;\n          default:\n            return true;\n        }\n      });\n    }\n\n    if (filters?.modality) {\n      const modalityId = parseInt(filters.modality);\n      filteredProcesses = filteredProcesses.filter(\n        (p) => p.modalityId === modalityId,\n      );\n    }\n\n    if (filters?.responsible) {\n      const responsibleId = parseInt(filters.responsible);\n      console.log(\n        `ProcessTable - Filtrando responsibleId=${responsibleId}, tipo: ${typeof responsibleId}`,\n      );\n      filteredProcesses = filteredProcesses.filter(\n        (p) => p.responsibleId === responsibleId,\n      );\n    }\n\n    console.log(\"Filtrando processos client-side:\", allProcesses.length);\n    console.log(\"Filtros aplicados:\", filters);\n    console.log(\"Processos após filtragem:\", filteredProcesses.length);\n\n    return filteredProcesses;\n  }, [allProcesses, filters]);\n\n  // Get users for responsible names\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n\n  // Get modalities\n  const { data: modalities } = useQuery<BiddingModality[]>({\n    queryKey: [\"/api/modalities\"],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n\n  // Função para abrir o diálogo de transferência\n  const handleOpenTransferDialog = (process: Process) => {\n    setSelectedProcess(process);\n    setTransferDialogOpen(true);\n  };\n\n  // Função para transferir o processo\n  const handleTransferProcess = (departmentId: number) => {\n    if (selectedProcess) {\n      transferMutation.mutate({\n        processId: selectedProcess.id,\n        departmentId,\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex justify-between items-center\">\n          <h2 className=\"text-lg font-medium text-gray-800\">Processos</h2>\n          <Link href=\"/processes\">\n            <a className=\"text-primary-600 hover:text-primary-800 text-sm font-medium\">\n              Ver Todos\n            </a>\n          </Link>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error || !processes) {\n    return (\n      <Card>\n        <CardContent className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex justify-between items-center\">\n          <h2 className=\"text-lg font-medium text-gray-800\">Processos</h2>\n          <p className=\"text-red-500\">Erro ao carregar dados</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Get only the 5 most recent processes\n  const recentProcesses = [...processes]\n    .sort(\n      (a, b) =>\n        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime(),\n    )\n    .slice(0, 5);\n\n  return (\n    <>\n      <Card>\n        <CardContent className=\"px-4 py-5 border-b border-gray-200 sm:px-6 flex justify-between items-center\">\n          <h2 className=\"text-lg font-medium text-gray-800\">Processos</h2>\n          <Link href=\"/processes\">\n            <a className=\"text-primary-600 hover:text-primary-800 text-sm font-medium\">\n              Ver Todos\n            </a>\n          </Link>\n        </CardContent>\n\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider dark-header\"\n                >\n                  PBDOC\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider dark-header\"\n                >\n                  Objeto\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider dark-header\"\n                >\n                  Modalidade\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider dark-header\"\n                >\n                  Responsável\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider dark-header\"\n                >\n                  Status\n                </th>\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider dark-header\"\n                >\n                  Prazo\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {recentProcesses.map((process) => {\n                const responsible = users?.find(\n                  (user) => user.id === process.responsibleId,\n                );\n                const modality = modalities?.find(\n                  (modality) => modality.id === process.modalityId,\n                );\n\n                return (\n                  <tr key={process.id}>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 process-cell\">\n                      {process.pbdocNumber}\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-900 process-cell\">\n                      {process.description}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 process-cell\">\n                      {modality?.name || `Modalidade ${process.modalityId}`}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 process-cell\">\n                      {responsible?.fullName ||\n                        `Usuário ${process.responsibleId}`}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span\n                        className={`status-badge status-badge-${process.status}`}\n                      >\n                        {getProcessStatusLabel(process.status)}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 process-cell\">\n                      {process.deadline ? (\n                        <div className=\"flex items-center\">\n                          <Clock className=\"mr-1 h-4 w-4\" />\n                          <span className={\n                            differenceInDays(new Date(process.deadline), new Date()) < 5\n                              ? \"text-red-600 font-medium\"\n                              : differenceInDays(new Date(process.deadline), new Date()) < 10\n                              ? \"text-amber-600 font-medium\"\n                              : \"text-gray-700\"\n                          }>\n                            {differenceInDays(new Date(process.deadline), new Date()) > 0\n                              ? `${differenceInDays(new Date(process.deadline), new Date())} dias`\n                              : differenceInDays(new Date(process.deadline), new Date()) === 0\n                              ? \"Hoje\"\n                              : \"Vencido\"}\n                          </span>\n                        </div>\n                      ) : (\n                        <span className=\"text-gray-400\">Sem prazo</span>\n                      )}\n                    </td>\n\n                  </tr>\n                );\n              })}\n\n              {recentProcesses.length === 0 && (\n                <tr>\n                  <td\n                    colSpan={6}\n                    className=\"px-6 py-4 text-center text-sm text-gray-900 process-cell\"\n                  >\n                    Nenhum processo cadastrado\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n\n        <div className=\"px-4 py-3 border-t border-gray-200 flex items-center justify-between\">\n          <div className=\"text-sm text-gray-500\">\n            Mostrando{\" \"}\n            <span className=\"font-medium\">{recentProcesses.length}</span> de{\" \"}\n            <span className=\"font-medium\">{processes.length}</span> processos\n          </div>\n        </div>\n      </Card>\n\n      {/* Diálogo de transferência de processo */}\n      {selectedProcess && (\n        <TransferDialog\n          isOpen={transferDialogOpen}\n          onOpenChange={setTransferDialogOpen}\n          processId={selectedProcess.id}\n          processName={selectedProcess.description}\n          onTransfer={handleTransferProcess}\n          isPending={transferMutation.isPending}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ProcessTable;\n","size_bytes":16124},"client/src/components/dashboard/ResourceDistributionChart.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ResourceSource } from \"@shared/schema\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\ninterface SourceDistribution {\n  sourceId: number;\n  count: number;\n}\n\ninterface FilterState {\n  pbdoc?: string;\n  modality?: string;\n  responsible?: string;\n}\n\ninterface ResourceDistributionChartProps {\n  filters?: FilterState;\n}\n\nconst ResourceDistributionChart = ({ filters = {} }: ResourceDistributionChartProps) => {\n  // Get source distributions\n  const { data: sourceData, isLoading: sourceLoading, error: sourceError } = useQuery<SourceDistribution[]>({\n    queryKey: ['/api/analytics/processes-by-source', filters],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n  \n  // Get resource sources (to get names)\n  const { data: sources, isLoading: sourcesLoading } = useQuery<ResourceSource[]>({\n    queryKey: ['/api/sources'],\n  });\n  \n  const isLoading = sourceLoading || sourcesLoading;\n  \n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-4\">\n          <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Distribuição por Fonte de Recurso</h2>\n          <div className=\"space-y-4 p-4 flex justify-center items-center h-64\">\n            <p>Carregando...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  if (sourceError || !sourceData || !sources) {\n    return (\n      <Card>\n        <CardContent className=\"p-4\">\n          <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Distribuição por Fonte de Recurso</h2>\n          <div className=\"space-y-4 p-4 flex justify-center items-center h-64\">\n            <p className=\"text-red-500\">Erro ao carregar dados</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  // Combine data\n  const chartData = sourceData.map(item => {\n    const source = sources.find(s => s.id === item.sourceId);\n    return {\n      sourceId: item.sourceId,\n      sourceName: source?.code || `Fonte ${item.sourceId}`,\n      count: item.count\n    };\n  });\n  \n  // Calculate total\n  const total = chartData.reduce((sum, item) => sum + item.count, 0);\n  \n  // Add percentage\n  const chartDataWithPercent = chartData.map(item => ({\n    ...item,\n    percentage: total > 0 ? Math.round((item.count / total) * 100) : 0\n  }));\n  \n  // Sort by percentage (descending)\n  chartDataWithPercent.sort((a, b) => b.percentage - a.percentage);\n  \n  // Define colors for the bars\n  const colors = [\"bg-blue-600\", \"bg-green-600\", \"bg-purple-600\", \"bg-yellow-600\", \"bg-red-600\"];\n  \n  return (\n    <Card>\n      <CardContent className=\"p-4\">\n        <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Distribuição por Fonte de Recurso</h2>\n        <div className=\"space-y-4 p-4\">\n          {chartDataWithPercent.map((item, index) => (\n            <div key={item.sourceId}>\n              <div className=\"flex justify-between mb-1\">\n                <span className=\"text-sm font-medium text-gray-700\">\n                  Fonte {item.sourceName}\n                </span>\n                <span className=\"text-sm font-medium text-gray-700\">{item.percentage}%</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                <div \n                  className={`${colors[index % colors.length]} h-2.5 rounded-full`} \n                  style={{ width: `${item.percentage}%` }}\n                ></div>\n              </div>\n            </div>\n          ))}\n          \n          {chartDataWithPercent.length === 0 && (\n            <div className=\"flex justify-center items-center h-32\">\n              <p className=\"text-gray-500\">Nenhum dado disponível</p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ResourceDistributionChart;\n","size_bytes":3832},"client/src/components/dashboard/ResponsibleTable.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { User } from \"@shared/schema\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\ninterface ResponsibleData {\n  responsibleId: number;\n  total: number;\n  completed: number;\n}\n\ninterface FilterState {\n  pbdoc?: string;\n  modality?: string;\n  responsible?: string;\n}\n\ninterface ResponsibleTableProps {\n  filters?: FilterState;\n}\n\nconst ResponsibleTable = ({ filters = {} }: ResponsibleTableProps) => {\n  // Get process by responsible\n  const { data: responsibleData, isLoading: dataLoading, error } = useQuery<ResponsibleData[]>({\n    queryKey: ['/api/analytics/processes-by-responsible', filters],\n    queryFn: getQueryFn({ on401: \"throw\" }),\n  });\n  \n  // Get users (to get names)\n  const { data: users, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n  \n  const isLoading = dataLoading || usersLoading;\n  \n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-4\">\n          <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Responsáveis por Processos</h2>\n          <div className=\"h-64 flex items-center justify-center\">\n            <p>Carregando...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  if (error || !responsibleData || !users) {\n    return (\n      <Card>\n        <CardContent className=\"p-4\">\n          <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Responsáveis por Processos</h2>\n          <div className=\"h-64 flex items-center justify-center\">\n            <p className=\"text-red-500\">Erro ao carregar dados</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  // Combine data\n  const tableData = responsibleData.map(item => {\n    const user = users.find(u => u.id === item.responsibleId);\n    return {\n      id: item.responsibleId,\n      name: user?.fullName || `Usuário ${item.responsibleId}`,\n      initials: user?.fullName\n        ? user.fullName\n            .split(' ')\n            .map(n => n[0])\n            .slice(0, 2)\n            .join('')\n            .toUpperCase()\n        : \"??\",\n      total: item.total,\n      completed: item.completed,\n      percentage: Math.round((item.completed / item.total) * 100)\n    };\n  });\n  \n  // Sort by percentage (descending)\n  tableData.sort((a, b) => b.percentage - a.percentage);\n  \n  return (\n    <Card>\n      <CardContent className=\"p-4\">\n        <h2 className=\"text-lg font-medium text-gray-800 mb-4\">Responsáveis por Processos</h2>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead>\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider dark-header\">\n                  Responsável\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider dark-header\">\n                  Processos\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider dark-header\">\n                  Concluídos\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-800 uppercase tracking-wider dark-header\">\n                  %\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {tableData.map((item) => (\n                <tr key={item.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <div className=\"flex-shrink-0 h-8 w-8 rounded-full bg-primary-100 flex items-center justify-center text-primary-700 font-medium\">\n                        {item.initials}\n                      </div>\n                      <div className=\"ml-4\">\n                        <div className=\"text-sm font-medium text-gray-900\">{item.name}</div>\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {item.total}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {item.completed}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div className=\"flex items-center\">\n                      <span className=\"text-sm text-gray-900 mr-2\">{item.percentage}%</span>\n                      <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                        <div \n                          className={`${\n                            item.percentage >= 80 \n                              ? \"bg-green-600\" \n                              : item.percentage >= 60 \n                              ? \"bg-yellow-500\" \n                              : \"bg-red-500\"\n                          } h-2 rounded-full`} \n                          style={{ width: `${item.percentage}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  </td>\n                </tr>\n              ))}\n              \n              {tableData.length === 0 && (\n                <tr>\n                  <td colSpan={4} className=\"px-6 py-4 text-center text-sm text-gray-500\">\n                    Nenhum dado disponível\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ResponsibleTable;\n","size_bytes":5686},"client/src/components/dashboard/StatsCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\ninterface StatsCardProps {\n  title: string;\n  value: number;\n  icon: React.ReactNode;\n  progress?: {\n    current: number;\n    max: number;\n  };\n  change?: {\n    value: number;\n    label: string;\n  };\n  color: \"blue\" | \"green\" | \"yellow\" | \"red\" | \"gray\";\n}\n\nconst StatsCard = ({ title, value, icon, progress, change, color }: StatsCardProps) => {\n  // Map color to Tailwind classes\n  const colorClasses = {\n    blue: {\n      bg: \"bg-blue-100\",\n      text: \"text-blue-600\",\n      progress: \"bg-blue-600\"\n    },\n    green: {\n      bg: \"bg-green-100\",\n      text: \"text-green-600\",\n      progress: \"bg-green-600\"\n    },\n    yellow: {\n      bg: \"bg-yellow-100\",\n      text: \"text-yellow-600\",\n      progress: \"bg-yellow-600\"\n    },\n    red: {\n      bg: \"bg-red-100\",\n      text: \"text-red-600\",\n      progress: \"bg-red-600\"\n    },\n    gray: {\n      bg: \"bg-gray-100\",\n      text: \"text-gray-600\",\n      progress: \"bg-gray-600\"\n    }\n  };\n  \n  // Calculate progress percentage\n  const progressPercentage = progress \n    ? Math.round((progress.current / progress.max) * 100) \n    : 0;\n  \n  return (\n    <Card>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center\">\n          <div className={`flex-shrink-0 rounded-md ${colorClasses[color].bg} p-3`}>\n            <div className={colorClasses[color].text}>\n              {icon}\n            </div>\n          </div>\n          <div className=\"ml-4\">\n            <h2 className=\"text-sm font-medium text-gray-600\">{title}</h2>\n            <p className=\"text-2xl font-semibold text-gray-800\">{value}</p>\n          </div>\n        </div>\n        \n        {progress && (\n          <div className=\"mt-4\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-500\">0</span>\n              <span className=\"text-gray-500\">Meta: {progress.max}</span>\n            </div>\n            <div className=\"mt-1 w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className={`${colorClasses[color].progress} h-2 rounded-full`} \n                style={{ width: `${progressPercentage}%` }}\n              ></div>\n            </div>\n          </div>\n        )}\n        \n        {change && (\n          <div className=\"mt-4\">\n            <div className=\"flex justify-between text-sm\">\n              <span className={colorClasses[color].text}>{change.label}</span>\n              <span className=\"text-gray-500\">{progressPercentage}%</span>\n            </div>\n            <div className=\"mt-1 w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className={`${colorClasses[color].progress} h-2 rounded-full`} \n                style={{ width: `${progressPercentage}%` }}\n              ></div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default StatsCard;\n","size_bytes":2891},"client/src/components/dashboard/TemporalDistributionChart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { getQueryFn } from \"@/lib/queryClient\";\n\ninterface TemporalDistributionData {\n  period: string;\n  inProgress: number;\n  overdue: number;\n  completed: number;\n}\n\ninterface TemporalDistributionChartProps {\n  filters: {\n    pbdocNumber?: string;\n    modalityId?: number;\n    sourceId?: number;\n    responsibleId?: number;\n    status?: string;\n  };\n}\n\nexport function TemporalDistributionChart({ filters }: TemporalDistributionChartProps) {\n  console.log('TemporalDistributionChart - Filtros aplicados:', filters);\n  \n  // Construir query params\n  const queryParams = new URLSearchParams();\n  Object.entries(filters).forEach(([key, value]) => {\n    if (value !== undefined && value !== null && value !== '') {\n      queryParams.append(key, value.toString());\n    }\n  });\n  const urlParams = queryParams.toString();\n  console.log('TemporalDistributionChart - URL params:', urlParams);\n\n  const { data: temporalData = [] } = useQuery<TemporalDistributionData[]>({\n    queryKey: ['/api/analytics/temporal-distribution', urlParams],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  // Preparar dados para o gráfico\n  const chartData = temporalData.map(item => ({\n    period: item.period,\n    'Em Andamento': item.inProgress,\n    'Atrasados': item.overdue,\n    'Concluídos': item.completed,\n  }));\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-orange-600\">Distribuição Temporal</CardTitle>\n        <CardDescription>\n          Evolução dos processos por período (em andamento, atrasados, concluídos)\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={350}>\n          <LineChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"period\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line \n              type=\"monotone\" \n              dataKey=\"Em Andamento\" \n              stroke=\"#F59E0B\" \n              strokeWidth={3}\n              dot={{ fill: '#F59E0B', strokeWidth: 2, r: 4 }}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"Atrasados\" \n              stroke=\"#EF4444\" \n              strokeWidth={3}\n              dot={{ fill: '#EF4444', strokeWidth: 2, r: 4 }}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"Concluídos\" \n              stroke=\"#10B981\" \n              strokeWidth={3}\n              dot={{ fill: '#10B981', strokeWidth: 2, r: 4 }}\n            />\n            <Line \n              type=\"monotone\" \n              dataKey=\"Cancelados\" \n              stroke=\"#9CA3AF\" \n              strokeWidth={3}\n              dot={{ fill: '#9CA3AF', strokeWidth: 2, r: 4 }}\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3123},"client/src/components/notifications/NotificationDropdown.tsx":{"content":"import React, { useState } from \"react\";\nimport { Bell, Calendar, FileText, UserPlus, RefreshCw, Info, Trash2 } from \"lucide-react\";\nimport { \n  Popover, \n  PopoverContent, \n  PopoverTrigger \n} from \"@/components/ui/popover\";\nimport { Button } from \"@/components/ui/button\";\nimport { NotificationBadge } from \"@/components/ui/notification-badge\";\nimport { Notification, NotificationType } from \"@/types/notification\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { ptBR } from \"date-fns/locale\";\nimport { useLocation } from \"wouter\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface NotificationDropdownProps {\n  notifications: Notification[];\n  unreadCount: number;\n  onMarkAllAsRead: () => void;\n  onClearAll: () => void;\n  onReadNotification: (id: string) => void;\n}\n\nexport default function NotificationDropdown({\n  notifications,\n  unreadCount,\n  onMarkAllAsRead,\n  onClearAll,\n  onReadNotification\n}: NotificationDropdownProps) {\n  const [open, setOpen] = useState(false);\n  const [location, setLocation] = useLocation();\n  \n  const getNotificationIcon = (type: NotificationType) => {\n    switch (type) {\n      case \"deadline\":\n        return <Calendar className=\"h-4 w-4 text-yellow-500\" />;\n      case \"new_process\":\n        return <FileText className=\"h-4 w-4 text-green-500\" />;\n      case \"update\":\n        return <RefreshCw className=\"h-4 w-4 text-blue-500\" />;\n      case \"admin\":\n        return <UserPlus className=\"h-4 w-4 text-purple-500\" />;\n      case \"system\":\n        return <Info className=\"h-4 w-4 text-gray-500\" />;\n      default:\n        return <Bell className=\"h-4 w-4\" />;\n    }\n  };\n  \n  const getNotificationColor = (type: NotificationType) => {\n    switch (type) {\n      case \"deadline\":\n        return \"border-l-yellow-500\";\n      case \"new_process\":\n        return \"border-l-green-500\";\n      case \"update\":\n        return \"border-l-blue-500\";\n      case \"admin\":\n        return \"border-l-purple-500\";\n      case \"system\":\n        return \"border-l-gray-500\";\n      default:\n        return \"border-l-gray-300\";\n    }\n  };\n  \n  const handleNotificationClick = (notification: Notification) => {\n    onReadNotification(notification.id);\n    setOpen(false);\n    \n    if (notification.link) {\n      setLocation(notification.link);\n    }\n  };\n  \n  const unreadNotifications = notifications.filter(n => !n.read);\n  const allNotifications = [...notifications];\n  \n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          className=\"relative p-2 rounded-full text-gray-500 hover:text-secondary-500 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none\"\n          aria-label=\"Notificações\"\n        >\n          <Bell className=\"h-6 w-6\" />\n          {unreadCount > 0 && (\n            <NotificationBadge \n              count={unreadCount} \n              variant=\"destructive\" \n              className=\"animate-pulse\"\n            />\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0\" align=\"end\">\n        <div className=\"flex items-center justify-between p-4 border-b\">\n          <h4 className=\"font-semibold text-base\">Notificações</h4>\n          <div className=\"flex gap-2\">\n            {unreadCount > 0 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={onMarkAllAsRead}\n                className=\"text-xs\"\n              >\n                Marcar todas como lidas\n              </Button>\n            )}\n            {notifications.length > 0 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={onClearAll}\n                className=\"text-red-600 hover:text-red-700 p-2\"\n                title=\"Limpar todas as notificações\"\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        </div>\n        \n        <Tabs defaultValue=\"unread\">\n          <TabsList className=\"w-full grid grid-cols-2\">\n            <TabsTrigger value=\"unread\" className=\"relative\">\n              Não lidas\n              {unreadCount > 0 && (\n                <span className=\"ml-1 text-xs bg-destructive text-destructive-foreground rounded-full px-1.5 py-0.5\">\n                  {unreadCount}\n                </span>\n              )}\n            </TabsTrigger>\n            <TabsTrigger value=\"all\">Todas</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"unread\" className=\"space-y-0 mt-0\">\n            <ScrollArea className=\"h-[300px]\">\n              {unreadNotifications.length > 0 ? (\n                unreadNotifications.map(notification => (\n                  <div \n                    key={notification.id} \n                    className={`border-l-4 ${getNotificationColor(notification.type)} p-3 hover:bg-muted/50 cursor-pointer`}\n                    onClick={() => handleNotificationClick(notification)}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"mt-0.5\">\n                        {getNotificationIcon(notification.type)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">{notification.title}</p>\n                        <p className=\"text-xs text-muted-foreground\">{notification.message}</p>\n                        <p className=\"text-[10px] text-muted-foreground mt-1\">\n                          {formatDistanceToNow(new Date(notification.createdAt), { \n                            addSuffix: true,\n                            locale: ptBR\n                          })}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-[300px] text-center p-4\">\n                  <Bell className=\"h-12 w-12 text-muted-foreground/30 mb-3\" />\n                  <p className=\"text-muted-foreground\">Nenhuma notificação não lida.</p>\n                </div>\n              )}\n            </ScrollArea>\n          </TabsContent>\n          \n          <TabsContent value=\"all\" className=\"space-y-0 mt-0\">\n            <ScrollArea className=\"h-[300px]\">\n              {allNotifications.length > 0 ? (\n                allNotifications.map(notification => (\n                  <div \n                    key={notification.id} \n                    className={`border-l-4 ${getNotificationColor(notification.type)} p-3 hover:bg-muted/50 cursor-pointer ${notification.read ? 'opacity-70 bg-muted/20' : ''}`}\n                    onClick={() => handleNotificationClick(notification)}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      <div className=\"mt-0.5\">\n                        {getNotificationIcon(notification.type)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className={`font-medium text-sm ${notification.read ? 'font-normal' : ''}`}>\n                          {notification.title}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">{notification.message}</p>\n                        <p className=\"text-[10px] text-muted-foreground mt-1\">\n                          {formatDistanceToNow(new Date(notification.createdAt), { \n                            addSuffix: true,\n                            locale: ptBR \n                          })}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                <div className=\"flex flex-col items-center justify-center h-[300px] text-center p-4\">\n                  <Bell className=\"h-12 w-12 text-muted-foreground/30 mb-3\" />\n                  <p className=\"text-muted-foreground\">Nenhuma notificação disponível.</p>\n                </div>\n              )}\n            </ScrollArea>\n          </TabsContent>\n        </Tabs>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":8261},"client/src/components/process/ProcessForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { User, BiddingModality, ResourceSource, Department, insertProcessSchema } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  RadioGroup,\n  RadioGroupItem,\n} from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\n// Extend the process schema for the form\nconst processFormSchema = insertProcessSchema.extend({\n  pbdocNumber: z.string().min(1, \"Número PBDOC é obrigatório\"),\n  description: z.string().min(1, \"Objeto é obrigatório\"),\n  centralDeCompras: z.string().optional(),\n  modalityId: z.number({\n    required_error: \"Por favor, selecione a modalidade\",\n  }).refine(val => val > 0, \"Modalidade é obrigatória\"),\n  sourceId: z.number({\n    required_error: \"Por favor, selecione a fonte de recurso\",\n  }).refine(val => val > 0, \"Fonte de recurso é obrigatória\"),\n  responsibleId: z.number({\n    required_error: \"Por favor, selecione o responsável\",\n  }).refine(val => val > 0, \"Responsável é obrigatório\"),\n  priority: z.enum([\"low\", \"medium\", \"high\"], {\n    required_error: \"Por favor, selecione a prioridade\",\n  }),\n});\n\ntype ProcessFormValues = z.infer<typeof processFormSchema>;\n\ninterface ProcessFormProps {\n  defaultValues?: Partial<ProcessFormValues>;\n  initialData?: any;\n  onSubmit: (data: ProcessFormValues) => void;\n  isSubmitting: boolean;\n}\n\nconst ProcessForm = ({ defaultValues, initialData, onSubmit, isSubmitting }: ProcessFormProps) => {\n  // Get users for responsible selector\n  const { data: users, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n  \n  // Get modalities for modality selector\n  const { data: modalities, isLoading: modalitiesLoading } = useQuery<BiddingModality[]>({\n    queryKey: ['/api/modalities'],\n  });\n  \n  // Get resource sources for source selector\n  const { data: sources, isLoading: sourcesLoading } = useQuery<ResourceSource[]>({\n    queryKey: ['/api/sources'],\n  });\n  \n  // Get departments for department selector\n  const { data: departments, isLoading: departmentsLoading } = useQuery<Department[]>({\n    queryKey: ['/api/departments'],\n  });\n  \n  // Combine defaultValues and initialData, with initialData taking precedence\n  const combinedDefaultValues = {\n    pbdocNumber: \"\",\n    description: \"\",\n    modalityId: 0,\n    sourceId: 0,\n    responsibleId: 0,\n    centralDeCompras: \"\",\n    priority: \"medium\",\n    ...defaultValues,\n    ...(initialData && {\n      pbdocNumber: initialData.pbdocNumber,\n      description: initialData.description,\n      modalityId: initialData.modalityId,\n      sourceId: initialData.sourceId,\n      responsibleId: initialData.responsibleId,\n      centralDeCompras: initialData.centralDeCompras || \"\",\n      priority: initialData.priority,\n      status: initialData.status,\n    }),\n  };\n\n  const form = useForm<ProcessFormValues>({\n    resolver: zodResolver(processFormSchema),\n    defaultValues: combinedDefaultValues,\n  });\n  \n  // Função para lidar com o envio do formulário, com log do valor\n  const handleFormSubmit = (data: ProcessFormValues) => {\n    console.log(\"Enviando dados do formulário:\", data);\n    onSubmit(data);\n  };\n  \n  const isLoading = usersLoading || modalitiesLoading || sourcesLoading || departmentsLoading;\n  \n  return (\n    <Card className=\"w-full max-w-none\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"text-lg md:text-xl\">\n          {defaultValues ? \"Editar Processo\" : \"Novo Processo\"}\n        </CardTitle>\n        <CardDescription className=\"text-sm\">\n          {defaultValues \n            ? \"Atualize os detalhes do processo de licitação\" \n            : \"Cadastre um novo processo de licitação\"}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {isLoading ? (\n          <p>Carregando formulário...</p>\n        ) : (\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleFormSubmit)} className=\"space-y-3 md:space-y-4\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 md:gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"pbdocNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex\">\n                        Número PBDOC <span className=\"text-red-500 ml-1\">*</span>\n                      </FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Ex: PB-2023-5482\" {...field} />\n                      </FormControl>\n                      <FormDescription>\n                        Número de protocolo do documento no sistema PBDOC (obrigatório)\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"modalityId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex\">\n                        Modalidade <span className=\"text-red-500 ml-1\">*</span>\n                      </FormLabel>\n                      <Select \n                        onValueChange={(value) => field.onChange(parseInt(value))}\n                        value={field.value ? field.value.toString() : undefined}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione a modalidade\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {modalities?.map((modality) => (\n                            <SelectItem \n                              key={modality.id} \n                              value={modality.id.toString()}\n                            >\n                              {modality.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Selecione a modalidade de licitação (obrigatório)\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex\">\n                      Objeto <span className=\"text-red-500 ml-1\">*</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Descreva o objeto da licitação\" \n                        {...field} \n                        rows={3}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Informe detalhes sobre o objeto da licitação (obrigatório)\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 md:gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"sourceId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex\">\n                        Fonte de Recurso <span className=\"text-red-500 ml-1\">*</span>\n                      </FormLabel>\n                      <Select \n                        onValueChange={(value) => field.onChange(parseInt(value))}\n                        value={field.value ? field.value.toString() : undefined}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione a fonte\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {sources?.map((source) => (\n                            <SelectItem \n                              key={source.id} \n                              value={source.id.toString()}\n                            >\n                              Fonte {source.code} - {source.description}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Origem do recurso financeiro (obrigatório)\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"responsibleId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex\">\n                        Responsável <span className=\"text-red-500 ml-1\">*</span>\n                      </FormLabel>\n                      <Select \n                        onValueChange={(value) => field.onChange(parseInt(value))}\n                        value={field.value ? field.value.toString() : undefined}\n                      >\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Selecione o responsável\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {users?.map((user) => (\n                            <SelectItem \n                              key={user.id} \n                              value={user.id.toString()}\n                            >\n                              {user.fullName}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormDescription>\n                        Servidor responsável pelo processo (obrigatório)\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n              \n\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3 md:gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"centralDeCompras\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>\n                        Central de Compras\n                      </FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Número do processo de Central de Compras\" \n                          value={field.value || \"\"}\n                          onChange={field.onChange}\n                          onBlur={field.onBlur}\n                          name={field.name}\n                          ref={field.ref}\n                        />\n                      </FormControl>\n                      <FormDescription>\n                        Digite o número do processo da Central de Compras (opcional)\n                      </FormDescription>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                  <h4 className=\"font-medium text-blue-800 mb-2\">Prazo Automático</h4>\n                  <p className=\"text-sm text-blue-600\">\n                    O prazo será calculado automaticamente baseado na modalidade selecionada:\n                  </p>\n                  <ul className=\"text-sm text-blue-600 mt-2 ml-4 list-disc\">\n                    <li>Pregão Eletrônico: 3 dias</li>\n                    <li>Concorrência: 5 dias</li>\n                    <li>Dispensa/Inexigibilidade: 7 dias</li>\n                  </ul>\n                </div>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem className=\"space-y-3\">\n                    <FormLabel className=\"flex\">\n                      Prioridade <span className=\"text-red-500 ml-1\">*</span>\n                    </FormLabel>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        className=\"flex space-x-4\"\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"low\" id=\"priority-low\" />\n                          <Label htmlFor=\"priority-low\" className=\"text-blue-600\">Baixa</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"medium\" id=\"priority-medium\" />\n                          <Label htmlFor=\"priority-medium\" className=\"text-yellow-600\">Média</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <RadioGroupItem value=\"high\" id=\"priority-high\" />\n                          <Label htmlFor=\"priority-high\" className=\"text-red-600\">Alta</Label>\n                        </div>\n                      </RadioGroup>\n                    </FormControl>\n                    <FormDescription>\n                      Selecione a prioridade do processo (obrigatório)\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n\n              \n              <Button type=\"submit\" disabled={isSubmitting}>\n                {isSubmitting ? \"Salvando...\" : defaultValues ? \"Atualizar Processo\" : \"Criar Processo\"}\n              </Button>\n            </form>\n          </Form>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ProcessForm;\n","size_bytes":15115},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dark-mode-stats-fix.css":{"content":"/* Estilos específicos para garantir que os textos em componentes de estatísticas e responsáveis fiquem pretos no tema escuro */\n\n/* Textos de estatísticas e valores */\n.dark .card.p-4 h2,\n.dark .card.p-4 h3,\n.dark .card.p-4 p,\n.dark .card.p-4 span,\n.dark .card.p-4 div,\n.dark .card.p-6 h2,\n.dark .card.p-6 h3,\n.dark .card.p-6 p,\n.dark .card.p-6 span,\n.dark .card.p-6 div,\n.dark .text-gray-500,\n.dark .dark-header {\n  color: black !important;\n}\n\n/* Nomes de responsáveis nas tabelas */\n.dark tbody tr td span,\n.dark tbody tr td div,\n.dark tbody tr td p {\n  color: black !important;\n}\n\n/* Estatísticas específicas na tabela de responsáveis */\n.dark .responsible-stats,\n.dark .process-count,\n.dark .completed-count,\n.dark .percentage {\n  color: black !important;\n}\n\n/* Texto em headers de tabelas */\n.dark thead tr th,\n.dark thead th,\n.dark th .text-gray-500,\n.dark th .text-left,\n.dark th .text-xs,\n.dark th .uppercase,\n.dark th .tracking-wider,\n.dark th .font-medium,\n.dark th * {\n  color: black !important;\n  background-color: #f0f0f0 !important;\n}\n\n/* Textos em células específicas */\n.dark [data-label=\"Responsável\"] span,\n.dark [data-label=\"Processos\"] span,\n.dark [data-label=\"Concluídos\"] span,\n.dark [data-label=\"%\"] span,\n.dark .process-cell,\n.dark .process-cell *,\n.dark td.text-gray-500,\n.dark td.text-gray-900,\n.dark td .text-gray-500,\n.dark td .text-gray-900 {\n  color: black !important;\n}\n\n/* Texto em componentes de gráficos */\n.dark .recharts-legend-item-text,\n.dark .recharts-tooltip-label,\n.dark .recharts-default-tooltip {\n  color: black !important;\n}\n\n/* Fundo de tabelas para melhor contraste */\n.dark table {\n  background-color: white !important;\n}\n\n/* Garantir que os textos do cabeçalho da aplicação permaneçam brancos */\n.dark .sidebar-text,\n.dark .sidebar-link,\n.dark header .text-white {\n  color: white !important;\n}\n\n/* Ajustes para os cartões de estatísticas */\n.dark .stat-card .card-title,\n.dark .stat-card h3,\n.dark .stat-card .value,\n.dark .stat-card .label {\n  color: black !important;\n}\n\n/* Ajustes para todos os elementos do tipo \"table\" */\n.dark table * {\n  color: black !important;\n}\n\n/* Garantir que os elementos dentro de .card tenham texto preto */\n.dark .card-content * {\n  color: black !important;\n}","size_bytes":2260},"client/src/components/ui/dark-text-fix.css":{"content":"/* Este arquivo adiciona classes para garantir que textos sejam legíveis no modo escuro */\n\n/* Aplicar texto branco a cabeçalhos e títulos no modo escuro */\n.dark h1,\n.dark h2,\n.dark h3,\n.dark h4,\n.dark h5,\n.dark h6,\n.dark .text-2xl,\n.dark .text-xl,\n.dark .text-lg,\n.dark .font-semibold,\n.dark .font-bold,\n.dark .card-title {\n  color: white !important;\n}\n\n/* Títulos específicos e textos de descrição */\n.dark .text-gray-800 {\n  color: white !important;\n}\n\n.dark .text-gray-600,\n.dark .text-gray-700 {\n  color: rgba(255, 255, 255, 0.9) !important;\n}\n\n/* Textos no corpo de cards e outros elementos */\n.dark .card-content .text-foreground,\n.dark .card-content .text-secondary-500,\n.dark .card-content .text-gray-800 {\n  color: white !important;\n}\n\n/* Aplicar texto branco a rótulos e etiquetas */\n.dark label,\n.dark .label,\n.dark .font-medium {\n  color: rgba(255, 255, 255, 0.9) !important;\n}\n\n/* Ajustar cor do texto em botões */\n.dark button:not(.btn-primary):not(.btn-secondary) .text-gray-800 {\n  color: white !important;\n}\n\n/* Ajustar cores nos itens de navegação */\n.dark .nav-item .text-gray-800 {\n  color: white !important;\n}\n\n/* Comentado para manter tabelas com cor original */\n/* \n.dark table th,\n.dark table td,\n.dark table caption {\n  color: white !important;\n}\n*/","size_bytes":1287},"client/src/components/ui/data-table.tsx":{"content":"import {\n  ColumnDef,\n  flexRender,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n  SortingState,\n  getSortedRowModel,\n  ColumnFiltersState,\n  getFilteredRowModel,\n} from \"@tanstack/react-table\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n  filterColumn?: string;\n  filterPlaceholder?: string;\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  filterColumn,\n  filterPlaceholder = \"Filtrar...\",\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = useState<SortingState>([]);\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]);\n  \n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    state: {\n      sorting,\n      columnFilters,\n    },\n  });\n\n  return (\n    <div>\n      {filterColumn && (\n        <div className=\"flex items-center py-4\">\n          <Input\n            placeholder={filterPlaceholder}\n            value={(table.getColumn(filterColumn)?.getFilterValue() as string) ?? \"\"}\n            onChange={(e) =>\n              table.getColumn(filterColumn)?.setFilterValue(e.target.value)\n            }\n            className=\"max-w-sm\"\n          />\n        </div>\n      )}\n      \n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => (\n                  <TableHead key={header.id}>\n                    {header.isPlaceholder\n                      ? null\n                      : flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                  </TableHead>\n                ))}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell key={cell.id}>\n                      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                  Nenhum resultado encontrado.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      \n      <div className=\"flex items-center justify-between space-x-2 py-4\">\n        <div className=\"text-sm text-muted-foreground\">\n          Mostrando de{\" \"}\n          <strong>\n            {table.getState().pagination.pageIndex * table.getState().pagination.pageSize + 1}\n          </strong>{\" \"}\n          a{\" \"}\n          <strong>\n            {Math.min(\n              (table.getState().pagination.pageIndex + 1) * table.getState().pagination.pageSize,\n              table.getFilteredRowModel().rows.length\n            )}\n          </strong>{\" \"}\n          de <strong>{table.getFilteredRowModel().rows.length}</strong> resultados\n        </div>\n        \n        <div className=\"space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            Anterior\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            Próximo\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4396},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/notification-badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst notificationBadgeVariants = cva(\n  \"absolute -top-1 -right-1 inline-flex items-center justify-center rounded-full text-xs font-semibold transition-colors\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground\",\n        secondary: \"bg-secondary text-secondary-foreground\",\n        destructive: \"bg-destructive text-destructive-foreground\",\n        success: \"bg-green-500 text-white\",\n        warning: \"bg-yellow-500 text-white\",\n      },\n      size: {\n        default: \"h-4 w-4 text-[10px]\",\n        sm: \"h-3 w-3 text-[8px]\",\n        lg: \"h-5 w-5 text-[11px]\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface NotificationBadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof notificationBadgeVariants> {\n  count?: number;\n  maxCount?: number;\n}\n\nfunction NotificationBadge({ \n  className, \n  variant, \n  size,\n  count = 0,\n  maxCount = 99,\n  ...props \n}: NotificationBadgeProps) {\n  if (count <= 0) return null;\n  \n  const displayCount = count > maxCount ? `${maxCount}+` : count.toString();\n  \n  return (\n    <div \n      className={cn(notificationBadgeVariants({ variant, size }), className)} \n      {...props}\n    >\n      {displayCount}\n    </div>\n  )\n}\n\nexport { NotificationBadge, notificationBadgeVariants }","size_bytes":1485},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table-text-fix.css":{"content":"/* Garantir que textos em tabelas permaneçam pretos no modo escuro */\n.dark table th,\n.dark table td,\n.dark table caption,\n.dark .table-cell,\n.dark table td span,\n.dark table td p,\n.dark table td div,\n.dark td .text-sm,\n.dark td .text-xs,\n.dark td .text-lg,\n.dark td .font-medium,\n.dark td a,\n.dark td span,\n.dark td div,\n.dark .user-item-name,\n.dark .user-card-name,\n.dark .recharts-text,\n.dark .recharts-label,\n.dark .recharts-cartesian-axis-tick-value {\n  color: rgba(0, 0, 0, 0.9) !important; /* Preto com alta opacidade */\n}\n\n/* Para elementos específicos de tabela que possam precisar de ajuste */\n.dark .data-table th,\n.dark .data-table td,\n.dark .process-table td,\n.dark .user-table td,\n.dark .data-grid td,\n.dark [role=\"gridcell\"],\n.dark [role=\"cell\"],\n.dark .card span,\n.dark .card-title,\n.dark .card-header,\n.dark .card-content {\n  color: rgba(0, 0, 0, 0.9) !important;\n}\n\n/* Garantir que nomes de responsáveis e estatísticas sejam em preto */\n.dark .statistics-card .value,\n.dark .statistics-card .label,\n.dark .responsible-name,\n.dark .user-name,\n.dark .process-data,\n.dark .completed-value,\n.dark .percentage-value,\n.dark .label-value,\n.dark .text-value {\n  color: rgba(0, 0, 0, 0.9) !important;\n}\n\n/* Garantir iniciais do avatar em preto */\n.dark .rounded-full .font-bold {\n  color: #010021 !important; /* Cor azul escura para iniciais */\n}\n\n/* Background das células para garantir contraste */\n.dark table td,\n.dark table th {\n  background-color: rgba(255, 255, 255, 0.9) !important;\n}\n\n/* Alternância de cores nas linhas para melhor visualização */\n.dark table tr:nth-child(odd) td {\n  background-color: rgba(240, 240, 240, 0.9) !important; \n}\n\n.dark table tr:nth-child(even) td {\n  background-color: rgba(255, 255, 255, 0.9) !important;\n}","size_bytes":1764},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/utils/exactPdfExport.ts":{"content":"import { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport { Process, User, BiddingModality, ResourceSource, Department } from \"@shared/schema\";\nimport autoTable from 'jspdf-autotable';\n\ninterface ReportData {\n  processes: Process[];\n  users: User[];\n  modalities: BiddingModality[];\n  sources: ResourceSource[];\n  departments?: Department[];\n  filters: {\n    department?: string;\n    month?: string;\n    year?: string;\n  };\n  reportType: string;\n}\n\n// Cores utilizadas nos gráficos\n// Cores padronizadas para status dos processos (seguindo padrão dos gráficos)\nconst STATUS_COLORS = {\n  'Em Andamento': [245, 158, 11],    // amarelo #F59E0B\n  'Concluído': [16, 185, 129],       // verde #10B981\n  'Cancelado': [240, 249, 255],      // azul claro quase branco #F0F9FF\n  'Atrasado': [239, 68, 68]          // vermelho #EF4444\n};\n\nconst CHART_COLORS = {\n  blue: [0, 136, 254],   // #0088FE\n  green: [0, 196, 159],  // #00C49F\n  yellow: [255, 187, 40], // #FFBB28\n  orange: [255, 128, 66], // #FF8042\n  purple: [136, 132, 216] // #8884d8\n};\n\n/**\n * Filtra os processos com base nos filtros selecionados\n */\nfunction filterReportData(data: ReportData): Process[] {\n  let filteredProcesses = [...data.processes];\n  \n  // Filtrar por mês\n  if (data.filters.month && data.filters.month !== \"all\") {\n    const monthIndex = parseInt(data.filters.month) - 1;\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processMonth = new Date(process.createdAt).getMonth();\n      return processMonth === monthIndex;\n    });\n  }\n  \n  // Filtrar por ano\n  if (data.filters.year) {\n    const year = parseInt(data.filters.year);\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processYear = new Date(process.createdAt).getFullYear();\n      return processYear === year;\n    });\n  }\n  \n  // Filtrar por departamento\n  if (data.filters.department && data.filters.department !== \"all\" && data.departments) {\n    const departmentId = parseInt(data.filters.department);\n    const department = data.departments.find(d => d.id === departmentId);\n    \n    if (department) {\n      filteredProcesses = filteredProcesses.filter(process => {\n        const user = data.users.find(u => u.id === process.responsibleId);\n        return user?.department === department.name;\n      });\n    }\n  }\n  \n  return filteredProcesses;\n}\n\n/**\n * Gera dados para o gráfico de status de processos\n */\nfunction getProcessStatusData(processes: Process[]) {\n  const statusCounts = {\n    draft: 0,\n    in_progress: 0,\n    completed: 0,\n    canceled: 0\n  };\n  \n  processes.forEach(process => {\n    if (process.status && statusCounts[process.status as keyof typeof statusCounts] !== undefined) {\n      statusCounts[process.status as keyof typeof statusCounts]++;\n    }\n  });\n  \n  return [\n    { name: \"Rascunho\", value: statusCounts.draft, color: CHART_COLORS.blue },\n    { name: \"Em Andamento\", value: statusCounts.in_progress, color: CHART_COLORS.green },\n    { name: \"Concluído\", value: statusCounts.completed, color: CHART_COLORS.yellow },\n    { name: \"Cancelado\", value: statusCounts.canceled, color: CHART_COLORS.orange }\n  ];\n}\n\n/**\n * Gera dados para o gráfico de modalidades de processos\n */\nfunction getProcessModalityData(processes: Process[], modalities: BiddingModality[]) {\n  const modalityCounts = new Map<number, number>();\n  \n  processes.forEach(process => {\n    const count = modalityCounts.get(process.modalityId) || 0;\n    modalityCounts.set(process.modalityId, count + 1);\n  });\n  \n  return Array.from(modalityCounts.entries()).map(([modalityId, count]) => {\n    const modality = modalities.find(m => m.id === modalityId);\n    return {\n      name: modality?.name || `Modalidade ${modalityId}`,\n      value: count,\n      color: CHART_COLORS.blue\n    };\n  });\n}\n\n/**\n * Gera dados para o gráfico de fontes de recursos\n */\nfunction getProcessSourceData(processes: Process[], sources: ResourceSource[]) {\n  const sourceCounts = new Map<number, number>();\n  \n  processes.forEach(process => {\n    const count = sourceCounts.get(process.sourceId) || 0;\n    sourceCounts.set(process.sourceId, count + 1);\n  });\n  \n  return Array.from(sourceCounts.entries()).map(([sourceId, count]) => {\n    const source = sources.find(s => s.id === sourceId);\n    return {\n      name: source ? `Fonte ${source.code}` : `Fonte ${sourceId}`,\n      value: count,\n      color: CHART_COLORS.green\n    };\n  });\n}\n\n/**\n * Gera dados para o gráfico de desempenho por usuário\n */\nfunction getUserPerformanceData(processes: Process[], users: User[]) {\n  const userStats = new Map<number, { total: number, completed: number }>();\n  \n  users.forEach(user => {\n    userStats.set(user.id, { total: 0, completed: 0 });\n  });\n  \n  processes.forEach(process => {\n    const userStat = userStats.get(process.responsibleId);\n    if (userStat) {\n      userStat.total++;\n      if (process.status === 'completed') {\n        userStat.completed++;\n      }\n    }\n  });\n  \n  return Array.from(userStats.entries())\n    .filter(([_, stats]) => stats.total > 0)\n    .map(([userId, stats]) => {\n      const user = users.find(u => u.id === userId);\n      return {\n        name: user ? user.fullName : `Usuário ${userId}`,\n        total: stats.total,\n        completed: stats.completed,\n        color: CHART_COLORS.purple\n      };\n    })\n    .sort((a, b) => b.total - a.total)\n    .slice(0, 5); // Limitar aos 5 usuários mais ativos\n}\n\n/**\n * Desenha um gráfico de pizza (pie chart) no PDF\n */\nfunction drawPieChart(\n  doc: jsPDF, \n  data: Array<{name: string, value: number, color: number[]}>, \n  title: string,\n  x: number, \n  y: number, \n  width: number, \n  height: number\n) {\n  // Título do gráfico\n  doc.setFontSize(12);\n  doc.setTextColor(0, 0, 0);\n  doc.text(title, x + width/2, y, { align: 'center' });\n  \n  // Verificar se há dados para desenhar\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  if (total === 0) {\n    doc.setFontSize(10);\n    doc.text('Não há dados disponíveis', x + width/2, y + height/2, { align: 'center' });\n    return;\n  }\n  \n  // Desenhar gráfico de pizza\n  const centerX = x + width/2;\n  const centerY = y + height/2 + 10;\n  const radius = Math.min(width, height) / 3;\n  \n  let startAngle = 0;\n  \n  // Desenhar setores da pizza\n  data.forEach((item, index) => {\n    if (item.value === 0) return;\n    \n    const portion = item.value / total;\n    const angle = portion * 360;\n    const endAngle = startAngle + angle;\n    \n    // Desenhar setor\n    doc.setFillColor(...item.color);\n    drawPieSlice(doc, centerX, centerY, radius, startAngle, endAngle);\n    \n    // Preparar para o próximo setor\n    startAngle = endAngle;\n  });\n  \n  // Adicionar legenda\n  const legendX = x + 10;\n  let legendY = y + height - 10;\n  const legendSquareSize = 5;\n  const legendSpacing = 15;\n  \n  doc.setFontSize(8);\n  data.forEach(item => {\n    if (item.value === 0) return;\n    \n    // Desenhar quadrado colorido\n    doc.setFillColor(...item.color);\n    doc.rect(legendX, legendY - legendSquareSize, legendSquareSize, legendSquareSize, 'F');\n    \n    // Adicionar texto da legenda\n    doc.setTextColor(0, 0, 0);\n    doc.text(`${item.name} (${Math.round((item.value / total) * 100)}%)`, legendX + legendSquareSize + 3, legendY);\n    \n    // Mover para o próximo item da legenda\n    legendY -= legendSpacing;\n  });\n}\n\n/**\n * Desenha um setor de gráfico de pizza\n */\nfunction drawPieSlice(doc: jsPDF, centerX: number, centerY: number, radius: number, startAngle: number, endAngle: number) {\n  // Converter ângulos para radianos\n  const startRad = (startAngle * Math.PI) / 180;\n  const endRad = (endAngle * Math.PI) / 180;\n  \n  // Calcular pontos\n  const startX = centerX + radius * Math.cos(startRad);\n  const startY = centerY + radius * Math.sin(startRad);\n  \n  // Criar o caminho\n  const path = new Path2D();\n  path.moveTo(centerX, centerY);\n  path.lineTo(startX, startY);\n  \n  // Usar segmentos para aproximar o arco (mais segmentos = mais suave)\n  const segments = Math.max(Math.ceil((endAngle - startAngle) / 5), 1);\n  for (let i = 1; i <= segments; i++) {\n    const angle = startRad + (i / segments) * (endRad - startRad);\n    const x = centerX + radius * Math.cos(angle);\n    const y = centerY + radius * Math.sin(angle);\n    \n    // Desenhar linha até o ponto no arco\n    doc.line(\n      path.currentX || centerX, \n      path.currentY || centerY, \n      x, \n      y\n    );\n  }\n  \n  // Fechar o caminho de volta ao centro\n  doc.line(\n    path.currentX || centerX, \n    path.currentY || centerY, \n    centerX, \n    centerY\n  );\n  \n  // Preencher o setor\n  // Como jsPDF não tem método fill() para paths complexos,\n  // usamos uma aproximação criando um triângulo do centro para o arco\n  doc.triangle(\n    centerX, \n    centerY, \n    startX, \n    startY, \n    centerX + radius * Math.cos((startRad + endRad) / 2), \n    centerY + radius * Math.sin((startRad + endRad) / 2), \n    'F'\n  );\n}\n\n/**\n * Desenha um gráfico de barras no PDF\n */\nfunction drawBarChart(\n  doc: jsPDF, \n  data: Array<{name: string, value: number, color: number[]}>, \n  title: string,\n  x: number, \n  y: number, \n  width: number, \n  height: number,\n  vertical: boolean = true\n) {\n  // Título do gráfico\n  doc.setFontSize(12);\n  doc.setTextColor(0, 0, 0);\n  doc.text(title, x + width/2, y, { align: 'center' });\n  \n  // Verificar se há dados para desenhar\n  if (data.length === 0) {\n    doc.setFontSize(10);\n    doc.text('Não há dados disponíveis', x + width/2, y + height/2, { align: 'center' });\n    return;\n  }\n  \n  // Encontrar valor máximo para escala\n  const maxValue = Math.max(...data.map(item => item.value));\n  \n  if (vertical) {\n    // Gráfico de barras verticais\n    \n    // Calcular dimensões\n    const chartAreaHeight = height * 0.7;\n    const chartAreaY = y + 20;\n    const barWidth = (width - 20) / (data.length * 2); // Espaço entre barras\n    const maxBarHeight = chartAreaHeight - 20;\n    \n    // Desenhar linha de base\n    doc.setDrawColor(200, 200, 200);\n    doc.setLineWidth(0.5);\n    doc.line(x + 10, chartAreaY + chartAreaHeight - 15, x + width - 10, chartAreaY + chartAreaHeight - 15);\n    \n    // Desenhar barras\n    data.forEach((item, index) => {\n      const normalizedValue = maxValue > 0 ? item.value / maxValue : 0;\n      const barHeight = normalizedValue * maxBarHeight;\n      const barX = x + 10 + (index * 2 + 1) * barWidth;\n      const barY = chartAreaY + chartAreaHeight - 15 - barHeight;\n      \n      // Desenhar barra\n      doc.setFillColor(...item.color);\n      doc.rect(barX, barY, barWidth, barHeight, 'F');\n      \n      // Adicionar rótulo abaixo da barra\n      doc.setFontSize(8);\n      doc.setTextColor(0, 0, 0);\n      // Truncar nomes longos\n      const displayName = item.name.length > 10 ? item.name.substring(0, 10) + '...' : item.name;\n      doc.text(displayName, barX + barWidth/2, chartAreaY + chartAreaHeight - 8, { align: 'center' });\n    });\n    \n    // Adicionar legendas para valores\n    doc.setFontSize(7);\n    doc.setTextColor(100, 100, 100);\n    for (let i = 0; i <= 1; i += 0.25) {\n      const valueY = chartAreaY + chartAreaHeight - 15 - (i * maxBarHeight);\n      const value = Math.round(i * maxValue * 100) / 100;\n      doc.text(value.toString(), x + 5, valueY, { align: 'right' });\n      \n      // Linha pontilhada opcional\n      /*\n      doc.setLineDashPattern([1, 1], 0);\n      doc.line(x + 10, valueY, x + width - 10, valueY);\n      doc.setLineDashPattern([], 0);\n      */\n    }\n  } else {\n    // Gráfico de barras horizontais\n    \n    // Calcular dimensões\n    const chartStartX = x + 50; // Espaço para rótulos à esquerda\n    const barHeight = 12;\n    const barGap = 8;\n    const maxBarWidth = width - 60; // Espaço para valores à direita\n    \n    // Desenhar barras\n    data.forEach((item, index) => {\n      const normalizedValue = maxValue > 0 ? item.value / maxValue : 0;\n      const barWidth = normalizedValue * maxBarWidth;\n      const barY = y + 30 + (index * (barHeight + barGap));\n      \n      // Desenhar barra\n      doc.setFillColor(...item.color);\n      doc.rect(chartStartX, barY, barWidth, barHeight, 'F');\n      \n      // Adicionar rótulo à esquerda\n      doc.setFontSize(8);\n      doc.setTextColor(0, 0, 0);\n      // Truncar nomes longos\n      const displayName = item.name.length > 15 ? item.name.substring(0, 15) + '...' : item.name;\n      doc.text(displayName, chartStartX - 3, barY + barHeight/2 + 3, { align: 'right' });\n      \n      // Adicionar valor à direita\n      doc.text(item.value.toString(), chartStartX + barWidth + 5, barY + barHeight/2 + 3);\n    });\n  }\n  \n  // Adicionar legenda do gráfico\n  const legendX = x + 10;\n  const legendY = y + height - 10;\n  \n  // Adicionar título da legenda (opcional)\n  doc.setFontSize(8);\n  doc.text('Quantidade', legendX, legendY);\n  \n  // Desenhar quadrado colorido da legenda\n  if (data.length > 0) {\n    doc.setFillColor(...data[0].color);\n    doc.rect(legendX, legendY - 8, 5, 5, 'F');\n  }\n}\n\n/**\n * Desenha um gráfico de barras horizontais para desempenho de usuário\n */\nfunction drawUserPerformanceChart(\n  doc: jsPDF, \n  data: Array<{name: string, total: number, completed: number, color: number[]}>, \n  title: string,\n  x: number, \n  y: number, \n  width: number, \n  height: number\n) {\n  // Título do gráfico\n  doc.setFontSize(12);\n  doc.setTextColor(0, 0, 0);\n  doc.text(title, x + width/2, y, { align: 'center' });\n  \n  // Verificar se há dados para desenhar\n  if (data.length === 0) {\n    doc.setFontSize(10);\n    doc.text('Não há dados disponíveis', x + width/2, y + height/2, { align: 'center' });\n    return;\n  }\n  \n  // Encontrar valor máximo para escala\n  const maxValue = Math.max(...data.map(item => item.total));\n  \n  // Calcular dimensões\n  const chartStartX = x + 70; // Espaço para rótulos à esquerda\n  const barHeight = 10;\n  const barGap = 10;\n  const maxBarWidth = width - 80; // Espaço para valores à direita\n  \n  // Desenhar barras\n  data.forEach((item, index) => {\n    const normalizedTotal = maxValue > 0 ? item.total / maxValue : 0;\n    const normalizedCompleted = maxValue > 0 ? item.completed / maxValue : 0;\n    \n    const totalBarWidth = normalizedTotal * maxBarWidth;\n    const completedBarWidth = normalizedCompleted * maxBarWidth;\n    \n    const barY = y + 30 + (index * (barHeight + barGap));\n    \n    // Desenhar barra do total\n    doc.setFillColor(120, 120, 200); // Cor para total\n    doc.rect(chartStartX, barY, totalBarWidth, barHeight, 'F');\n    \n    // Desenhar barra de concluídos (sobreposta)\n    doc.setFillColor(100, 200, 100); // Cor para concluídos\n    doc.rect(chartStartX, barY + barHeight/2, completedBarWidth, barHeight/2, 'F');\n    \n    // Adicionar rótulo à esquerda\n    doc.setFontSize(8);\n    doc.setTextColor(0, 0, 0);\n    // Truncar nomes longos\n    const displayName = item.name.length > 15 ? item.name.substring(0, 15) + '...' : item.name;\n    doc.text(displayName, chartStartX - 3, barY + barHeight/2 + 3, { align: 'right' });\n    \n    // Adicionar valores à direita\n    doc.text(`${item.total}`, chartStartX + totalBarWidth + 5, barY + barHeight/2);\n    doc.text(`${item.completed}`, chartStartX + completedBarWidth + 5, barY + barHeight);\n  });\n  \n  // Adicionar legenda\n  const legendX = x + 10;\n  const legendY = y + height - 15;\n  \n  // Total\n  doc.setFillColor(120, 120, 200); // Cor para total\n  doc.rect(legendX, legendY - 8, 5, 5, 'F');\n  doc.setFontSize(8);\n  doc.text('Total', legendX + 8, legendY - 5);\n  \n  // Concluídos\n  doc.setFillColor(100, 200, 100); // Cor para concluídos\n  doc.rect(legendX + 40, legendY - 8, 5, 5, 'F');\n  doc.text('Concluídos', legendX + 48, legendY - 5);\n}\n\n/**\n * Gera um relatório PDF com os mesmos gráficos mostrados na interface\n */\nexport function generatePdfReport(data: ReportData): void {\n  try {\n    // Preparar dados\n    const filteredProcesses = filterReportData(data);\n    \n    // Criar documento PDF\n    const doc = new jsPDF();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n    const margin = 15;\n    const usableWidth = pageWidth - (2 * margin);\n    \n    // Preparar dados para os gráficos\n    const statusData = getProcessStatusData(filteredProcesses);\n    const modalityData = getProcessModalityData(filteredProcesses, data.modalities);\n    const sourceData = getProcessSourceData(filteredProcesses, data.sources);\n    const userPerformanceData = getUserPerformanceData(filteredProcesses, data.users);\n    \n    // Configurar layout da página\n    const cardWidth = usableWidth / 2 - 5;\n    const cardHeight = 130;\n    \n    // Título do relatório\n    doc.setFontSize(16);\n    doc.setTextColor(0, 0, 0);\n    doc.text('Relatório de Processos', pageWidth / 2, margin, { align: 'center' });\n    \n    // Data de geração\n    doc.setFontSize(10);\n    doc.setTextColor(100, 100, 100);\n    const today = new Date().toLocaleDateString('pt-BR');\n    doc.text(`Gerado em: ${today}`, pageWidth - margin, margin, { align: 'right' });\n    \n    // Desenhar gráficos (2x2 grid)\n    // Primeira linha\n    drawPieChart(doc, statusData, 'Processos por Status', \n      margin, margin + 15, cardWidth, cardHeight);\n    \n    drawBarChart(doc, modalityData, 'Processos por Modalidade', \n      margin + cardWidth + 10, margin + 15, cardWidth, cardHeight);\n    \n    // Segunda linha\n    drawBarChart(doc, sourceData, 'Processos por Fonte', \n      margin, margin + cardHeight + 25, cardWidth, cardHeight, false);\n    \n    drawUserPerformanceChart(doc, userPerformanceData, 'Desempenho por Usuário', \n      margin + cardWidth + 10, margin + cardHeight + 25, cardWidth, cardHeight);\n    \n    // Adicionar tabela com dados dos processos na segunda página\n    if (data.reportType === 'processes' && filteredProcesses.length > 0) {\n      doc.addPage();\n      \n      // Título da tabela\n      doc.setFontSize(14);\n      doc.text('Lista de Processos', pageWidth / 2, margin, { align: 'center' });\n      \n      // Preparar dados da tabela\n      const tableData = filteredProcesses.map(process => {\n        const modality = data.modalities.find(m => m.id === process.modalityId);\n        const source = data.sources.find(s => s.id === process.sourceId);\n        const responsible = data.users.find(u => u.id === process.responsibleId);\n        \n        return [\n          process.pbdocNumber,\n          process.description.length > 30 ? process.description.substring(0, 30) + '...' : process.description,\n          modality?.name || `Modalidade ${process.modalityId}`,\n          source?.code || `Fonte ${process.sourceId}`,\n          responsible?.fullName || `Usuário ${process.responsibleId}`,\n          getStatusLabel(process.status),\n          getPriorityLabel(process.priority),\n          new Date(process.createdAt).toLocaleDateString('pt-BR')\n        ];\n      });\n      \n      // Desenhar tabela\n      autoTable(doc, {\n        startY: margin + 10,\n        head: [['PBDOC', 'Descrição', 'Modalidade', 'Fonte', 'Responsável', 'Status', 'Prioridade', 'Data Criação']],\n        body: tableData,\n        theme: 'striped',\n        styles: { fontSize: 8 },\n        headStyles: { fillColor: [0, 51, 102], textColor: [255, 255, 255] },\n        margin: { top: margin, right: margin, bottom: margin, left: margin }\n      });\n    }\n    \n    // Adicionar rodapé com número de página em todas as páginas\n    const pageCount = doc.getNumberOfPages();\n    for (let i = 1; i <= pageCount; i++) {\n      doc.setPage(i);\n      doc.setFontSize(8);\n      doc.setTextColor(100, 100, 100);\n      doc.text(\n        `SEAP-PB - Sistema de Controle de Processos de Licitação - Página ${i} de ${pageCount}`,\n        pageWidth / 2,\n        pageHeight - 10,\n        { align: 'center' }\n      );\n    }\n    \n    // Salvar o PDF\n    doc.save(`relatorio-processos-${new Date().toISOString().slice(0, 10)}.pdf`);\n  } catch (error) {\n    console.error('Erro ao gerar relatório PDF:', error);\n    alert('Ocorreu um erro ao gerar o relatório. Por favor, tente novamente.');\n  }\n}\n\n/**\n * Função auxiliar para obter o label de status\n */\nfunction getStatusLabel(status: string): string {\n  const statusLabels: Record<string, string> = {\n    'draft': 'Rascunho',\n    'in_progress': 'Em Andamento',\n    'completed': 'Concluído',\n    'canceled': 'Cancelado'\n  };\n  return statusLabels[status] || status;\n}\n\n/**\n * Função auxiliar para obter o label de prioridade\n */\nfunction getPriorityLabel(priority: string): string {\n  const priorityLabels: Record<string, string> = {\n    'low': 'Baixa',\n    'medium': 'Média',\n    'high': 'Alta'\n  };\n  return priorityLabels[priority] || priority;\n}\n\n/**\n * Exporta o dataset para arquivo Excel (não implementado)\n */\nexport function generateExcelReport(data: ReportData): void {\n  console.log('Exportação para Excel não implementada');\n  alert('Exportação para Excel ainda não está implementada. Por favor, use a exportação para PDF.');\n}","size_bytes":20906},"client/src/lib/utils/exactReportExport.ts":{"content":"import { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport { Process, User, BiddingModality, ResourceSource, Department } from \"@shared/schema\";\nimport autoTable from 'jspdf-autotable';\n\ninterface ReportData {\n  processes: Process[];\n  users: User[];\n  modalities: BiddingModality[];\n  sources: ResourceSource[];\n  departments?: Department[];\n  filters: {\n    department?: string;\n    month?: string;\n    year?: string;\n  };\n  reportType: string;\n}\n\n// Cores utilizadas nos gráficos\n// Cores padronizadas para status dos processos (seguindo padrão dos gráficos)\nconst STATUS_COLORS = {\n  'Em Andamento': '#F59E0B',    // amarelo\n  'Concluído': '#10B981',       // verde\n  'Cancelado': '#F0F9FF',       // azul claro quase branco\n  'Atrasado': '#EF4444'         // vermelho\n};\n\nconst CHART_COLORS = {\n  blue: '#0088FE',     // Azul\n  green: '#00C49F',    // Verde\n  yellow: '#FFBB28',   // Amarelo\n  orange: '#FF8042',   // Laranja\n  purple: '#8884d8'    // Roxo\n};\n\n/**\n * Filtra os processos com base nos filtros selecionados\n */\nfunction filterReportData(data: ReportData): Process[] {\n  let filteredProcesses = [...data.processes];\n  \n  // Filtrar por mês\n  if (data.filters.month && data.filters.month !== \"all\") {\n    const monthIndex = parseInt(data.filters.month) - 1;\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processMonth = new Date(process.createdAt).getMonth();\n      return processMonth === monthIndex;\n    });\n  }\n  \n  // Filtrar por ano\n  if (data.filters.year) {\n    const year = parseInt(data.filters.year);\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processYear = new Date(process.createdAt).getFullYear();\n      return processYear === year;\n    });\n  }\n  \n  // Filtrar por departamento\n  if (data.filters.department && data.filters.department !== \"all\" && data.departments) {\n    const departmentId = parseInt(data.filters.department);\n    const department = data.departments.find(d => d.id === departmentId);\n    \n    if (department) {\n      filteredProcesses = filteredProcesses.filter(process => {\n        const user = data.users.find(u => u.id === process.responsibleId);\n        return user?.department === department.name;\n      });\n    }\n  }\n  \n  return filteredProcesses;\n}\n\n/**\n * Gera dados para o gráfico de status de processos\n */\nfunction getProcessStatusData(processes: Process[]) {\n  const statusCounts = {\n    draft: 0,\n    in_progress: 0,\n    completed: 0,\n    canceled: 0\n  };\n  \n  processes.forEach(process => {\n    if (process.status && statusCounts[process.status as keyof typeof statusCounts] !== undefined) {\n      statusCounts[process.status as keyof typeof statusCounts]++;\n    }\n  });\n  \n  return [\n    { name: \"Rascunho\", value: statusCounts.draft, color: CHART_COLORS.blue },\n    { name: \"Em Andamento\", value: statusCounts.in_progress, color: CHART_COLORS.green },\n    { name: \"Concluído\", value: statusCounts.completed, color: CHART_COLORS.yellow },\n    { name: \"Cancelado\", value: statusCounts.canceled, color: CHART_COLORS.orange }\n  ];\n}\n\n/**\n * Gera dados para o gráfico de modalidades de processos\n */\nfunction getProcessModalityData(processes: Process[], modalities: BiddingModality[]) {\n  const modalityCounts = new Map<number, number>();\n  \n  processes.forEach(process => {\n    const count = modalityCounts.get(process.modalityId) || 0;\n    modalityCounts.set(process.modalityId, count + 1);\n  });\n  \n  return Array.from(modalityCounts.entries()).map(([modalityId, count]) => {\n    const modality = modalities.find(m => m.id === modalityId);\n    return {\n      name: modality?.name || `Modalidade ${modalityId}`,\n      value: count,\n      color: CHART_COLORS.blue\n    };\n  });\n}\n\n/**\n * Gera dados para o gráfico de fontes de recursos\n */\nfunction getProcessSourceData(processes: Process[], sources: ResourceSource[]) {\n  const sourceCounts = new Map<number, number>();\n  \n  processes.forEach(process => {\n    const count = sourceCounts.get(process.sourceId) || 0;\n    sourceCounts.set(process.sourceId, count + 1);\n  });\n  \n  return Array.from(sourceCounts.entries()).map(([sourceId, count]) => {\n    const source = sources.find(s => s.id === sourceId);\n    return {\n      name: source ? `Fonte ${source.code}` : `Fonte ${sourceId}`,\n      value: count,\n      color: CHART_COLORS.green\n    };\n  });\n}\n\n/**\n * Gera dados para o gráfico de desempenho por usuário\n */\nfunction getUserPerformanceData(processes: Process[], users: User[]) {\n  const userStats = new Map<number, { total: number, completed: number }>();\n  \n  users.forEach(user => {\n    userStats.set(user.id, { total: 0, completed: 0 });\n  });\n  \n  processes.forEach(process => {\n    const userStat = userStats.get(process.responsibleId);\n    if (userStat) {\n      userStat.total++;\n      if (process.status === 'completed') {\n        userStat.completed++;\n      }\n    }\n  });\n  \n  return Array.from(userStats.entries())\n    .filter(([_, stats]) => stats.total > 0)\n    .map(([userId, stats]) => {\n      const user = users.find(u => u.id === userId);\n      return {\n        name: user ? user.fullName : `Usuário ${userId}`,\n        total: stats.total,\n        completed: stats.completed,\n        color: CHART_COLORS.purple\n      };\n    })\n    .sort((a, b) => b.total - a.total)\n    .slice(0, 5); // Limitar aos 5 usuários mais ativos\n}\n\n/**\n * Desenha um gráfico de pizza simplificado\n */\nfunction drawPieChart(\n  doc: jsPDF, \n  data: Array<{name: string, value: number, color: string}>, \n  title: string,\n  x: number, \n  y: number, \n  width: number, \n  height: number\n) {\n  // Título do gráfico\n  doc.setFontSize(12);\n  doc.setTextColor(0, 0, 0);\n  doc.text(title, x + width/2, y, { align: 'center' });\n  \n  // Verificar se há dados para desenhar\n  const total = data.reduce((sum, item) => sum + item.value, 0);\n  if (total === 0) {\n    doc.setFontSize(10);\n    doc.text('Não há dados disponíveis', x + width/2, y + height/2, { align: 'center' });\n    return;\n  }\n  \n  // Configurações para o desenho do gráfico\n  const centerX = x + width/2;\n  const centerY = y + height/2;\n  const radius = Math.min(width, height) / 3;\n  \n  // Simplificado: Desenhar apenas um círculo colorido para representar\n  // Usamos o primeiro item com valor não zero\n  const firstItemWithValue = data.find(item => item.value > 0);\n  if (firstItemWithValue) {\n    // Converter cor de hexadecimal para RGB\n    const color = firstItemWithValue.color;\n    const r = parseInt(color.slice(1, 3), 16);\n    const g = parseInt(color.slice(3, 5), 16);\n    const b = parseInt(color.slice(5, 7), 16);\n    \n    doc.setFillColor(r, g, b);\n    doc.circle(centerX, centerY, radius, 'F');\n    \n    // Adicionar buraco no centro para parecer uma rosca\n    doc.setFillColor(255, 255, 255);\n    doc.circle(centerX, centerY, radius * 0.5, 'F');\n  }\n  \n  // Adicionar legendas abaixo do gráfico\n  let legendY = y + height - 20;\n  const legendX = x + 20;\n  const legendItemHeight = 12;\n  const legendSquareSize = 8;\n  \n  // Ordenar os itens por valor (do maior para o menor)\n  const sortedData = [...data].filter(item => item.value > 0)\n    .sort((a, b) => b.value - a.value);\n  \n  sortedData.forEach((item, index) => {\n    const itemPercentage = (item.value / total) * 100;\n    if (itemPercentage > 0) {\n      // Converter cor\n      const color = item.color;\n      const r = parseInt(color.slice(1, 3), 16);\n      const g = parseInt(color.slice(3, 5), 16);\n      const b = parseInt(color.slice(5, 7), 16);\n      \n      // Desenhar quadrado de cor\n      doc.setFillColor(r, g, b);\n      doc.rect(legendX, legendY, legendSquareSize, legendSquareSize, 'F');\n      \n      // Adicionar texto da legenda\n      doc.setFontSize(8);\n      doc.setTextColor(0, 0, 0);\n      doc.text(\n        `${item.name} (${itemPercentage.toFixed(0)}%)`, \n        legendX + legendSquareSize + 5, \n        legendY + legendSquareSize/2 + 2\n      );\n      \n      // Mover para o próximo item\n      legendY += legendItemHeight;\n    }\n  });\n}\n\n/**\n * Desenha um gráfico de barras simplificado\n */\nfunction drawBarChart(\n  doc: jsPDF, \n  data: Array<{name: string, value: number, color: string}>, \n  title: string,\n  x: number, \n  y: number, \n  width: number, \n  height: number,\n  isVertical: boolean = true\n) {\n  // Título do gráfico\n  doc.setFontSize(12);\n  doc.setTextColor(0, 0, 0);\n  doc.text(title, x + width/2, y, { align: 'center' });\n  \n  // Verificar se há dados para desenhar\n  if (data.length === 0) {\n    doc.setFontSize(10);\n    doc.text('Não há dados disponíveis', x + width/2, y + height/2, { align: 'center' });\n    return;\n  }\n  \n  // Encontrar valor máximo\n  const maxValue = Math.max(...data.map(item => item.value), 1);\n  \n  if (isVertical) {\n    // Gráfico de barras verticais\n    const chartTop = y + 20;\n    const chartBottom = y + height - 30;\n    const chartLeft = x + 40;\n    const chartRight = x + width - 20;\n    const chartHeight = chartBottom - chartTop;\n    const chartWidth = chartRight - chartLeft;\n    \n    // Desenhar eixo Y\n    doc.setDrawColor(200, 200, 200);\n    doc.setLineWidth(0.5);\n    doc.line(chartLeft, chartTop, chartLeft, chartBottom);\n    \n    // Desenhar eixo X\n    doc.line(chartLeft, chartBottom, chartRight, chartBottom);\n    \n    // Desenhar barras\n    const barWidth = chartWidth / data.length / 2;\n    const barGap = barWidth;\n    \n    data.forEach((item, index) => {\n      // Converter cor de hexadecimal para RGB\n      const color = item.color;\n      const r = parseInt(color.slice(1, 3), 16);\n      const g = parseInt(color.slice(3, 5), 16);\n      const b = parseInt(color.slice(5, 7), 16);\n      \n      const barX = chartLeft + barGap + index * (barWidth + barGap);\n      const barHeight = (item.value / maxValue) * chartHeight;\n      const barY = chartBottom - barHeight;\n      \n      // Desenhar a barra\n      doc.setFillColor(r, g, b);\n      doc.rect(barX, barY, barWidth, barHeight, 'F');\n      \n      // Adicionar rótulo abaixo da barra\n      doc.setFontSize(7);\n      doc.setTextColor(0, 0, 0);\n      // Truncar nomes longos\n      const displayName = item.name.length > 10 ? item.name.substring(0, 10) + '...' : item.name;\n      doc.text(displayName, barX + barWidth/2, chartBottom + 10, { align: 'center' });\n    });\n    \n    // Adicionar escala no eixo Y (opcional)\n    doc.setFontSize(7);\n    for (let i = 0; i <= 1; i += 0.25) {\n      const value = Math.round(maxValue * i);\n      const yPos = chartBottom - i * chartHeight;\n      doc.text(value.toString(), chartLeft - 5, yPos, { align: 'right' });\n      \n      // Linha pontilhada horizontal opcional\n      /*\n      doc.setLineDashPattern([1, 1], 0);\n      doc.line(chartLeft, yPos, chartRight, yPos);\n      doc.setLineDashPattern([], 0);\n      */\n    }\n    \n    // Adicionar título da legenda\n    const legendX = x + 20;\n    const legendY = y + height - 10;\n    doc.setFontSize(7);\n    doc.text('Quantidade', legendX, legendY);\n    \n    // Desenhar quadrado de legenda\n    if (data.length > 0) {\n      const color = data[0].color;\n      const r = parseInt(color.slice(1, 3), 16);\n      const g = parseInt(color.slice(3, 5), 16);\n      const b = parseInt(color.slice(5, 7), 16);\n      \n      doc.setFillColor(r, g, b);\n      doc.rect(legendX + 35, legendY - 7, 8, 8, 'F');\n    }\n  } else {\n    // Gráfico de barras horizontais\n    const chartTop = y + 20;\n    const chartBottom = y + height - 30;\n    const chartLeft = x + 60; // Espaço para rótulos\n    const chartRight = x + width - 20;\n    const chartHeight = chartBottom - chartTop;\n    const chartWidth = chartRight - chartLeft;\n    \n    // Desenhar barras\n    const barHeight = chartHeight / data.length / 2;\n    const barGap = barHeight;\n    let currentY = chartTop + barGap;\n    \n    data.forEach((item, index) => {\n      // Converter cor de hexadecimal para RGB\n      const color = item.color;\n      const r = parseInt(color.slice(1, 3), 16);\n      const g = parseInt(color.slice(3, 5), 16);\n      const b = parseInt(color.slice(5, 7), 16);\n      \n      const barWidth = (item.value / maxValue) * chartWidth;\n      \n      // Desenhar a barra\n      doc.setFillColor(r, g, b);\n      doc.rect(chartLeft, currentY, barWidth, barHeight, 'F');\n      \n      // Adicionar rótulo à esquerda da barra\n      doc.setFontSize(7);\n      doc.setTextColor(0, 0, 0);\n      // Truncar nomes longos\n      const displayName = item.name.length > 15 ? item.name.substring(0, 15) + '...' : item.name;\n      doc.text(displayName, chartLeft - 5, currentY + barHeight/2 + 2, { align: 'right' });\n      \n      // Adicionar valor à direita da barra\n      doc.text(item.value.toString(), chartLeft + barWidth + 5, currentY + barHeight/2 + 2);\n      \n      // Mover para a próxima barra\n      currentY += barHeight + barGap;\n    });\n    \n    // Adicionar título da legenda\n    const legendX = x + 20;\n    const legendY = y + height - 10;\n    doc.setFontSize(7);\n    doc.text('Quantidade', legendX, legendY);\n    \n    // Desenhar quadrado de legenda\n    if (data.length > 0) {\n      const color = data[0].color;\n      const r = parseInt(color.slice(1, 3), 16);\n      const g = parseInt(color.slice(3, 5), 16);\n      const b = parseInt(color.slice(5, 7), 16);\n      \n      doc.setFillColor(r, g, b);\n      doc.rect(legendX + 35, legendY - 7, 8, 8, 'F');\n    }\n  }\n}\n\n/**\n * Desenha um gráfico de desempenho por usuário\n */\nfunction drawUserPerformanceChart(\n  doc: jsPDF, \n  data: Array<{name: string, total: number, completed: number, color: string}>, \n  title: string,\n  x: number, \n  y: number, \n  width: number, \n  height: number\n) {\n  // Título do gráfico\n  doc.setFontSize(12);\n  doc.setTextColor(0, 0, 0);\n  doc.text(title, x + width/2, y, { align: 'center' });\n  \n  // Verificar se há dados para desenhar\n  if (data.length === 0) {\n    doc.setFontSize(10);\n    doc.text('Não há dados disponíveis', x + width/2, y + height/2, { align: 'center' });\n    return;\n  }\n  \n  // Encontrar valor máximo\n  const maxValue = Math.max(...data.map(item => item.total), 1);\n  \n  // Configurações\n  const chartTop = y + 20;\n  const chartBottom = y + height - 30;\n  const chartLeft = x + 60; // Espaço para rótulos\n  const chartRight = x + width - 30; // Espaço para valores\n  const chartHeight = chartBottom - chartTop;\n  const chartWidth = chartRight - chartLeft;\n  \n  // Desenhar barras\n  const barHeight = chartHeight / data.length / 3;\n  const barGap = barHeight * 2;\n  let currentY = chartTop + barGap;\n  \n  data.forEach((item, index) => {\n    // Converter cor de hexadecimal para RGB\n    const colorTotal = CHART_COLORS.purple;\n    const colorCompleted = CHART_COLORS.green;\n    \n    const rTotal = parseInt(colorTotal.slice(1, 3), 16);\n    const gTotal = parseInt(colorTotal.slice(3, 5), 16);\n    const bTotal = parseInt(colorTotal.slice(5, 7), 16);\n    \n    const rCompleted = parseInt(colorCompleted.slice(1, 3), 16);\n    const gCompleted = parseInt(colorCompleted.slice(3, 5), 16);\n    const bCompleted = parseInt(colorCompleted.slice(5, 7), 16);\n    \n    const barWidthTotal = (item.total / maxValue) * chartWidth;\n    const barWidthCompleted = (item.completed / maxValue) * chartWidth;\n    \n    // Desenhar barra total\n    doc.setFillColor(rTotal, gTotal, bTotal);\n    doc.rect(chartLeft, currentY, barWidthTotal, barHeight, 'F');\n    \n    // Desenhar barra completada (menor)\n    doc.setFillColor(rCompleted, gCompleted, bCompleted);\n    doc.rect(chartLeft, currentY + barHeight, barWidthCompleted, barHeight/2, 'F');\n    \n    // Adicionar rótulo à esquerda\n    doc.setFontSize(7);\n    doc.setTextColor(0, 0, 0);\n    // Truncar nomes longos\n    const displayName = item.name.length > 15 ? item.name.substring(0, 15) + '...' : item.name;\n    doc.text(displayName, chartLeft - 5, currentY + barHeight/2, { align: 'right' });\n    \n    // Adicionar valores à direita\n    doc.text(item.total.toString(), chartLeft + barWidthTotal + 5, currentY + barHeight/2);\n    doc.text(item.completed.toString(), chartLeft + barWidthCompleted + 5, currentY + barHeight + barHeight/4);\n    \n    // Mover para a próxima barra\n    currentY += barHeight + barGap;\n  });\n  \n  // Adicionar legenda\n  const legendX = x + 20;\n  const legendY = y + height - 10;\n  \n  // Total\n  const rTotal = parseInt(CHART_COLORS.purple.slice(1, 3), 16);\n  const gTotal = parseInt(CHART_COLORS.purple.slice(3, 5), 16);\n  const bTotal = parseInt(CHART_COLORS.purple.slice(5, 7), 16);\n  \n  doc.setFillColor(rTotal, gTotal, bTotal);\n  doc.rect(legendX, legendY - 7, 8, 8, 'F');\n  doc.setFontSize(7);\n  doc.text('Total', legendX + 12, legendY - 2);\n  \n  // Concluídos\n  const rCompleted = parseInt(CHART_COLORS.green.slice(1, 3), 16);\n  const gCompleted = parseInt(CHART_COLORS.green.slice(3, 5), 16);\n  const bCompleted = parseInt(CHART_COLORS.green.slice(5, 7), 16);\n  \n  doc.setFillColor(rCompleted, gCompleted, bCompleted);\n  doc.rect(legendX + 35, legendY - 7, 8, 8, 'F');\n  doc.text('Concluídos', legendX + 47, legendY - 2);\n}\n\n/**\n * Gera um relatório PDF com os mesmos gráficos mostrados na interface\n */\nexport function generatePdfReport(data: ReportData): void {\n  try {\n    // Preparar dados\n    const filteredProcesses = filterReportData(data);\n    \n    // Criar documento PDF\n    const doc = new jsPDF();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n    const margin = 15;\n    const usableWidth = pageWidth - (2 * margin);\n    \n    // Preparar dados para os gráficos\n    const statusData = getProcessStatusData(filteredProcesses);\n    const modalityData = getProcessModalityData(filteredProcesses, data.modalities);\n    const sourceData = getProcessSourceData(filteredProcesses, data.sources);\n    const userPerformanceData = getUserPerformanceData(filteredProcesses, data.users);\n    \n    // Configurar layout da página\n    const cardWidth = usableWidth / 2 - 5;\n    const cardHeight = 130;\n    \n    // Título do relatório\n    doc.setFontSize(16);\n    doc.setTextColor(0, 0, 0);\n    doc.text('Relatório de Processos', pageWidth / 2, margin, { align: 'center' });\n    \n    // Data de geração\n    doc.setFontSize(10);\n    doc.setTextColor(100, 100, 100);\n    const today = new Date().toLocaleDateString('pt-BR');\n    doc.text(`Gerado em: ${today}`, pageWidth - margin, margin, { align: 'right' });\n    \n    // Desenhar gráficos (2x2 grid)\n    // Primeira linha\n    drawPieChart(\n      doc, \n      statusData, \n      'Processos por Status', \n      margin, \n      margin + 15, \n      cardWidth, \n      cardHeight\n    );\n    \n    drawBarChart(\n      doc, \n      modalityData, \n      'Processos por Modalidade', \n      margin + cardWidth + 10, \n      margin + 15, \n      cardWidth, \n      cardHeight\n    );\n    \n    // Segunda linha\n    drawBarChart(\n      doc, \n      sourceData, \n      'Processos por Fonte', \n      margin, \n      margin + cardHeight + 25, \n      cardWidth, \n      cardHeight,\n      false\n    );\n    \n    drawUserPerformanceChart(\n      doc, \n      userPerformanceData, \n      'Desempenho por Usuário', \n      margin + cardWidth + 10, \n      margin + cardHeight + 25, \n      cardWidth, \n      cardHeight\n    );\n    \n    // Adicionar tabela com dados dos processos na segunda página\n    if (data.reportType === 'processes' && filteredProcesses.length > 0) {\n      doc.addPage();\n      \n      // Título da tabela\n      doc.setFontSize(14);\n      doc.text('Lista de Processos', pageWidth / 2, margin, { align: 'center' });\n      \n      // Preparar dados da tabela\n      const tableData = filteredProcesses.map(process => {\n        const modality = data.modalities.find(m => m.id === process.modalityId);\n        const source = data.sources.find(s => s.id === process.sourceId);\n        const responsible = data.users.find(u => u.id === process.responsibleId);\n        \n        return [\n          process.pbdocNumber,\n          process.description.length > 30 ? process.description.substring(0, 30) + '...' : process.description,\n          modality?.name || `Modalidade ${process.modalityId}`,\n          source?.code || `Fonte ${process.sourceId}`,\n          responsible?.fullName || `Usuário ${process.responsibleId}`,\n          getStatusLabel(process.status),\n          getPriorityLabel(process.priority),\n          new Date(process.createdAt).toLocaleDateString('pt-BR')\n        ];\n      });\n      \n      // Desenhar tabela\n      autoTable(doc, {\n        startY: margin + 10,\n        head: [['PBDOC', 'Descrição', 'Modalidade', 'Fonte', 'Responsável', 'Status', 'Prioridade', 'Data Criação']],\n        body: tableData,\n        theme: 'striped',\n        styles: { fontSize: 8 },\n        headStyles: { fillColor: [0, 51, 102], textColor: [255, 255, 255] },\n        margin: { top: margin, right: margin, bottom: margin, left: margin }\n      });\n    }\n    \n    // Adicionar rodapé com número de página em todas as páginas\n    const pageCount = doc.getNumberOfPages();\n    for (let i = 1; i <= pageCount; i++) {\n      doc.setPage(i);\n      doc.setFontSize(8);\n      doc.setTextColor(100, 100, 100);\n      doc.text(\n        `SEAP-PB - Sistema de Controle de Processos de Licitação - Página ${i} de ${pageCount}`,\n        pageWidth / 2,\n        pageHeight - 10,\n        { align: 'center' }\n      );\n    }\n    \n    // Salvar o PDF\n    doc.save(`relatorio-processos-${new Date().toISOString().slice(0, 10)}.pdf`);\n  } catch (error) {\n    console.error('Erro ao gerar relatório PDF:', error);\n    alert('Ocorreu um erro ao gerar o relatório. Por favor, tente novamente.');\n  }\n}\n\n/**\n * Função auxiliar para obter o label de status\n */\nfunction getStatusLabel(status: string): string {\n  const statusLabels: Record<string, string> = {\n    'draft': 'Rascunho',\n    'in_progress': 'Em Andamento',\n    'completed': 'Concluído',\n    'canceled': 'Cancelado'\n  };\n  return statusLabels[status] || status;\n}\n\n/**\n * Função auxiliar para obter o label de prioridade\n */\nfunction getPriorityLabel(priority: string): string {\n  const priorityLabels: Record<string, string> = {\n    'low': 'Baixa',\n    'medium': 'Média',\n    'high': 'Alta'\n  };\n  return priorityLabels[priority] || priority;\n}\n\n/**\n * Exporta o dataset para arquivo Excel (não implementado)\n */\nexport function generateExcelReport(data: ReportData): void {\n  console.log('Exportação para Excel não implementada');\n  alert('Exportação para Excel ainda não está implementada. Por favor, use a exportação para PDF.');\n}","size_bytes":22383},"client/src/lib/utils/export-fix.ts":{"content":"import { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport { Process, User, BiddingModality, ResourceSource, Department } from \"@shared/schema\";\nimport { MONTHS } from '../constants';\nimport { getProcessStatusLabel, getProcessPriorityLabel } from './process';\nimport autoTable from 'jspdf-autotable';\n\ninterface ReportData {\n  processes: Process[];\n  users: User[];\n  modalities: BiddingModality[];\n  sources: ResourceSource[];\n  departments?: Department[];\n  filters: {\n    department?: string;\n    month?: string;\n    year?: string;\n  };\n  reportType: string;\n}\n\n/**\n * Desenha um segmento de gráfico de rosca (donut chart)\n */\nfunction drawDonutSegment(\n  doc: jsPDF,\n  centerX: number,\n  centerY: number,\n  innerRadius: number,\n  outerRadius: number,\n  startAngle: number,\n  endAngle: number\n): void {\n  // Converter ângulos para radianos\n  const startRad = (startAngle * Math.PI) / 180;\n  const endRad = (endAngle * Math.PI) / 180;\n  \n  // Número de pontos para desenhar o arco (mais pontos = mais suave)\n  const numPoints = Math.ceil((endAngle - startAngle) / 5);\n  \n  // Coleção de pontos para o polígono\n  const points: [number, number][] = [];\n  \n  // Adicionar pontos do arco externo\n  for (let i = 0; i <= numPoints; i++) {\n    const angle = startRad + (i / numPoints) * (endRad - startRad);\n    const x = centerX + outerRadius * Math.cos(angle);\n    const y = centerY + outerRadius * Math.sin(angle);\n    points.push([x, y]);\n  }\n  \n  // Adicionar pontos do arco interno (em ordem reversa)\n  for (let i = numPoints; i >= 0; i--) {\n    const angle = startRad + (i / numPoints) * (endRad - startRad);\n    const x = centerX + innerRadius * Math.cos(angle);\n    const y = centerY + innerRadius * Math.sin(angle);\n    points.push([x, y]);\n  }\n  \n  // Desenhar o polígono preenchido\n  doc.setFillColor(doc.getFillColor());\n  doc.polygon(points, 'F');\n}\n\n/**\n * Filtra os processos com base nos filtros selecionados\n */\nfunction filterReportData(data: ReportData): Process[] {\n  let filteredProcesses = [...data.processes];\n  \n  // Filtrar por mês\n  if (data.filters.month && data.filters.month !== \"all\") {\n    const monthIndex = parseInt(data.filters.month) - 1;\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processMonth = new Date(process.createdAt).getMonth();\n      return processMonth === monthIndex;\n    });\n  }\n  \n  // Filtrar por ano\n  if (data.filters.year) {\n    const year = parseInt(data.filters.year);\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processYear = new Date(process.createdAt).getFullYear();\n      return processYear === year;\n    });\n  }\n  \n  // Filtrar por departamento\n  if (data.filters.department && data.filters.department !== \"all\" && data.departments) {\n    const departmentId = parseInt(data.filters.department);\n    const department = data.departments.find(d => d.id === departmentId);\n    \n    if (department) {\n      filteredProcesses = filteredProcesses.filter(process => {\n        const user = data.users.find(u => u.id === process.responsibleId);\n        return user?.department === department.name;\n      });\n    }\n  }\n  \n  return filteredProcesses;\n}\n\n/**\n * Gera um relatório PDF com gráficos e tabelas\n * Formato baseado no exemplo fornecido\n */\nexport function generatePdfReport(data: ReportData): void {\n  // Criar novo documento PDF\n  const doc = new jsPDF();\n  const pageWidth = doc.internal.pageSize.getWidth();\n  const pageHeight = doc.internal.pageSize.getHeight();\n  const margin = 15;\n  const usableWidth = pageWidth - (2 * margin);\n  \n  // Cabeçalho com título\n  doc.setFontSize(14);\n  doc.setTextColor(0, 51, 102); // Azul institucional\n  doc.text('QUANTIDADE DE PROCESSOS', margin, 25);\n  \n  // Botão de filtros (visual)\n  doc.setFillColor(30, 144, 255);\n  doc.roundedRect(pageWidth - margin - 30, 18, 30, 10, 1, 1, 'F');\n  doc.setTextColor(255, 255, 255);\n  doc.text('Filtros', pageWidth - margin - 15, 25, { align: 'center' });\n  doc.setTextColor(0, 0, 0);\n  \n  // Filtrar processos baseado nos critérios\n  const filteredProcesses = filterReportData(data);\n  const total = filteredProcesses.length || 1; // Evitar divisão por zero\n  \n  // Layout do relatório\n  const startY = 40;\n  const chartHeight = 80;\n  const chartWidth = (usableWidth - 20) / 3;\n  \n  // ===== GRÁFICO DE PRIORIDADE (ROSCA) =====\n  doc.setFontSize(10);\n  doc.text('Grau de Prioridade', margin + chartWidth/2, startY, { align: 'center' });\n  \n  // Contagem por prioridade\n  const priorityCounts = {\n    low: 0,\n    medium: 0,\n    high: 0\n  };\n  \n  filteredProcesses.forEach(process => {\n    if (process.priority && priorityCounts[process.priority] !== undefined) {\n      priorityCounts[process.priority]++;\n    }\n  });\n  \n  // Calcular percentuais\n  const highPct = priorityCounts.high / total;\n  const mediumPct = priorityCounts.medium / total;\n  const lowPct = priorityCounts.low / total;\n  \n  // Centro do gráfico\n  const centerX1 = margin + chartWidth/2;\n  const centerY1 = startY + 40;\n  const outerRadius = 30;\n  const innerRadius = 18;\n  \n  // Desenhar os segmentos\n  // Prioridade Baixa (verde)\n  doc.setFillColor(16, 185, 129);\n  drawDonutSegment(doc, centerX1, centerY1, innerRadius, outerRadius, 0, lowPct * 360);\n  \n  // Prioridade Média (amarelo)\n  doc.setFillColor(245, 158, 11);\n  drawDonutSegment(doc, centerX1, centerY1, innerRadius, outerRadius, lowPct * 360, lowPct * 360 + mediumPct * 360);\n  \n  // Prioridade Alta (vermelho)\n  doc.setFillColor(239, 68, 68);\n  drawDonutSegment(doc, centerX1, centerY1, innerRadius, outerRadius, lowPct * 360 + mediumPct * 360, 360);\n  \n  // Legendas dos percentuais\n  doc.setFontSize(8);\n  doc.text(`${Math.round(lowPct * 100)}%`, centerX1 - 15, centerY1 + 50);\n  doc.text(`${Math.round(mediumPct * 100)}%`, centerX1, centerY1 + 50);\n  doc.text(`${Math.round(highPct * 100)}%`, centerX1 + 15, centerY1 + 50);\n  \n  // ===== GRÁFICO DE STATUS (ROSCA) =====\n  doc.setFontSize(10);\n  doc.text('Status', margin + chartWidth + 10 + chartWidth/2, startY, { align: 'center' });\n  \n  // Contagem por status\n  const statusCounts = {\n    draft: 0,\n    in_progress: 0,\n    completed: 0,\n    canceled: 0\n  };\n  \n  filteredProcesses.forEach(process => {\n    if (process.status && statusCounts[process.status] !== undefined) {\n      statusCounts[process.status]++;\n    }\n  });\n  \n  // Calcular percentuais\n  const draftPct = statusCounts.draft / total;\n  const inProgressPct = statusCounts.in_progress / total;\n  const completedPct = statusCounts.completed / total;\n  const canceledPct = statusCounts.canceled / total;\n  \n  // Centro do gráfico\n  const centerX2 = margin + chartWidth + 10 + chartWidth/2;\n  const centerY2 = startY + 40;\n  \n  // Desenhar segmentos\n  // Em andamento (azul)\n  doc.setFillColor(54, 162, 235);\n  drawDonutSegment(doc, centerX2, centerY2, innerRadius, outerRadius, 0, inProgressPct * 360);\n  \n  // Concluído (verde-azulado)\n  doc.setFillColor(75, 192, 192);\n  drawDonutSegment(doc, centerX2, centerY2, innerRadius, outerRadius, inProgressPct * 360, inProgressPct * 360 + completedPct * 360);\n  \n  // Labels para os status\n  doc.setFontSize(6);\n  doc.text(\"CONCLUÍDOS\", centerX2 - 35, centerY2 - 20);\n  doc.text(\"EM ANDAMENTO\", centerX2 + 15, centerY2 - 20);\n  \n  // Percentuais na legenda\n  doc.setFontSize(8);\n  doc.text(`${Math.round(draftPct * 100)}%`, centerX2 - 15, centerY2 + 50);\n  doc.text(`${Math.round(completedPct * 100)}%`, centerX2, centerY2 + 50);\n  doc.text(`${Math.round(inProgressPct * 100)}%`, centerX2 + 15, centerY2 + 50);\n  \n  // ===== GRÁFICO DE FONTES (BARRAS) =====\n  doc.setFontSize(10);\n  doc.text('Fonte', margin + 2*chartWidth + 20 + chartWidth/2, startY, { align: 'center' });\n  \n  // Contagem por fonte\n  const sourceCounts = new Map<number, number>();\n  filteredProcesses.forEach(process => {\n    const count = sourceCounts.get(process.sourceId) || 0;\n    sourceCounts.set(process.sourceId, count + 1);\n  });\n  \n  // Ordenar fontes por quantidade (decrescente)\n  const sortedSources = Array.from(sourceCounts.entries())\n    .sort((a, b) => b[1] - a[1])\n    .slice(0, 5); // Limitar a 5 fontes principais\n  \n  // Configuração para o gráfico de barras\n  const barStartX = margin + 2*chartWidth + 35;\n  const barStartY = startY + 10;\n  const barMaxWidth = chartWidth - 40;\n  const barHeight = 8;\n  const barGap = 15;\n  \n  // Desenhar barras para cada fonte\n  sortedSources.forEach((sourceEntry, index) => {\n    const [sourceId, count] = sourceEntry;\n    const source = data.sources.find(s => s.id === sourceId);\n    const maxCount = Math.max(...sortedSources.map(s => s[1]));\n    const barWidth = (count / maxCount) * barMaxWidth;\n    \n    // Barra horizontal\n    doc.setFillColor(44, 123, 182); // Azul\n    doc.rect(barStartX, barStartY + index * barGap, barWidth, barHeight, 'F');\n    \n    // Label da fonte\n    doc.setFontSize(7);\n    const sourceLabel = source?.code || `${sourceId}`;\n    doc.text(sourceLabel, barStartX - 5, barStartY + index * barGap + barHeight/2 + 2, { align: 'right' });\n    \n    // Valor numérico\n    doc.setFontSize(7);\n    doc.text(`${count}`, barStartX + barWidth + 3, barStartY + index * barGap + barHeight/2 + 2);\n  });\n  \n  // Label \"Responsável (Qtde)\" conforme mostrado na imagem\n  doc.setFontSize(9);\n  doc.text('Responsável (Qtde)', barStartX + barMaxWidth/2, barStartY + 5*barGap + 10, { align: 'center' });\n  \n  // ===== GRÁFICO DE LINHA (CONCLUSÕES POR MÊS) =====\n  const lineChartY = startY + chartHeight + 20;\n  doc.setFontSize(10);\n  doc.text('Conclusão de Processos / Mês', margin + usableWidth/2, lineChartY, { align: 'center' });\n  \n  // Linha de base\n  const lineStartX = margin + 10;\n  const lineEndX = pageWidth - margin - 10;\n  const lineY = lineChartY + 40;\n  const lineWidth = lineEndX - lineStartX;\n  \n  // Desenhar linha base\n  doc.setDrawColor(200, 200, 200);\n  doc.setLineWidth(0.5);\n  doc.line(lineStartX, lineY, lineEndX, lineY);\n  \n  // Dados de exemplo para o gráfico de linha (similar à imagem)\n  const monthlyValues = [\n    { month: \"Out 2023\", value: 15 },\n    { month: \"Nov 2023\", value: 25 },\n    { month: \"Dez 2023\", value: 20 },\n    { month: \"Jan 2024\", value: 30 },\n    { month: \"Fev 2024\", value: 18 },\n    { month: \"Mar 2024\", value: 28 },\n    { month: \"Abr 2024\", value: 22 },\n    { month: \"Mai 2024\", value: 32 }\n  ];\n  \n  // Valor máximo para escala\n  const maxValue = Math.max(...monthlyValues.map(mv => mv.value));\n  const valueScale = 30 / maxValue;\n  \n  // Pontos para o gráfico de linha\n  const points: Array<{x: number, y: number}> = [];\n  const segmentWidth = lineWidth / (monthlyValues.length - 1);\n  \n  // Desenhar pontos e labels\n  monthlyValues.forEach((mv, index) => {\n    const x = lineStartX + (index * segmentWidth);\n    const y = lineY - (mv.value * valueScale);\n    points.push({ x, y });\n    \n    // Desenhar ponto\n    doc.setFillColor(54, 162, 235);\n    doc.circle(x, y, 1.5, 'F');\n    \n    // Label do mês\n    doc.setFontSize(6);\n    doc.text(mv.month, x, lineY + 7, { align: 'center' });\n  });\n  \n  // Desenhar linhas entre pontos\n  doc.setDrawColor(54, 162, 235);\n  doc.setLineWidth(0.8);\n  for (let i = 0; i < points.length - 1; i++) {\n    doc.line(points[i].x, points[i].y, points[i+1].x, points[i+1].y);\n  }\n  \n  // Salvar o PDF\n  doc.save(`relatorio_processos_${new Date().toISOString().slice(0, 10)}.pdf`);\n}\n\n/**\n * Gera um relatório em Excel\n */\nexport function generateExcelReport(data: ReportData): void {\n  console.log('Excel export not implemented yet');\n  alert('Exportação para Excel ainda não está implementada. Por favor, use a exportação para PDF.');\n}","size_bytes":11602},"client/src/lib/utils/export.ts":{"content":"import { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport { Process, User, BiddingModality, ResourceSource, Department } from \"@shared/schema\";\nimport { MONTHS } from '../constants';\nimport { getProcessStatusLabel, getProcessPriorityLabel } from './process';\nimport autoTable from 'jspdf-autotable';\n\n// Tipos para os relatórios\ninterface ReportData {\n  processes: Process[];\n  users: User[];\n  modalities: BiddingModality[];\n  sources: ResourceSource[];\n  departments?: Department[];\n  filters: {\n    department?: string;\n    month?: string;\n    year?: string;\n  };\n  reportType: string;\n}\n\n/**\n * Filtra os processos com base nos filtros selecionados\n */\nfunction filterReportData(data: ReportData): Process[] {\n  let filteredProcesses = [...data.processes];\n  \n  // Filtrar por mês\n  if (data.filters.month && data.filters.month !== \"all\") {\n    const monthIndex = parseInt(data.filters.month) - 1;\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processMonth = new Date(process.createdAt).getMonth();\n      return processMonth === monthIndex;\n    });\n  }\n  \n  // Filtrar por ano\n  if (data.filters.year) {\n    const year = parseInt(data.filters.year);\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processYear = new Date(process.createdAt).getFullYear();\n      return processYear === year;\n    });\n  }\n  \n  // Filtrar por departamento\n  if (data.filters.department && data.filters.department !== \"all\" && data.departments) {\n    const departmentId = parseInt(data.filters.department);\n    const department = data.departments.find(d => d.id === departmentId);\n    \n    if (department) {\n      filteredProcesses = filteredProcesses.filter(process => {\n        const user = data.users.find(u => u.id === process.responsibleId);\n        return user?.department === department.name;\n      });\n    }\n  }\n  \n  return filteredProcesses;\n}\n\n/**\n * Desenha um arco de círculo em coordenadas polares\n */\nfunction drawArc(doc: jsPDF, centerX: number, centerY: number, radius: number, startAngle: number, endAngle: number) {\n  // Converter ângulos para radianos\n  const startRad = (startAngle * Math.PI) / 180;\n  const endRad = (endAngle * Math.PI) / 180;\n  \n  // Número de pontos para compor o arco\n  const numPoints = Math.max(Math.ceil((endAngle - startAngle) / 5), 2);\n  \n  // Início do arco\n  let x = centerX + radius * Math.cos(startRad);\n  let y = centerY + radius * Math.sin(startRad);\n  doc.lines([[0, 0]], centerX, centerY);\n  doc.lines([[x - centerX, y - centerY]], centerX, centerY);\n  \n  // Desenhar segmentos do arco\n  for (let i = 1; i <= numPoints; i++) {\n    const angle = startRad + (i / numPoints) * (endRad - startRad);\n    const nextX = centerX + radius * Math.cos(angle);\n    const nextY = centerY + radius * Math.sin(angle);\n    doc.lines([[nextX - x, nextY - y]], x, y);\n    x = nextX;\n    y = nextY;\n  }\n  \n  // Fechar o arco voltando ao centro\n  doc.lines([[centerX - x, centerY - y]], x, y);\n}\n\n/**\n * Desenha um gráfico de rosca (donut)\n */\nfunction drawDonut(doc: jsPDF, centerX: number, centerY: number, innerRadius: number, outerRadius: number, data: {value: number, color: number[]}[]) {\n  // Calcular total\n  const total = data.reduce((sum, item) => sum + item.value, 0) || 1;\n  \n  // Ângulo inicial\n  let currentAngle = 0;\n  \n  // Desenhar cada segmento\n  data.forEach(item => {\n    // Calcular ângulo do segmento\n    const segmentAngle = (item.value / total) * 360;\n    \n    // Definir cor do segmento\n    doc.setFillColor(item.color[0], item.color[1], item.color[2]);\n    \n    // Desenhar segmento externo\n    const endAngle = currentAngle + segmentAngle;\n    \n    // Desenhar segmento como um setor circular\n    if (segmentAngle > 0) {\n      const startRad = (currentAngle * Math.PI) / 180;\n      const endRad = (endAngle * Math.PI) / 180;\n      \n      // Desenhar o segmento como uma série de pequenos triângulos\n      const steps = Math.max(Math.ceil(segmentAngle / 5), 1);\n      \n      for (let i = 0; i < steps; i++) {\n        const angle1 = startRad + (i / steps) * (endRad - startRad);\n        const angle2 = startRad + ((i + 1) / steps) * (endRad - startRad);\n        \n        const x1 = centerX + innerRadius * Math.cos(angle1);\n        const y1 = centerY + innerRadius * Math.sin(angle1);\n        const x2 = centerX + outerRadius * Math.cos(angle1);\n        const y2 = centerY + outerRadius * Math.sin(angle1);\n        const x3 = centerX + outerRadius * Math.cos(angle2);\n        const y3 = centerY + outerRadius * Math.sin(angle2);\n        const x4 = centerX + innerRadius * Math.cos(angle2);\n        const y4 = centerY + innerRadius * Math.sin(angle2);\n        \n        // Desenhar polígono\n        doc.setFillColor(item.color[0], item.color[1], item.color[2]);\n        doc.triangle(x1, y1, x2, y2, x3, y3, 'F');\n        doc.triangle(x1, y1, x3, y3, x4, y4, 'F');\n      }\n    }\n    \n    // Atualizar ângulo para o próximo segmento\n    currentAngle = endAngle;\n  });\n}\n\n/**\n * Gera um relatório PDF em formato de linha do tempo (timeline)\n * Inspirado no modelo de infográfico moderno\n */\nexport function generatePdfReport(data: ReportData): void {\n  try {\n    // Criar novo documento PDF com fundo escuro como na imagem de referência\n    const doc = new jsPDF({ \n      orientation: 'landscape',\n      unit: 'mm'\n    });\n    \n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n    const margin = 10;\n    \n    // Adicionar fundo escuro em toda a página - similar à imagem referência\n    doc.setFillColor(60, 64, 75); // Cor de fundo cinza escuro\n    doc.rect(0, 0, pageWidth, pageHeight, 'F');\n    \n    // Filtrar processos baseado nos critérios\n    const filteredProcesses = filterReportData(data);\n    const total = filteredProcesses.length || 1;\n    \n    // == TÍTULO COM SOMBRA SUAVE ==\n    doc.setFontSize(28);\n    \n    // Efeito de sombra (título principal) - texto ligeiramente translúcido em offset\n    doc.setTextColor(220, 220, 220, 0.5);\n    doc.text('Timeline Infográfico', pageWidth / 2 + 1, 26, { align: 'center' });\n    \n    // Texto principal (título)\n    doc.setTextColor(255, 255, 255);\n    doc.text('Timeline Infográfico', pageWidth / 2, 25, { align: 'center' });\n    \n    // TIMELINE PRINCIPAL - linha do tempo horizontal\n    const timelineY = 70;\n    const timelineStartX = margin + 20;\n    const timelineEndX = pageWidth - margin - 20;\n    const timelineWidth = timelineEndX - timelineStartX;\n    \n    // Períodos para a timeline - configurados para representar anos\n    const periods = [\n      { \n        label: 'Inicialização', \n        year: '1980', \n        color: [41, 121, 255],  // Azul\n        stats: filteredProcesses.filter(p => new Date(p.createdAt).getFullYear() === 2021).length,\n        description: 'Aenean sodales congue\\nnisi sed imperdiet. Donec\\ndapibus egent sem ac ornare.',\n        chartData: [10, 15, 12, 18, 14, 20]\n      },\n      { \n        label: 'Progresso', \n        year: '1990', \n        color: [255, 99, 132],  // Rosa/Vermelho\n        stats: filteredProcesses.filter(p => new Date(p.createdAt).getFullYear() === 2022).length,\n        description: 'Cras est tortor est. Ut\\nvehicula vel placerat,\\nvestibulum eget, placerat\\nligula mauris.',\n        chartData: [15, 22, 18, 25, 20, 28]\n      },\n      { \n        label: 'Expansão', \n        year: '2000', \n        color: [132, 255, 99],  // Verde\n        stats: filteredProcesses.filter(p => new Date(p.createdAt).getFullYear() === 2023).length,\n        description: 'In eunisus magna, faucibus\\negest erat nunc, tempus\\nrhoncus diam. Phasellus\\nac, este felis.',\n        chartData: [22, 28, 25, 32, 30, 35]\n      },\n      { \n        label: 'Inovação', \n        year: '2010', \n        color: [255, 205, 0],  // Amarelo\n        stats: filteredProcesses.filter(p => new Date(p.createdAt).getFullYear() === 2024).length,\n        description: 'Fusce egestus, nisl at\\nlobortis vulputate, velit erat\\nconque lactur, et amet\\nluctus risus enim\\nid nulla.',\n        chartData: [25, 30, 35, 40, 38, 42]\n      },\n      { \n        label: 'Excelência', \n        year: '2020', \n        color: [255, 149, 0],  // Laranja\n        stats: filteredProcesses.filter(p => new Date(p.createdAt).getFullYear() === 2025).length,\n        description: 'Cras et allocicitude nulla,\\nsapien dolor, semper lac,\\nsapien eu tincidunt felis.',\n        chartData: [30, 35, 42, 48, 45, 52]\n      }\n    ];\n    \n    // === LINHA DO TEMPO CENTRAL ===\n    const segmentColors = [\n      [41, 121, 255],  // Azul\n      [255, 99, 132],  // Rosa/Vermelho \n      [132, 255, 99],  // Verde\n      [255, 205, 0],   // Amarelo\n      [255, 149, 0]    // Laranja\n    ];\n    \n    // Linha base cinza para a linha do tempo completa\n    doc.setDrawColor(150, 150, 150);\n    doc.setLineWidth(8);\n    doc.line(timelineStartX, timelineY, timelineEndX, timelineY);\n    \n    // Calcular largura de cada segmento\n    const segmentWidth = timelineWidth / periods.length;\n    \n    // Desenhar os segmentos coloridos da linha do tempo\n    periods.forEach((period, index) => {\n      const segmentStartX = timelineStartX + (segmentWidth * index);\n      const segmentEndX = segmentStartX + segmentWidth;\n      \n      // Desenhar segmento colorido\n      doc.setDrawColor(period.color[0], period.color[1], period.color[2]);\n      doc.setLineWidth(8);\n      doc.line(segmentStartX, timelineY, segmentEndX, timelineY);\n      \n      // Adicionar círculo no início do segmento\n      doc.setFillColor(255, 255, 255);\n      doc.circle(segmentStartX, timelineY, 6, 'F');\n      doc.setDrawColor(period.color[0], period.color[1], period.color[2]);\n      doc.setLineWidth(2);\n      doc.circle(segmentStartX, timelineY, 6, 'S');\n      \n      // Se for o último, adicionar círculo no final\n      if (index === periods.length - 1) {\n        doc.setFillColor(255, 255, 255);\n        doc.circle(segmentEndX, timelineY, 6, 'F');\n        doc.setDrawColor(period.color[0], period.color[1], period.color[2]);\n        doc.setLineWidth(2);\n        doc.circle(segmentEndX, timelineY, 6, 'S');\n      }\n    });\n    \n    // === ADICIONAR CONTEÚDO ACIMA E ABAIXO DA TIMELINE ===\n    \n    periods.forEach((period, index) => {\n      const x = timelineStartX + (segmentWidth * index) + (segmentWidth / 2);\n      const isEvenPeriod = index % 2 === 0;\n      \n      // Ano em grande destaque\n      doc.setFontSize(24);\n      doc.setTextColor(period.color[0], period.color[1], period.color[2]);\n      doc.setFontStyle('bold');\n      doc.text(period.year, x, timelineY + (isEvenPeriod ? 50 : -35), { align: 'center' });\n      \n      // Definir onde desenhar o gráfico de barras e o texto descritivo\n      let chartY, descriptionY, circleY;\n      \n      if (isEvenPeriod) {\n        // Conteúdo abaixo da timeline\n        chartY = timelineY + 25;\n        descriptionY = timelineY + 75;\n        circleY = timelineY + 115;\n      } else {\n        // Conteúdo acima da timeline\n        chartY = timelineY - 65;\n        descriptionY = timelineY - 25;\n        circleY = timelineY - 115;\n      }\n      \n      // Desenhar gráfico de barras\n      let barWidth = 7;\n      let barGap = 2;\n      let chartStartX = x - ((barWidth + barGap) * period.chartData.length / 2);\n      \n      // Encontrar valor máximo para escala do gráfico\n      const maxValue = Math.max(...period.chartData);\n      \n      // Desenhar barras do gráfico de período\n      period.chartData.forEach((value, i) => {\n        const barHeight = (value / maxValue) * 40; // altura máxima de 40mm\n        const barX = chartStartX + (i * (barWidth + barGap));\n        \n        // Cores alternadas da mesma família de cores\n        if (i % 2 === 0) {\n          doc.setFillColor(period.color[0], period.color[1], period.color[2]);\n        } else {\n          doc.setFillColor(\n            Math.min(255, period.color[0] + 40),\n            Math.min(255, period.color[1] + 40),\n            Math.min(255, period.color[2] + 40)\n          );\n        }\n        \n        if (isEvenPeriod) {\n          // Barras crescendo para baixo\n          doc.rect(barX, chartY, barWidth, barHeight, 'F');\n        } else {\n          // Barras crescendo para cima\n          doc.rect(barX, chartY, barWidth, -barHeight, 'F');\n        }\n      });\n      \n      // Texto descritivo\n      doc.setFontSize(9);\n      doc.setTextColor(220, 220, 220);\n      doc.setFontStyle('normal');\n      doc.text(period.description, x, descriptionY, { \n        align: 'center',\n        maxWidth: segmentWidth - 20\n      });\n      \n      // Círculo com gráfico de pizza/donut\n      const circleRadius = 20;\n      \n      // Desenhar círculo principal\n      doc.setFillColor(period.color[0], period.color[1], period.color[2]);\n      doc.circle(x, circleY, circleRadius, 'F');\n      \n      // Segmentos decorativos no círculo\n      const numSegments = 3;\n      for(let i = 0; i < numSegments; i++) {\n        const segAngle = (2 * Math.PI / numSegments) * i;\n        const segX = x + (circleRadius * 0.6) * Math.cos(segAngle);\n        const segY = circleY + (circleRadius * 0.6) * Math.sin(segAngle);\n        \n        // Cores alternadas\n        doc.setFillColor(\n          Math.min(255, period.color[0] + 60 + (i * 20)),\n          Math.min(255, period.color[1] + 60 + (i * 20)),\n          Math.min(255, period.color[2] + 60 + (i * 20))\n        );\n        doc.circle(segX, segY, circleRadius * 0.4, 'F');\n      }\n      \n      // Círculo branco no centro\n      doc.setFillColor(60, 64, 75); // Mesma cor do fundo\n      doc.circle(x, circleY, circleRadius * 0.5, 'F');\n      \n      // Texto com estatísticas\n      doc.setFontSize(14);\n      doc.setTextColor(255, 255, 255);\n      doc.setFontStyle('bold');\n      doc.text(`${period.stats || 0}`, x, circleY + 4, { align: 'center' });\n    });\n    \n    // Rodapé com informações de geração\n    doc.setFontSize(9);\n    doc.setTextColor(180, 180, 180);\n    doc.setFontStyle('normal');\n    doc.text(`SEAP-PB | Sistema de Controle de Processos Licitatórios | Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, \n      pageWidth / 2, pageHeight - 10, { align: 'center' });\n    \n    // Salvar o PDF\n    doc.save(`timeline-processos-${new Date().toLocaleDateString('pt-BR').replaceAll('/', '-')}.pdf`);\n  } catch (error) {\n    console.error('Erro ao gerar relatório PDF:', error);\n    alert('Ocorreu um erro ao gerar o relatório PDF. Por favor, tente novamente.');\n  }\n}\n\n/**\n * Função auxiliar para gerar relatório de departamentos\n */\nfunction generateDepartmentReport(doc: jsPDF, data: ReportData): void {\n  if (!data.departments) return;\n  \n  const departmentStats = data.departments.map(dept => {\n    const deptUsers = data.users.filter(u => u.department === dept.name);\n    const deptProcesses = data.processes.filter(p => {\n      const user = data.users.find(u => u.id === p.responsibleId);\n      return user?.department === dept.name;\n    });\n    \n    const completed = deptProcesses.filter(p => p.status === 'completed').length;\n    const percentage = deptProcesses.length > 0 ? Math.round((completed / deptProcesses.length) * 100) : 0;\n    \n    return {\n      department: dept,\n      users: deptUsers.length,\n      total: deptProcesses.length,\n      completed,\n      percentage\n    };\n  });\n  \n  const tableData = departmentStats.map(stats => [\n    stats.department.name,\n    stats.department.description || '-',\n    stats.users.toString(),\n    stats.total.toString(),\n    stats.completed.toString(),\n    `${stats.percentage}%`\n  ]);\n  \n  autoTable(doc, {\n    head: [['Setor', 'Descrição', 'Usuários', 'Processos', 'Concluídos', 'Taxa']],\n    body: tableData,\n    startY: 60,\n    theme: 'grid',\n    headStyles: { fillColor: [0, 102, 204], textColor: [255, 255, 255] },\n    alternateRowStyles: { fillColor: [240, 240, 240] },\n    margin: { top: 60 },\n  });\n}\n\n/**\n * Exporta o dataset para arquivo Excel (CSV)\n */\nexport function generateExcelReport(data: ReportData): void {\n  // In a real implementation, this would use a library like xlsx to generate Excel files\n  // For this MVP, we'll create a CSV and trigger a download\n  let csvContent = '';\n  \n  switch (data.reportType) {\n    case 'processes':\n      csvContent = generateProcessCsv(data);\n      break;\n    case 'users':\n      csvContent = generateUserCsv(data);\n      break;\n    case 'departments':\n      csvContent = generateDepartmentCsv(data);\n      break;\n    default:\n      console.log('Tipo de relatório não especificado');\n      alert('Tipo de relatório não especificado. Por favor, selecione um tipo de relatório.');\n      return;\n  }\n  \n  // Create a download link for the CSV\n  const encodedUri = encodeURI('data:text/csv;charset=utf-8,' + csvContent);\n  const link = document.createElement('a');\n  link.setAttribute('href', encodedUri);\n  link.setAttribute('download', `relatorio-${data.reportType}-${new Date().getTime()}.csv`);\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}\n\n/**\n * Generate CSV for processes report\n */\nfunction generateProcessCsv(data: ReportData): string {\n  const filteredProcesses = filterReportData(data);\n  \n  // Create headers\n  let csv = 'PBDOC,Descrição,Modalidade,Fonte,Responsável,Status,Prioridade,Criado em\\n';\n  \n  // Add rows\n  filteredProcesses.forEach(process => {\n    const modality = data.modalities.find(m => m.id === process.modalityId);\n    const user = data.users.find(u => u.id === process.responsibleId);\n    const source = data.sources.find(s => s.id === process.sourceId);\n    \n    // Escape commas in text fields\n    const description = `\"${process.description.replace(/\"/g, '\"\"')}\"`;\n    \n    csv += [\n      process.pbdocNumber,\n      description,\n      modality?.name || `Modalidade ${process.modalityId}`,\n      `Fonte ${source?.code || process.sourceId}`,\n      user?.fullName || `Usuário ${process.responsibleId}`,\n      getProcessStatusLabel(process.status),\n      getProcessPriorityLabel(process.priority),\n      new Date(process.createdAt).toLocaleDateString()\n    ].join(',') + '\\n';\n  });\n  \n  return csv;\n}\n\n/**\n * Generate CSV for users report\n */\nfunction generateUserCsv(data: ReportData): string {\n  // Create headers\n  let csv = 'Nome,Usuário,Setor,Perfil,Processos,Concluídos,Taxa\\n';\n  \n  // Get process stats for each user\n  data.users.forEach(user => {\n    const userProcesses = data.processes.filter(p => p.responsibleId === user.id);\n    const completed = userProcesses.filter(p => p.status === 'completed').length;\n    const percentage = userProcesses.length > 0 ? Math.round((completed / userProcesses.length) * 100) : 0;\n    \n    csv += [\n      `\"${user.fullName}\"`,\n      user.username,\n      user.department,\n      user.role === 'admin' ? 'Administrador' : 'Comum',\n      userProcesses.length,\n      completed,\n      `${percentage}%`\n    ].join(',') + '\\n';\n  });\n  \n  return csv;\n}\n\n/**\n * Generate CSV for departments report\n */\nfunction generateDepartmentCsv(data: ReportData): string {\n  if (!data.departments) return '';\n  \n  // Create headers\n  let csv = 'Setor,Descrição,Usuários,Processos,Concluídos,Taxa\\n';\n  \n  // Process data for each department\n  data.departments.forEach(dept => {\n    const deptUsers = data.users.filter(u => u.department === dept.name);\n    const deptProcesses = data.processes.filter(p => {\n      const user = data.users.find(u => u.id === p.responsibleId);\n      return user?.department === dept.name;\n    });\n    \n    const completed = deptProcesses.filter(p => p.status === 'completed').length;\n    const percentage = deptProcesses.length > 0 ? Math.round((completed / deptProcesses.length) * 100) : 0;\n    \n    csv += [\n      `\"${dept.name}\"`,\n      `\"${dept.description || '-'}\"`,\n      deptUsers.length,\n      deptProcesses.length,\n      completed,\n      `${percentage}%`\n    ].join(',') + '\\n';\n  });\n  \n  return csv;\n}\n","size_bytes":19846},"client/src/lib/utils/htmlToPdfExport.ts":{"content":"import { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport { Process, User, BiddingModality, ResourceSource, Department } from \"@shared/schema\";\nimport autoTable from 'jspdf-autotable';\n\ninterface ReportData {\n  processes: Process[];\n  users: User[];\n  modalities: BiddingModality[];\n  sources: ResourceSource[];\n  departments?: Department[];\n  filters: {\n    department?: string;\n    month?: string;\n    year?: string;\n  };\n  reportType: string;\n}\n\n/**\n * Filtra os processos com base nos filtros selecionados\n */\nfunction filterReportData(data: ReportData): Process[] {\n  let filteredProcesses = [...data.processes];\n  \n  // Filtrar por mês\n  if (data.filters.month && data.filters.month !== \"all\") {\n    const monthIndex = parseInt(data.filters.month) - 1;\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processMonth = new Date(process.createdAt).getMonth();\n      return processMonth === monthIndex;\n    });\n  }\n  \n  // Filtrar por ano\n  if (data.filters.year) {\n    const year = parseInt(data.filters.year);\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processYear = new Date(process.createdAt).getFullYear();\n      return processYear === year;\n    });\n  }\n  \n  // Filtrar por departamento\n  if (data.filters.department && data.filters.department !== \"all\" && data.departments) {\n    const departmentId = parseInt(data.filters.department);\n    const department = data.departments.find(d => d.id === departmentId);\n    \n    if (department) {\n      filteredProcesses = filteredProcesses.filter(process => {\n        const user = data.users.find(u => u.id === process.responsibleId);\n        return user?.department === department.name;\n      });\n    }\n  }\n  \n  return filteredProcesses;\n}\n\n/**\n * Gera um relatório PDF moderno usando jsPDF com layout widescreen\n */\nexport function generateWidescreenPdfReport(data: ReportData): void {\n  try {\n    // Preparar dados\n    const filteredProcesses = filterReportData(data);\n    \n    // Status counts\n    const statusCounts = {\n      draft: filteredProcesses.filter(p => p.status === 'draft').length,\n      in_progress: filteredProcesses.filter(p => p.status === 'in_progress').length,\n      completed: filteredProcesses.filter(p => p.status === 'completed').length,\n      canceled: filteredProcesses.filter(p => p.status === 'canceled').length,\n    };\n    \n    // Criar documento PDF em formato paisagem (widescreen)\n    const doc = new jsPDF({\n      orientation: 'landscape',\n      unit: 'mm',\n      format: 'a4'\n    });\n    \n    // Largura e altura da página\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n    const margin = 15;\n    \n    // --- CABEÇALHO MODERNO ---\n    \n    // Não é possível criar degradês diretamente no jsPDF\n    // Então vamos usar uma cor sólida para o cabeçalho\n    \n    // Desenhar retângulo com gradiente\n    doc.setFillColor(30, 64, 175); // Cor de fallback \n    doc.rect(0, 0, pageWidth, 30, 'F');\n    \n    // Título principal\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.setFontSize(22);\n    doc.setTextColor(255, 255, 255);\n    doc.text('Relatório Infográfico SEAP-PB', margin, 14);\n    \n    // Subtítulo\n    doc.setFontSize(12);\n    doc.setTextColor(230, 230, 230);\n    doc.text('Sistema de Controle de Processos de Licitação', margin, 22);\n    \n    // Data e informações do relatório (lado direito)\n    doc.setFontSize(10);\n    doc.setTextColor(255, 255, 255);\n    doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, pageWidth - margin, 14, { align: 'right' });\n    \n    const departmentText = data.filters.department && data.filters.department !== 'all' && data.departments\n      ? data.departments.find(d => d.id === parseInt(data.filters.department))?.name || 'Todos'\n      : 'Todos os departamentos';\n    doc.text(`Departamento: ${departmentText}`, pageWidth - margin, 22, { align: 'right' });\n    \n    // --- DASHBOARD DE ESTATÍSTICAS ---\n    \n    // Título da seção\n    doc.setFontSize(16);\n    doc.setTextColor(30, 64, 175);\n    doc.text('Visão Geral', margin, 40);\n    \n    // Linha separadora\n    doc.setDrawColor(220, 220, 220);\n    doc.setLineWidth(0.5);\n    doc.line(margin, 43, pageWidth - margin, 43);\n    \n    // Grid de 4 cards de status\n    const cardWidth = (pageWidth - (margin * 2) - 15) / 4;\n    const cardHeight = 30;\n    const cardY = 50;\n    \n    // Função para desenhar card\n    function drawCard(title: string, value: number, x: number, colorR: number, colorG: number, colorB: number) {\n      // Borda superior colorida\n      doc.setFillColor(colorR, colorG, colorB);\n      doc.rect(x, cardY, cardWidth, 4, 'F');\n      \n      // Fundo do card\n      doc.setFillColor(250, 250, 250);\n      doc.rect(x, cardY + 4, cardWidth, cardHeight - 4, 'F');\n      \n      // Valor\n      doc.setFontSize(18);\n      doc.setTextColor(colorR, colorG, colorB);\n      doc.text(value.toString(), x + cardWidth / 2, cardY + 22, { align: 'center' });\n      \n      // Título\n      doc.setFontSize(10);\n      doc.setTextColor(100, 100, 100);\n      doc.text(title, x + cardWidth / 2, cardY + 30, { align: 'center' });\n    }\n    \n    // Desenhar os 4 cards de status\n    drawCard('Total de Processos', filteredProcesses.length, margin, 59, 130, 246);\n    drawCard('Em Andamento', statusCounts.in_progress, margin + cardWidth + 5, 16, 185, 129);\n    drawCard('Concluídos', statusCounts.completed, margin + (cardWidth + 5) * 2, 245, 158, 11);\n    drawCard('Cancelados', statusCounts.canceled, margin + (cardWidth + 5) * 3, 239, 68, 68);\n    \n    // --- GRÁFICO DE LINHAS DO TEMPO (TIMELINE) ---\n    \n    // Título da seção\n    doc.setFontSize(16);\n    doc.setTextColor(30, 64, 175);\n    doc.text('Linha do Tempo dos Processos', margin, 95);\n    \n    // Linha separadora\n    doc.setDrawColor(220, 220, 220);\n    doc.setLineWidth(0.5);\n    doc.line(margin, 98, pageWidth - margin, 98);\n    \n    // Desenhar a linha do tempo (timeline)\n    const timelineY = 120;\n    const timelineStartX = margin + 10;\n    const timelineEndX = pageWidth - margin - 10;\n    \n    // Linha base\n    doc.setDrawColor(200, 200, 200);\n    doc.setLineWidth(3);\n    doc.line(timelineStartX, timelineY, timelineEndX, timelineY);\n    \n    // Processos por status\n    const colors = {\n      draft: [150, 150, 150],\n      in_progress: [59, 130, 246],\n      completed: [16, 185, 129], \n      canceled: [239, 68, 68]\n    };\n    \n    const statusLabels = {\n      draft: 'Rascunho',\n      in_progress: 'Em Andamento',\n      completed: 'Concluído',\n      canceled: 'Cancelado'\n    };\n    \n    // Pontos na timeline com status\n    const timelinePoints = [\n      { label: 'Status', sublabel: 'Distribuição', data: statusCounts },\n      { label: 'Modalidades', sublabel: 'Mais comuns', data: {} },\n      { label: 'Eficiência', sublabel: 'Taxa de conclusão', data: {} },\n      { label: 'Responsáveis', sublabel: 'Principais', data: {} }\n    ];\n    \n    const timelineWidth = timelineEndX - timelineStartX;\n    const pointGap = timelineWidth / (timelinePoints.length - 0.5);\n    \n    timelinePoints.forEach((point, index) => {\n      const x = timelineStartX + (pointGap * index);\n      \n      // Círculo do ponto\n      doc.setFillColor(30, 64, 175);\n      doc.circle(x, timelineY, 5, 'F');\n      \n      // Texto principal acima\n      doc.setFontSize(12);\n      doc.setTextColor(50, 50, 50);\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(point.label, x, timelineY - 15, { align: 'center' });\n      \n      // Subtexto\n      doc.setFontSize(10);\n      doc.setTextColor(100, 100, 100);\n      doc.setFont(\"helvetica\", \"normal\");\n      doc.text(point.sublabel, x, timelineY - 8, { align: 'center' });\n      \n      // Para o primeiro ponto (Status), desenhar pequenos círculos com os status\n      if (index === 0) {\n        const statusItems = Object.keys(statusCounts);\n        const statusY = timelineY + 15;\n        \n        statusItems.forEach((status, sIdx) => {\n          const statusX = x - 30 + (sIdx * 20);\n          const count = statusCounts[status as keyof typeof statusCounts];\n          const color = colors[status as keyof typeof colors];\n          \n          // Círculo colorido com o status\n          doc.setFillColor(color[0], color[1], color[2]);\n          doc.circle(statusX, statusY, count > 0 ? 5 : 3, 'F');\n          \n          // Valor do status\n          doc.setFontSize(8);\n          doc.setTextColor(80, 80, 80);\n          doc.text(count.toString(), statusX, statusY + 10, { align: 'center' });\n          \n          // Label do status\n          doc.setFontSize(6);\n          doc.text(statusLabels[status as keyof typeof statusLabels], statusX, statusY + 15, { align: 'center' });\n        });\n      }\n      \n      // Para o segundo ponto (Modalidades), desenhar distribuição de modalidades\n      if (index === 1) {\n        // Contar processos por modalidade\n        const modalityCounts = new Map<number, number>();\n        filteredProcesses.forEach(p => {\n          const count = modalityCounts.get(p.modalityId) || 0;\n          modalityCounts.set(p.modalityId, count + 1);\n        });\n        \n        // Preparar dados de modalidades\n        const modalityData = Array.from(modalityCounts.entries())\n          .map(([id, count]) => {\n            const modality = data.modalities.find(m => m.id === id);\n            return {\n              name: modality?.name || `Modalidade ${id}`,\n              count\n            };\n          })\n          .sort((a, b) => b.count - a.count)\n          .slice(0, 3);\n        \n        // Desenhar mini gráfico\n        const modalityY = timelineY + 15;\n        const barWidth = 15;\n        const maxCount = Math.max(...modalityData.map(m => m.count), 1);\n        \n        modalityData.forEach((modality, mIdx) => {\n          const barX = x - 25 + (mIdx * 25);\n          const barHeight = Math.min(30, (modality.count / maxCount) * 30);\n          \n          // Desenhar barra\n          doc.setFillColor(59, 130, 246);\n          doc.rect(barX, modalityY, barWidth, barHeight, 'F');\n          \n          // Valor \n          doc.setFontSize(8);\n          doc.setTextColor(80, 80, 80);\n          doc.text(modality.count.toString(), barX + barWidth/2, modalityY + barHeight + 5, { align: 'center' });\n          \n          // Nome abreviado da modalidade\n          doc.setFontSize(6);\n          const shortName = modality.name.split(' ')[0];\n          doc.text(shortName, barX + barWidth/2, modalityY + barHeight + 12, { align: 'center' });\n        });\n      }\n      \n      // Para o terceiro ponto (Eficiência)\n      if (index === 2) {\n        const total = filteredProcesses.length;\n        const completed = statusCounts.completed;\n        const rate = total > 0 ? Math.round((completed / total) * 100) : 0;\n        \n        // Desenhar gráfico circular de progresso\n        const centerY = timelineY + 25;\n        const radius = 15;\n        \n        // Círculo de fundo\n        doc.setFillColor(220, 220, 220);\n        doc.circle(x, centerY, radius, 'F');\n        \n        // Círculo de progresso (implementação simples)\n        if (rate > 0) {\n          doc.setFillColor(16, 185, 129);\n          // Em um PDF real, aqui usaríamos um arco para mostrar o progresso\n          // Como simplificação, apenas desenhamos um círculo menor\n          doc.circle(x, centerY, radius * (rate/100), 'F');\n        }\n        \n        // Texto de porcentagem no centro\n        doc.setFontSize(12);\n        doc.setTextColor(50, 50, 50);\n        doc.setFont(\"helvetica\", \"bold\");\n        doc.text(`${rate}%`, x, centerY + 4, { align: 'center' });\n        \n        // Legenda\n        doc.setFontSize(8);\n        doc.setTextColor(80, 80, 80);\n        doc.setFont(\"helvetica\", \"normal\");\n        doc.text(`${completed} de ${total}`, x, centerY + 20, { align: 'center' });\n      }\n      \n      // Para o quarto ponto (Responsáveis)\n      if (index === 3) {\n        // Contar processos por responsável\n        const respCounts = new Map<number, {total: number, name: string}>();\n        filteredProcesses.forEach(p => {\n          const current = respCounts.get(p.responsibleId) || {total: 0, name: ''};\n          const resp = data.users.find(u => u.id === p.responsibleId);\n          respCounts.set(p.responsibleId, {\n            total: current.total + 1,\n            name: resp?.fullName || `Usuário ${p.responsibleId}`\n          });\n        });\n        \n        // Preparar dados\n        const respData = Array.from(respCounts.entries())\n          .map(([_, data]) => data)\n          .sort((a, b) => b.total - a.total)\n          .slice(0, 3);\n        \n        // Desenhar mini gráfico\n        const respY = timelineY + 15;\n        \n        respData.forEach((resp, rIdx) => {\n          const respX = x - 30 + (rIdx * 30);\n          \n          // Ícone de usuário (circulo simples)\n          doc.setFillColor(59, 130, 246);\n          doc.circle(respX, respY, 8, 'F');\n          \n          // Iniciais do usuário\n          doc.setFontSize(8);\n          doc.setTextColor(255, 255, 255);\n          const initials = resp.name.split(' ')\n            .map(name => name[0])\n            .slice(0, 2)\n            .join('');\n          doc.text(initials, respX, respY + 3, { align: 'center' });\n          \n          // Total de processos\n          doc.setFontSize(8);\n          doc.setTextColor(80, 80, 80);\n          doc.text(resp.total.toString(), respX, respY + 15, { align: 'center' });\n          \n          // Nome abreviado\n          doc.setFontSize(6);\n          const firstName = resp.name.split(' ')[0];\n          doc.text(firstName, respX, respY + 22, { align: 'center' });\n        });\n      }\n    });\n    \n    // --- TABELA DE PROCESSOS RECENTES ---\n    \n    // Título da seção\n    doc.setFontSize(16);\n    doc.setTextColor(30, 64, 175);\n    doc.text('Processos Recentes', margin, 160);\n    \n    // Linha separadora\n    doc.setDrawColor(220, 220, 220);\n    doc.setLineWidth(0.5);\n    doc.line(margin, 163, pageWidth - margin, 163);\n    \n    // Preparar dados da tabela\n    const tableData = filteredProcesses\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, 8)\n      .map(p => {\n        const modality = data.modalities.find(m => m.id === p.modalityId);\n        const responsible = data.users.find(u => u.id === p.responsibleId);\n        const description = p.description.length > 40 ? p.description.substring(0, 40) + '...' : p.description;\n        \n        let statusText = 'Desconhecido';\n        switch(p.status) {\n          case 'draft': statusText = 'Rascunho'; break;\n          case 'in_progress': statusText = 'Em Andamento'; break;\n          case 'completed': statusText = 'Concluído'; break;\n          case 'canceled': statusText = 'Cancelado'; break;\n        }\n        \n        return [\n          p.pbdocNumber,\n          description,\n          modality?.name || 'N/A',\n          responsible?.fullName || 'N/A',\n          statusText,\n          new Date(p.createdAt).toLocaleDateString('pt-BR')\n        ];\n      });\n    \n    // Definir cabeçalhos\n    const headers = [\n      'PBDOC', \n      'Descrição', \n      'Modalidade', \n      'Responsável', \n      'Status',\n      'Data de Criação'\n    ];\n    \n    // Estilo da tabela\n    autoTable(doc, {\n      head: [headers],\n      body: tableData,\n      startY: 170,\n      margin: { left: margin, right: margin },\n      headStyles: {\n        fillColor: [59, 130, 246],\n        textColor: [255, 255, 255],\n        fontStyle: 'bold'\n      },\n      alternateRowStyles: {\n        fillColor: [245, 247, 250]\n      },\n      columnStyles: {\n        0: { cellWidth: 25 },\n        1: { cellWidth: 'auto' },\n        2: { cellWidth: 35 },\n        3: { cellWidth: 35 },\n        4: { cellWidth: 30 },\n        5: { cellWidth: 30 }\n      },\n      styles: {\n        font: 'helvetica',\n        fontSize: 9\n      }\n    });\n    \n    // --- RODAPÉ ---\n    const footerY = pageHeight - 10;\n    \n    // Linha separadora\n    doc.setDrawColor(200, 200, 200);\n    doc.setLineWidth(0.5);\n    doc.line(margin, footerY - 5, pageWidth - margin, footerY - 5);\n    \n    // Texto do rodapé\n    doc.setFontSize(8);\n    doc.setTextColor(150, 150, 150);\n    doc.text('SEAP-PB - Secretaria de Estado da Administração Penitenciária', pageWidth / 2, footerY, { align: 'center' });\n    \n    // Salvar o PDF\n    const fileName = `seap-pb-relatorio-${new Date().toLocaleDateString('pt-BR').replaceAll('/', '-')}.pdf`;\n    doc.save(fileName);\n  } catch (error) {\n    console.error('Erro ao gerar relatório PDF:', error);\n    alert('Ocorreu um erro ao gerar o relatório PDF. Por favor, tente novamente.');\n  }\n}","size_bytes":16671},"client/src/lib/utils/modernPdfExport.ts":{"content":"// Usamos importações do lado do cliente para compatibilidade com o browser\nimport puppeteer from 'puppeteer-core/lib/cjs/puppeteer/web';\nimport { Process, User, BiddingModality, ResourceSource, Department } from \"@shared/schema\";\n\ninterface ReportData {\n  processes: Process[];\n  users: User[];\n  modalities: BiddingModality[];\n  sources: ResourceSource[];\n  departments?: Department[];\n  filters: {\n    department?: string;\n    month?: string;\n    year?: string;\n  };\n  reportType: string;\n}\n\n/**\n * Filtra os processos com base nos filtros selecionados\n */\nfunction filterReportData(data: ReportData): Process[] {\n  let filteredProcesses = [...data.processes];\n  \n  // Filtrar por mês\n  if (data.filters.month && data.filters.month !== \"all\") {\n    const monthIndex = parseInt(data.filters.month) - 1;\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processMonth = new Date(process.createdAt).getMonth();\n      return processMonth === monthIndex;\n    });\n  }\n  \n  // Filtrar por ano\n  if (data.filters.year) {\n    const year = parseInt(data.filters.year);\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processYear = new Date(process.createdAt).getFullYear();\n      return processYear === year;\n    });\n  }\n  \n  // Filtrar por departamento\n  if (data.filters.department && data.filters.department !== \"all\" && data.departments) {\n    const departmentId = parseInt(data.filters.department);\n    const department = data.departments.find(d => d.id === departmentId);\n    \n    if (department) {\n      filteredProcesses = filteredProcesses.filter(process => {\n        const user = data.users.find(u => u.id === process.responsibleId);\n        return user?.department === department.name;\n      });\n    }\n  }\n  \n  return filteredProcesses;\n}\n\n/**\n * Prepara os dados para preencher o template HTML\n */\nfunction prepareTemplateData(data: ReportData) {\n  const filteredProcesses = filterReportData(data);\n  \n  // Status counts\n  const statusCounts = {\n    draft: filteredProcesses.filter(p => p.status === 'draft').length,\n    in_progress: filteredProcesses.filter(p => p.status === 'in_progress').length,\n    completed: filteredProcesses.filter(p => p.status === 'completed').length,\n    canceled: filteredProcesses.filter(p => p.status === 'canceled').length,\n  };\n  \n  // Modalidade counts\n  const modalityCounts = new Map<number, number>();\n  filteredProcesses.forEach(p => {\n    const count = modalityCounts.get(p.modalityId) || 0;\n    modalityCounts.set(p.modalityId, count + 1);\n  });\n  \n  const modalityData = Array.from(modalityCounts.entries())\n    .map(([id, count]) => {\n      const modality = data.modalities.find(m => m.id === id);\n      return {\n        name: modality?.name || `Modalidade ${id}`,\n        count: count,\n        height: 0, // será calculado depois\n        color: ''\n      };\n    })\n    .sort((a, b) => b.count - a.count);\n  \n  // Cores para gráficos\n  const colors = [\n    'var(--primary-light)',\n    'var(--secondary)',\n    'var(--accent)',\n    'var(--success)',\n    'var(--warning)'\n  ];\n  \n  // Calcular altura relativa para barras\n  const maxModalityCount = Math.max(...modalityData.map(m => m.count), 1);\n  modalityData.forEach((item, index) => {\n    item.height = (item.count / maxModalityCount) * 80;  // 80% da altura máxima\n    item.color = colors[index % colors.length];\n  });\n  \n  // Processos recentes formatados para tabela\n  const recentProcesses = filteredProcesses\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 10)\n    .map(p => {\n      const modality = data.modalities.find(m => m.id === p.modalityId);\n      const responsible = data.users.find(u => u.id === p.responsibleId);\n      \n      let statusLabel = 'Desconhecido';\n      let statusClass = '';\n      \n      switch(p.status) {\n        case 'draft':\n          statusLabel = 'Rascunho';\n          statusClass = 'draft';\n          break;\n        case 'in_progress':\n          statusLabel = 'Em Andamento';\n          statusClass = 'in-progress';\n          break;\n        case 'completed':\n          statusLabel = 'Concluído';\n          statusClass = 'completed';\n          break;\n        case 'canceled':\n          statusLabel = 'Cancelado';\n          statusClass = 'canceled';\n          break;\n      }\n      \n      return {\n        pbdocNumber: p.pbdocNumber,\n        description: p.description.length > 50 ? p.description.substring(0, 50) + '...' : p.description,\n        modality: modality?.name || 'N/A',\n        responsible: responsible?.fullName || 'N/A',\n        statusLabel,\n        statusClass\n      };\n    });\n  \n  // Criar itens para a timeline\n  const timelineItems = [\n    {\n      position: 'timeline-left',\n      date: 'Estatísticas Gerais',\n      title: 'Visão Geral',\n      description: 'Resumo dos processos licitatórios do período selecionado.',\n      stats: `Total: ${filteredProcesses.length} processos`\n    },\n    {\n      position: 'timeline-right',\n      date: 'Processos por Status',\n      title: 'Distribuição de Status',\n      description: `Análise da distribuição de status dos processos.`,\n      stats: `Concluídos: ${statusCounts.completed} | Em Andamento: ${statusCounts.in_progress}`\n    },\n    {\n      position: 'timeline-left',\n      date: 'Modalidades',\n      title: 'Principais Modalidades',\n      description: 'As modalidades de licitação mais utilizadas neste período.',\n      stats: modalityData.length > 0 ? `Mais comum: ${modalityData[0].name}` : 'Nenhuma modalidade'\n    },\n    {\n      position: 'timeline-right',\n      date: 'Conclusão',\n      title: 'Eficiência do Processo',\n      description: 'Análise de eficiência baseada na proporção de processos concluídos.',\n      stats: `Taxa de conclusão: ${Math.round((statusCounts.completed / Math.max(filteredProcesses.length, 1)) * 100)}%`\n    }\n  ];\n  \n  // Departamento selecionado\n  let selectedDepartment = 'Todos';\n  if (data.filters.department && data.filters.department !== 'all' && data.departments) {\n    const deptId = parseInt(data.filters.department);\n    const dept = data.departments.find(d => d.id === deptId);\n    if (dept) {\n      selectedDepartment = dept.name;\n    }\n  }\n  \n  return {\n    date: new Date().toLocaleDateString('pt-BR'),\n    department: selectedDepartment,\n    user: data.users[0]?.fullName || 'Usuário do Sistema',\n    totalProcesses: filteredProcesses.length,\n    completedProcesses: statusCounts.completed,\n    inProgressProcesses: statusCounts.in_progress,\n    draftProcesses: statusCounts.draft,\n    canceledProcesses: statusCounts.canceled,\n    modalityData,\n    processes: recentProcesses,\n    timelineItems\n  };\n}\n\n/**\n * Gera HTML com os dados do relatório aplicados ao template\n */\nfunction generateHTML(templatePath: string, data: any): string {\n  let html = fs.readFileSync(templatePath, 'utf8');\n  \n  // Substituir variáveis simples\n  const simpleVars = [\n    'date', 'department', 'user', 'totalProcesses', 'completedProcesses', \n    'inProgressProcesses', 'draftProcesses', 'canceledProcesses'\n  ];\n  \n  simpleVars.forEach(key => {\n    const regex = new RegExp(`{{${key}}}`, 'g');\n    html = html.replace(regex, data[key].toString());\n  });\n  \n  // Substituir arrays usando o formato #each\n  function processEach(html: string, arrayName: string, array: any[]): string {\n    const eachRegex = new RegExp(`{{#each ${arrayName}}}([\\\\s\\\\S]*?){{/each}}`, 'g');\n    return html.replace(eachRegex, (match, template) => {\n      return array.map(item => {\n        let itemHTML = template;\n        // Substituir propriedades do item\n        Object.keys(item).forEach(key => {\n          const propRegex = new RegExp(`{{this\\\\.${key}}}`, 'g');\n          itemHTML = itemHTML.replace(propRegex, item[key].toString());\n        });\n        return itemHTML;\n      }).join('');\n    });\n  }\n  \n  html = processEach(html, 'modalityData', data.modalityData);\n  html = processEach(html, 'processes', data.processes);\n  html = processEach(html, 'timelineItems', data.timelineItems);\n  \n  return html;\n}\n\n/**\n * Gera um relatório PDF moderno usando Puppeteer\n */\nexport async function generateModernPdfReport(data: ReportData): Promise<void> {\n  try {\n    const templateData = prepareTemplateData(data);\n    \n    // Caminho do template HTML\n    const templatePath = path.resolve('./client/src/lib/utils/reportTemplate.html');\n    \n    // Gerar HTML com os dados aplicados\n    const html = generateHTML(templatePath, templateData);\n    \n    // Lançar browser Puppeteer\n    const browser = await puppeteer.launch({\n      args: ['--no-sandbox', '--disable-setuid-sandbox'],\n      headless: true\n    });\n    \n    const page = await browser.newPage();\n    \n    // Definir viewport para widescreen (1280px de largura)\n    await page.setViewport({\n      width: 1280,\n      height: 1800,\n      deviceScaleFactor: 1,\n    });\n    \n    // Carregar o HTML\n    await page.setContent(html, { waitUntil: 'networkidle0' });\n    \n    // Gerar nome do arquivo\n    const fileName = `relatorio-seap-${new Date().toLocaleDateString('pt-BR').replaceAll('/', '-')}.pdf`;\n    \n    // Gerar PDF\n    const pdf = await page.pdf({\n      format: 'A4',\n      landscape: true,\n      printBackground: true,\n      margin: { top: '0mm', right: '0mm', bottom: '0mm', left: '0mm' },\n      path: fileName,\n    });\n    \n    await browser.close();\n    \n    // Abrir o PDF no navegador\n    const pdfUrl = URL.createObjectURL(new Blob([pdf], { type: 'application/pdf' }));\n    window.open(pdfUrl);\n    \n    console.log(`PDF gerado com sucesso: ${fileName}`);\n  } catch (error) {\n    console.error('Erro ao gerar relatório PDF moderno:', error);\n    alert('Ocorreu um erro ao gerar o relatório PDF. Por favor, tente novamente.');\n  }\n}","size_bytes":9745},"client/src/lib/utils/modernPdfGenerator.ts":{"content":"import { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport autoTable from 'jspdf-autotable';\nimport { Process, User, BiddingModality, ResourceSource, Department } from \"@shared/schema\";\n\n\n\ninterface ReportData {\n  processes: Process[];\n  users: User[];\n  modalities: BiddingModality[];\n  sources: ResourceSource[];\n  departments?: Department[];\n  filters: {\n    department?: string;\n    month?: string;\n    year?: string;\n  };\n  reportType: string;\n}\n\n/**\n * Filtra os processos com base nos filtros selecionados\n */\nfunction filterReportData(data: ReportData): Process[] {\n  let filteredProcesses = [...data.processes];\n  \n  // Filtrar por mês\n  if (data.filters.month && data.filters.month !== \"all\") {\n    const monthIndex = parseInt(data.filters.month) - 1;\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processMonth = new Date(process.createdAt).getMonth();\n      return processMonth === monthIndex;\n    });\n  }\n  \n  // Filtrar por ano\n  if (data.filters.year) {\n    const year = parseInt(data.filters.year);\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processYear = new Date(process.createdAt).getFullYear();\n      return processYear === year;\n    });\n  }\n  \n  // Filtrar por departamento\n  if (data.filters.department && data.filters.department !== \"all\" && data.departments) {\n    const departmentId = parseInt(data.filters.department);\n    const department = data.departments.find(d => d.id === departmentId);\n    \n    if (department) {\n      filteredProcesses = filteredProcesses.filter(process => {\n        const user = data.users.find(u => u.id === process.responsibleId);\n        return user?.department === department.name;\n      });\n    }\n  }\n  \n  return filteredProcesses;\n}\n\n/**\n * Gera um relatório PDF com layout moderno em formato widescreen\n */\nexport function generateModernPdf(data: ReportData): void {\n  try {\n    // Filtrar dados conforme os critérios\n    const filteredProcesses = filterReportData(data);\n    \n    // Criar estatísticas\n    const statusCounts = {\n      draft: filteredProcesses.filter(p => p.status === 'draft').length,\n      in_progress: filteredProcesses.filter(p => p.status === 'in_progress').length,\n      completed: filteredProcesses.filter(p => p.status === 'completed').length,\n      canceled: filteredProcesses.filter(p => p.status === 'canceled').length,\n    };\n    \n    // Estatísticas por modalidade\n    const modalityCounts = new Map<number, number>();\n    filteredProcesses.forEach(p => {\n      const count = modalityCounts.get(p.modalityId) || 0;\n      modalityCounts.set(p.modalityId, count + 1);\n    });\n    \n    const modalityData = Array.from(modalityCounts.entries())\n      .map(([id, count]) => {\n        const modality = data.modalities.find(m => m.id === id);\n        return {\n          name: modality?.name || `Modalidade ${id}`,\n          count\n        };\n      })\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n    \n    // Estatísticas por fonte\n    const sourceCounts = new Map<number, number>();\n    filteredProcesses.forEach(p => {\n      const count = sourceCounts.get(p.sourceId) || 0;\n      sourceCounts.set(p.sourceId, count + 1);\n    });\n    \n    const sourceData = Array.from(sourceCounts.entries())\n      .map(([id, count]) => {\n        const source = data.sources.find(s => s.id === id);\n        return {\n          name: source ? `Fonte ${source.code}` : `Fonte ${id}`,\n          count\n        };\n      })\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n    \n    // Criar um novo documento PDF com orientação paisagem (widescreen)\n    const doc = new jsPDF({\n      orientation: 'landscape',\n      unit: 'mm',\n      format: 'a4'\n    });\n    \n    // Configurar dimensões do documento\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n    const margin = 15;\n    \n    // ----- CABEÇALHO DO RELATÓRIO -----\n    \n    // Fundo do cabeçalho\n    doc.setFillColor(30, 64, 175); // Azul escuro\n    doc.rect(0, 0, pageWidth, 30, 'F');\n    \n    // Título principal\n    doc.setTextColor(255, 255, 255);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.setFontSize(24);\n    doc.text(\"Relatório SEAP-PB\", margin, 15);\n    \n    // Subtítulo\n    doc.setFontSize(12);\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.text(\"Sistema de Controle de Processos de Licitação\", margin, 22);\n    \n    // Data do relatório\n    doc.setFontSize(10);\n    doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, pageWidth - margin, 15, { align: 'right' });\n    \n    // Filtros aplicados\n    let departmentInfo = \"Todos os departamentos\";\n    if (data.filters.department && data.filters.department !== 'all' && data.departments) {\n      const deptId = parseInt(data.filters.department);\n      const dept = data.departments.find(d => d.id === deptId);\n      if (dept) {\n        departmentInfo = `Departamento: ${dept.name}`;\n      }\n    }\n    doc.text(departmentInfo, pageWidth - margin, 22, { align: 'right' });\n    \n    // ----- CARTÕES DE ESTATÍSTICAS -----\n    const statCardsY = 45;\n    const cardWidth = (pageWidth - (margin * 2) - 30) / 4;\n    const cardHeight = 30;\n    \n    // Desenhar cards de estatísticas\n    const drawStatCard = (title: string, value: number, x: number, y: number, colorR: number, colorG: number, colorB: number) => {\n      // Fundo do card\n      doc.setFillColor(255, 255, 255);\n      doc.rect(x, y, cardWidth, cardHeight, 'F');\n      \n      // Borda superior colorida\n      doc.setFillColor(colorR, colorG, colorB);\n      doc.rect(x, y, cardWidth, 4, 'F');\n      \n      // Valor (grande e centralizado)\n      doc.setFontSize(18);\n      doc.setTextColor(colorR, colorG, colorB);\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(value.toString(), x + cardWidth / 2, y + 20, { align: 'center' });\n      \n      // Título\n      doc.setFontSize(10);\n      doc.setTextColor(100, 100, 100);\n      doc.setFont(\"helvetica\", \"normal\");\n      doc.text(title, x + cardWidth / 2, y + 27, { align: 'center' });\n    }\n    \n    // Desenhar os 4 cards de estatísticas\n    drawStatCard(\"Total de Processos\", filteredProcesses.length, margin, statCardsY, 59, 130, 246); // Azul\n    drawStatCard(\"Em Andamento\", statusCounts.in_progress, margin + cardWidth + 10, statCardsY, 245, 158, 11); // Amarelo\n    drawStatCard(\"Concluídos\", statusCounts.completed, margin + (cardWidth + 10) * 2, statCardsY, 16, 185, 129); // Verde\n    drawStatCard(\"Cancelados\", statusCounts.canceled, margin + (cardWidth + 10) * 3, statCardsY, 156, 163, 175); // Cinza\n    \n    // ----- SEÇÃO DE GRÁFICOS -----\n    \n    // Título da seção\n    doc.setFontSize(14);\n    doc.setTextColor(30, 64, 175);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.text(\"Visão Geral dos Processos\", margin, 90);\n    \n    // Linha separadora\n    doc.setDrawColor(220, 220, 220);\n    doc.setLineWidth(0.5);\n    doc.line(margin, 94, pageWidth - margin, 94);\n    \n    // ----- GRÁFICO DE PIZZA (STATUS DE PROCESSOS) -----\n    \n    // Posicionar o gráfico\n    const pieX = margin + 60;\n    const pieY = 125;\n    const pieRadius = 25;\n    \n    // Desenhar os setores com base nas proporções\n    const total = filteredProcesses.length || 1;\n    let startAngle = 0;\n    \n    // Cores para os status\n    const statusColors = {\n      completed: [16, 185, 129], // Verde #10B981\n      in_progress: [245, 158, 11], // Amarelo #F59E0B\n      draft: [240, 249, 255], // Azul claro quase branco #F0F9FF\n      canceled: [240, 249, 255], // Azul claro quase branco #F0F9FF\n      overdue: [239, 68, 68]  // Vermelho #EF4444\n    };\n    \n    // Desenhar gráfico de pizza se houver processos\n    if (filteredProcesses.length > 0) {\n      // Preparar dados para o gráfico e legenda\n      // Mapear diretamente as cores do COLORS para os dados de status\n      const COLORS_MAP = {\n        \"completed\": [16, 185, 129],  // Verde #10B981\n        \"in_progress\": [245, 158, 11], // Amarelo #F59E0B\n        \"draft\": [156, 163, 175],     // Cinza #9CA3AF\n        \"canceled\": [156, 163, 175],  // Cinza #9CA3AF\n        \"overdue\": [239, 68, 68]      // Vermelho #EF4444\n      };\n      \n      // Preparar os dados para o gráfico com cores consistentes\n      const statusData = [\n        { status: \"completed\", count: statusCounts.completed, label: \"Concluídos\", color: COLORS_MAP.completed },\n        { status: \"in_progress\", count: statusCounts.in_progress, label: \"Em Andamento\", color: COLORS_MAP.in_progress },\n        { status: \"draft\", count: statusCounts.draft, label: \"Rascunho\", color: COLORS_MAP.draft },\n        { status: \"canceled\", count: statusCounts.canceled, label: \"Cancelados\", color: COLORS_MAP.canceled }\n      ].filter(item => item.count > 0);\n      \n      // Desenhar um gráfico de pizza colorido com as fatias corretas\n      // Primeiro, vamos manter os dados ordenados para garantir consistência\n      const sortedStatusData = [...statusData];\n      \n      // Desenhar primeiro o círculo base completo\n      doc.setFillColor(240, 240, 240); // Cor de fundo cinza claro\n      doc.circle(pieX, pieY, pieRadius, 'F');\n      \n      // Parâmetros para desenhar a pizza em camadas (fatias empilhadas)\n      let remainingAngle = 360; // Começamos com círculo completo\n      let startAngle = 0;\n      \n      // Para cada status, desenhamos uma fatia\n      sortedStatusData.forEach(item => {\n        // Calcular a proporção deste status\n        const percentage = item.count / total;\n        const angleSize = percentage * 360;\n        \n        // Determinar as coordenadas para desenhar a fatia\n        // Vamos desenhar vários triângulos para criar o efeito de setores circulares\n        const steps = Math.max(1, Math.floor(angleSize / 6));\n        const angleStep = angleSize / steps;\n        \n        // Definir a cor para esta fatia\n        doc.setFillColor(item.color[0], item.color[1], item.color[2]);\n        \n        // Desenhar o setor circular como múltiplos triângulos\n        for (let i = 0; i < steps; i++) {\n          // Ângulos inicial e final para este triângulo\n          const start = startAngle + (i * angleStep);\n          const end = startAngle + ((i + 1) * angleStep);\n          \n          // Converter para radianos e ajustar para começar do topo\n          const startRad = (start - 90) * Math.PI / 180;\n          const endRad = (end - 90) * Math.PI / 180;\n          \n          // Calcular pontos na circunferência\n          const x1 = pieX + pieRadius * Math.cos(startRad);\n          const y1 = pieY + pieRadius * Math.sin(startRad);\n          const x2 = pieX + pieRadius * Math.cos(endRad);\n          const y2 = pieY + pieRadius * Math.sin(endRad);\n          \n          // Desenhar o triângulo do centro até a circunferência\n          doc.triangle(pieX, pieY, x1, y1, x2, y2, 'F');\n        }\n        \n        // Avançar o ângulo inicial para a próxima fatia\n        startAngle += angleSize;\n        \n        // Adicionar um pequeno indicador de porcentagem se a fatia for grande o suficiente\n        if (angleSize > 36) { // Pelo menos 10% do círculo\n          const midAngle = startAngle - (angleSize / 2);\n          const midRad = (midAngle - 90) * Math.PI / 180;\n          const labelRadius = pieRadius * 0.7; // Posição do texto dentro da fatia\n          \n          const labelX = pieX + labelRadius * Math.cos(midRad);\n          const labelY = pieY + labelRadius * Math.sin(midRad);\n          \n          // Adicionar texto branco com a quantidade\n          doc.setFontSize(8);\n          doc.setTextColor(255, 255, 255);\n          doc.text(`${item.count}`, labelX, labelY, { align: 'center' });\n        }\n      });\n      \n      // Círculo branco no centro para criar efeito de rosca\n      doc.setFillColor(255, 255, 255);\n      doc.circle(pieX, pieY, pieRadius * 0.6, 'F');\n      \n      // Adicionar número total no centro\n      doc.setTextColor(50, 50, 50);\n      doc.setFontSize(12);\n      doc.setFont(\"helvetica\", \"bold\");\n      doc.text(total.toString(), pieX, pieY + 4, { align: 'center' });\n      \n      // Legendas com maior espaçamento\n      let legendY = pieY - 20;\n      statusData.forEach((item, index) => {\n        const color = item.color;\n        const percentage = Math.round((item.count / total) * 100);\n        \n        // Quadrado colorido\n        doc.setFillColor(color[0], color[1], color[2]);\n        doc.rect(pieX + 40, legendY + (index * 15), 5, 5, 'F');\n        \n        // Texto da legenda\n        doc.setTextColor(50, 50, 50);\n        doc.setFontSize(8);\n        doc.setFont(\"helvetica\", \"normal\");\n        doc.text(`${item.label}: ${item.count} (${percentage}%)`, pieX + 48, legendY + (index * 15) + 4);\n      });\n    } else {\n      // Mensagem caso não haja dados\n      doc.setTextColor(100, 100, 100);\n      doc.setFontSize(10);\n      doc.text(\"Não há dados disponíveis\", pieX, pieY, { align: 'center' });\n    }\n    \n    // ----- GRÁFICO DE BARRAS (MODALIDADES) -----\n    \n    // Posicionar o gráfico\n    const barChartX = pageWidth / 2 + 10;\n    const barChartY = 160;\n    const barChartWidth = pageWidth - barChartX - margin;\n    const barChartHeight = 40;\n    \n    // Título do gráfico\n    doc.setTextColor(50, 50, 50);\n    doc.setFontSize(10);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.text(\"Processos por Modalidade\", barChartX + barChartWidth / 2, 105, { align: 'center' });\n    \n    // Dados ordenados\n    const sortedModalityData = [...modalityData].sort((a, b) => b.count - a.count);\n    const maxCount = Math.max(...sortedModalityData.map(m => m.count), 1);\n    \n    // Cores para as barras - array de cores diferentes (mantendo cores originais para gráficos gerais)\n    const barColors = [\n      [245, 158, 11],  // Amarelo #F59E0B (Em Andamento)\n      [16, 185, 129],  // Verde #10B981 (Concluído)\n      [239, 68, 68],   // Vermelho #EF4444 (Atrasado)\n      [156, 163, 175], // Cinza #9CA3AF (Cancelado)\n      [59, 130, 246],  // Azul\n      [168, 85, 247],  // Roxo\n      [14, 165, 233],  // Azul claro\n      [249, 115, 22]   // Laranja\n    ];\n    \n    // Desenhar barras\n    const barWidth = Math.min(20, barChartWidth / (sortedModalityData.length * 2));\n    const barGap = barWidth / 2;\n    \n    sortedModalityData.forEach((modality, index) => {\n      const barHeight = (modality.count / maxCount) * barChartHeight;\n      const barX = barChartX + (index * (barWidth + barGap));\n      \n      // Escolher cor para esta barra\n      const colorIndex = index % barColors.length;\n      const barColor = barColors[colorIndex];\n      \n      // Barra com cor diferente para cada modalidade\n      doc.setFillColor(barColor[0], barColor[1], barColor[2]);\n      doc.rect(barX, barChartY - barHeight, barWidth, barHeight, 'F');\n      \n      // Valor acima da barra\n      doc.setTextColor(50, 50, 50);\n      doc.setFontSize(8);\n      doc.text(modality.count.toString(), barX + barWidth / 2, barChartY - barHeight - 2, { align: 'center' });\n      \n      // Nome da modalidade (abreviado)\n      const displayName = modality.name.length > 12 ? modality.name.substring(0, 12) + '...' : modality.name;\n      doc.setFontSize(7);\n      doc.text(displayName, barX + barWidth / 2, barChartY + 5, { align: 'center' });\n    });\n    \n    // ----- ADICIONAR RODAPÉ NA PRIMEIRA PÁGINA -----\n    const footerY = pageHeight - 10;\n    \n    // Linha separadora\n    doc.setDrawColor(200, 200, 200);\n    doc.setLineWidth(0.5);\n    doc.line(margin, footerY - 5, pageWidth - margin, footerY - 5);\n    \n    // Texto do rodapé\n    doc.setFontSize(8);\n    doc.setTextColor(150, 150, 150);\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.text('SEAP-PB - Secretaria de Estado da Administração Penitenciária', pageWidth / 2, footerY, { align: 'center' });\n    \n    // ----- ADICIONAR NOVA PÁGINA PARA TABELA DE PROCESSOS -----\n    doc.addPage();\n    \n    // ----- CABEÇALHO DA SEGUNDA PÁGINA -----\n    doc.setFillColor(30, 64, 175); // Azul escuro\n    doc.rect(0, 0, pageWidth, 20, 'F');\n    \n    // Título\n    doc.setTextColor(255, 255, 255);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.setFontSize(12);\n    doc.text(\"Relatório SEAP-PB - Processos Recentes\", margin, 14);\n    \n    // Data\n    doc.setFontSize(8);\n    doc.text(`Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, pageWidth - margin, 14, { align: 'right' });\n    \n    // ----- TABELA DE PROCESSOS RECENTES -----\n    \n    // Título da seção\n    doc.setFontSize(14);\n    doc.setTextColor(30, 64, 175);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.text(\"Processos Recentes\", margin, 30);\n    \n    // Linha separadora\n    doc.setDrawColor(220, 220, 220);\n    doc.setLineWidth(0.5);\n    doc.line(margin, 34, pageWidth - margin, 34);\n    \n    // Preparar dados para a tabela\n    const tableData = filteredProcesses\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, 20) // Aumentamos o número de processos exibidos na tabela\n      .map(p => {\n        const modality = data.modalities.find(m => m.id === p.modalityId);\n        const responsible = data.users.find(u => u.id === p.responsibleId);\n        const description = p.description.length > 50 ? p.description.substring(0, 50) + '...' : p.description;\n        \n        let statusText = '';\n        switch(p.status) {\n          case 'draft': statusText = 'Rascunho'; break;\n          case 'in_progress': statusText = 'Em Andamento'; break;\n          case 'completed': statusText = 'Concluído'; break;\n          case 'canceled': statusText = 'Cancelado'; break;\n        }\n        \n        return [\n          p.pbdocNumber,\n          description,\n          modality?.name || 'N/A',\n          responsible?.fullName || 'N/A',\n          statusText,\n          new Date(p.createdAt).toLocaleDateString('pt-BR')\n        ];\n      });\n    \n    // Definir cabeçalhos da tabela\n    const headers = [\n      'PBDOC', \n      'Descrição', \n      'Modalidade', \n      'Responsável', \n      'Status',\n      'Data de Criação'\n    ];\n    \n    // Desenhar a tabela\n    autoTable(doc, {\n      head: [headers],\n      body: tableData,\n      startY: 40,\n      margin: { left: margin, right: margin },\n      headStyles: {\n        fillColor: [59, 130, 246],\n        textColor: [255, 255, 255],\n        fontStyle: 'bold'\n      },\n      alternateRowStyles: {\n        fillColor: [245, 247, 250]\n      },\n      styles: {\n        font: 'helvetica',\n        fontSize: 9 // Aumentei o tamanho da fonte para melhor legibilidade\n      },\n      columnStyles: {\n        0: { cellWidth: 25 }, // PBDOC\n        1: { cellWidth: 'auto' }, // Descrição - Largura automática\n        2: { cellWidth: 45 }, // Modalidade\n        3: { cellWidth: 45 }, // Responsável\n        4: { cellWidth: 30 }, // Status\n        5: { cellWidth: 30 }  // Data de Criação\n      }\n    });\n    \n    // ----- RODAPÉ DA SEGUNDA PÁGINA -----\n    \n    // Linha separadora\n    doc.setDrawColor(200, 200, 200);\n    doc.setLineWidth(0.5);\n    doc.line(margin, pageHeight - 15, pageWidth - margin, pageHeight - 15);\n    \n    // Texto do rodapé\n    doc.setFontSize(8);\n    doc.setTextColor(150, 150, 150);\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.text('SEAP-PB - Secretaria de Estado da Administração Penitenciária', pageWidth / 2, footerY, { align: 'center' });\n    \n    // Gerar nome do arquivo\n    const fileName = `relatorio-seap-${new Date().toLocaleDateString('pt-BR').replaceAll('/', '-')}.pdf`;\n    \n    // Salvar o PDF\n    doc.save(fileName);\n  } catch (error) {\n    console.error('Erro ao gerar relatório PDF moderno:', error);\n    alert('Ocorreu um erro ao gerar o relatório PDF. Por favor, tente novamente.');\n  }\n}","size_bytes":19640},"client/src/lib/utils/modernReportGenerator.ts":{"content":"import { Process, User, BiddingModality, ResourceSource, Department } from \"@shared/schema\";\nimport htmlPdf from 'html-pdf-node';\n\ninterface ReportData {\n  processes: Process[];\n  users: User[];\n  modalities: BiddingModality[];\n  sources: ResourceSource[];\n  departments?: Department[];\n  filters: {\n    department?: string;\n    month?: string;\n    year?: string;\n  };\n  reportType: string;\n}\n\n/**\n * Filtra os processos com base nos filtros selecionados\n */\nfunction filterReportData(data: ReportData): Process[] {\n  let filteredProcesses = [...data.processes];\n  \n  // Filtrar por mês\n  if (data.filters.month && data.filters.month !== \"all\") {\n    const monthIndex = parseInt(data.filters.month) - 1;\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processMonth = new Date(process.createdAt).getMonth();\n      return processMonth === monthIndex;\n    });\n  }\n  \n  // Filtrar por ano\n  if (data.filters.year) {\n    const year = parseInt(data.filters.year);\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processYear = new Date(process.createdAt).getFullYear();\n      return processYear === year;\n    });\n  }\n  \n  // Filtrar por departamento\n  if (data.filters.department && data.filters.department !== \"all\" && data.departments) {\n    const departmentId = parseInt(data.filters.department);\n    const department = data.departments.find(d => d.id === departmentId);\n    \n    if (department) {\n      filteredProcesses = filteredProcesses.filter(process => {\n        const user = data.users.find(u => u.id === process.responsibleId);\n        return user?.department === department.name;\n      });\n    }\n  }\n  \n  return filteredProcesses;\n}\n\n/**\n * Gera um relatório em PDF moderno, com layout widescreen e estilo contemporâneo\n */\nexport async function generateModernReport(data: ReportData): Promise<void> {\n  try {\n    const filteredProcesses = filterReportData(data);\n    \n    // Status counts\n    const statusCounts = {\n      draft: filteredProcesses.filter(p => p.status === 'draft').length,\n      in_progress: filteredProcesses.filter(p => p.status === 'in_progress').length,\n      completed: filteredProcesses.filter(p => p.status === 'completed').length,\n      canceled: filteredProcesses.filter(p => p.status === 'canceled').length,\n    };\n    \n    // Estatísticas por modalidade\n    const modalityCounts = new Map<number, number>();\n    filteredProcesses.forEach(p => {\n      const count = modalityCounts.get(p.modalityId) || 0;\n      modalityCounts.set(p.modalityId, count + 1);\n    });\n    \n    const modalityData = Array.from(modalityCounts.entries())\n      .map(([id, count]) => {\n        const modality = data.modalities.find(m => m.id === id);\n        return {\n          name: modality?.name || `Modalidade ${id}`,\n          count\n        };\n      })\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n    \n    // Processos recentes\n    const recentProcesses = filteredProcesses\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, 10)\n      .map(p => {\n        const modality = data.modalities.find(m => m.id === p.modalityId);\n        const responsible = data.users.find(u => u.id === p.responsibleId);\n        \n        let statusClass = '';\n        let statusLabel = '';\n        \n        switch(p.status) {\n          case 'draft':\n            statusClass = 'bg-gray-200 text-gray-800';\n            statusLabel = 'Rascunho';\n            break;\n          case 'in_progress':\n            statusClass = 'bg-blue-200 text-blue-800';\n            statusLabel = 'Em Andamento';\n            break;\n          case 'completed':\n            statusClass = 'bg-green-200 text-green-800';\n            statusLabel = 'Concluído';\n            break;\n          case 'canceled':\n            statusClass = 'bg-red-200 text-red-800';\n            statusLabel = 'Cancelado';\n            break;\n        }\n        \n        return {\n          pbdocNumber: p.pbdocNumber,\n          description: p.description.length > 60 ? p.description.substring(0, 60) + '...' : p.description,\n          modality: modality?.name || 'N/A',\n          responsible: responsible?.fullName || 'N/A',\n          statusClass,\n          statusLabel,\n          createdAt: new Date(p.createdAt).toLocaleDateString('pt-BR')\n        };\n      });\n    \n    // Estatísticas por fonte\n    const sourceCounts = new Map<number, number>();\n    filteredProcesses.forEach(p => {\n      const count = sourceCounts.get(p.sourceId) || 0;\n      sourceCounts.set(p.sourceId, count + 1);\n    });\n    \n    const sourceData = Array.from(sourceCounts.entries())\n      .map(([id, count]) => {\n        const source = data.sources.find(s => s.id === id);\n        return {\n          name: source?.code || `Fonte ${id}`,\n          description: source?.description || '',\n          count\n        };\n      })\n      .sort((a, b) => b.count - a.count)\n      .slice(0, 5);\n    \n    // Converte contagens para porcentagens para gráficos\n    const maxModalityCount = Math.max(...modalityData.map(m => m.count), 1);\n    const modalityChartData = modalityData.map(m => ({\n      ...m,\n      percentage: Math.round((m.count / maxModalityCount) * 100)\n    }));\n    \n    // Departamento selecionado\n    let selectedDepartment = 'Todos';\n    if (data.filters.department && data.filters.department !== 'all' && data.departments) {\n      const deptId = parseInt(data.filters.department);\n      const dept = data.departments.find(d => d.id === deptId);\n      if (dept) {\n        selectedDepartment = dept.name;\n      }\n    }\n    \n    // Gerar o HTML para o relatório\n    const html = `\n    <!DOCTYPE html>\n    <html lang=\"pt-BR\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>Relatório SEAP-PB</title>\n      <style>\n        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Poppins:wght@400;500;600;700&display=swap');\n        \n        :root {\n          --primary: #1e40af;\n          --primary-light: #3b82f6;\n          --secondary: #10b981;\n          --accent: #f59e0b;\n          --danger: #ef4444;\n          --dark: #1f2937;\n          --light: #f9fafb;\n          --gray: #F0F9FF;\n        }\n        \n        * {\n          margin: 0;\n          padding: 0;\n          box-sizing: border-box;\n        }\n        \n        body {\n          font-family: 'Inter', sans-serif;\n          font-size: 14px;\n          line-height: 1.5;\n          color: var(--dark);\n          background-color: var(--light);\n          width: 100%;\n          max-width: 100%;\n        }\n        \n        h1, h2, h3, h4, h5, h6 {\n          font-family: 'Poppins', sans-serif;\n          margin-bottom: 0.5rem;\n          font-weight: 600;\n          line-height: 1.2;\n        }\n        \n        .container {\n          width: 100%;\n          max-width: 1280px;\n          margin: 0 auto;\n          padding: 0;\n        }\n        \n        .header {\n          background: linear-gradient(to right, #1e40af, #3b82f6);\n          color: white;\n          padding: 2rem;\n          position: relative;\n        }\n        \n        .header h1 {\n          font-size: 28px;\n          margin-bottom: 0.25rem;\n        }\n        \n        .header p {\n          font-size: 16px;\n          opacity: 0.9;\n        }\n        \n        .header-meta {\n          display: flex;\n          gap: 2rem;\n          margin-top: 1rem;\n          font-size: 14px;\n        }\n        \n        .logo {\n          position: absolute;\n          top: 1.5rem;\n          right: 2rem;\n          max-height: 60px;\n          opacity: 0.9;\n        }\n        \n        .dashboard {\n          display: grid;\n          grid-template-columns: repeat(4, 1fr);\n          gap: 1.5rem;\n          padding: 1.5rem;\n        }\n        \n        .stats-grid {\n          display: grid;\n          grid-template-columns: repeat(4, 1fr);\n          gap: 1rem;\n          margin-bottom: 1.5rem;\n        }\n        \n        .stat-card {\n          background-color: white;\n          border-radius: 8px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n          padding: 1rem;\n          text-align: center;\n          position: relative;\n          overflow: hidden;\n        }\n        \n        .stat-card::before {\n          content: '';\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          height: 4px;\n        }\n        \n        .total-card::before { background-color: var(--primary); }\n        .progress-card::before { background-color: var(--primary-light); }\n        .completed-card::before { background-color: var(--secondary); }\n        .canceled-card::before { background-color: var(--danger); }\n        \n        .stat-number {\n          font-size: 28px;\n          font-weight: 700;\n          margin: 0.5rem 0;\n        }\n        \n        .stat-label {\n          font-size: 14px;\n          color: var(--gray);\n        }\n        \n        .chart-section {\n          background-color: white;\n          border-radius: 8px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n          padding: 1.5rem;\n          margin-bottom: 1.5rem;\n        }\n        \n        .section-title {\n          font-size: 18px;\n          margin-bottom: 1rem;\n          color: var(--dark);\n          border-bottom: 1px solid #eee;\n          padding-bottom: 0.75rem;\n        }\n        \n        .chart-grid {\n          display: grid;\n          grid-template-columns: repeat(2, 1fr);\n          gap: 1.5rem;\n        }\n        \n        .chart-container {\n          min-height: 300px;\n          position: relative;\n        }\n        \n        .pie-chart {\n          width: 180px;\n          height: 180px;\n          border-radius: 50%;\n          margin: 0 auto;\n          background: conic-gradient(\n            #10b981 0% ${statusCounts.completed > 0 ? (statusCounts.completed / filteredProcesses.length) * 360 : 0}deg,\n            #3b82f6 ${statusCounts.completed > 0 ? (statusCounts.completed / filteredProcesses.length) * 360 : 0}deg ${statusCounts.in_progress > 0 ? ((statusCounts.completed + statusCounts.in_progress) / filteredProcesses.length) * 360 : statusCounts.completed > 0 ? (statusCounts.completed / filteredProcesses.length) * 360 : 0}deg,\n            #F0F9FF ${statusCounts.in_progress > 0 ? ((statusCounts.completed + statusCounts.in_progress) / filteredProcesses.length) * 360 : statusCounts.completed > 0 ? (statusCounts.completed / filteredProcesses.length) * 360 : 0}deg ${statusCounts.draft > 0 ? ((statusCounts.completed + statusCounts.in_progress + statusCounts.draft) / filteredProcesses.length) * 360 : (statusCounts.in_progress > 0 ? ((statusCounts.completed + statusCounts.in_progress) / filteredProcesses.length) * 360 : statusCounts.completed > 0 ? (statusCounts.completed / filteredProcesses.length) * 360 : 0)}deg,\n            #ef4444 ${statusCounts.draft > 0 ? ((statusCounts.completed + statusCounts.in_progress + statusCounts.draft) / filteredProcesses.length) * 360 : (statusCounts.in_progress > 0 ? ((statusCounts.completed + statusCounts.in_progress) / filteredProcesses.length) * 360 : statusCounts.completed > 0 ? (statusCounts.completed / filteredProcesses.length) * 360 : 0)}deg 360deg\n          );\n          position: relative;\n        }\n        \n        .pie-chart::before {\n          content: '';\n          position: absolute;\n          width: 120px;\n          height: 120px;\n          background-color: white;\n          border-radius: 50%;\n          top: 30px;\n          left: 30px;\n        }\n        \n        .legend {\n          display: flex;\n          flex-wrap: wrap;\n          justify-content: center;\n          gap: 1rem;\n          margin-top: 2rem;\n        }\n        \n        .legend-item {\n          display: flex;\n          align-items: center;\n          margin-bottom: 0.5rem;\n        }\n        \n        .legend-color {\n          width: 12px;\n          height: 12px;\n          border-radius: 3px;\n          margin-right: 8px;\n        }\n        \n        .legend-completed { background-color: #10b981; }\n        .legend-progress { background-color: #3b82f6; }\n        .legend-draft { background-color: #F0F9FF; }\n        .legend-canceled { background-color: #ef4444; }\n        \n        .bar-chart {\n          height: 250px;\n          display: flex;\n          align-items: flex-end;\n          justify-content: space-around;\n          margin-top: 1rem;\n        }\n        \n        .bar {\n          width: 60px;\n          background-color: #3b82f6;\n          border-radius: 6px 6px 0 0;\n          position: relative;\n          transition: height 0.3s;\n        }\n        \n        .bar-label {\n          position: absolute;\n          bottom: -25px;\n          left: 0;\n          right: 0;\n          text-align: center;\n          font-size: 12px;\n        }\n        \n        .bar-value {\n          position: absolute;\n          top: -25px;\n          left: 0;\n          right: 0;\n          text-align: center;\n          font-weight: bold;\n          font-size: 14px;\n        }\n        \n        .process-table {\n          width: 100%;\n          border-collapse: collapse;\n          margin-top: 1rem;\n        }\n        \n        .process-table th {\n          text-align: left;\n          padding: 0.75rem 1rem;\n          background-color: #f9fafb;\n          font-weight: 600;\n          font-size: 14px;\n        }\n        \n        .process-table td {\n          padding: 0.75rem 1rem;\n          border-top: 1px solid #f3f4f6;\n          font-size: 14px;\n        }\n        \n        .process-table tr:hover td {\n          background-color: #f9fafb;\n        }\n        \n        .status-badge {\n          display: inline-block;\n          padding: 0.25rem 0.5rem;\n          border-radius: 9999px;\n          font-size: 12px;\n          font-weight: 500;\n        }\n        \n        .two-columns {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 1.5rem;\n        }\n        \n        .footer {\n          text-align: center;\n          padding: 1.5rem;\n          color: var(--gray);\n          border-top: 1px solid #f3f4f6;\n          font-size: 12px;\n        }\n        \n        /* Responsive - for display in PDF */\n        @media print {\n          body {\n            -webkit-print-color-adjust: exact !important;\n            print-color-adjust: exact !important;\n          }\n          \n          .container {\n            width: 1280px !important;\n          }\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"container\">\n        <header class=\"header\">\n          <h1>Relatório Infográfico SEAP-PB</h1>\n          <p>Sistema de Controle de Processos de Licitação</p>\n          <div class=\"header-meta\">\n            <span>Data: ${new Date().toLocaleDateString('pt-BR')}</span>\n            <span>Departamento: ${selectedDepartment}</span>\n            <span>Total de processos: ${filteredProcesses.length}</span>\n          </div>\n          <img src=\"https://paraiba.pb.gov.br/marca-do-governo/GovPBT.png\" alt=\"Logo do Governo da Paraíba\" class=\"logo\">\n        </header>\n        \n        <div class=\"dashboard\">\n          <div class=\"stats-grid\" style=\"grid-column: span 4;\">\n            <div class=\"stat-card total-card\">\n              <div class=\"stat-number\">${filteredProcesses.length}</div>\n              <div class=\"stat-label\">Total de Processos</div>\n            </div>\n            \n            <div class=\"stat-card progress-card\">\n              <div class=\"stat-number\">${statusCounts.in_progress}</div>\n              <div class=\"stat-label\">Em Andamento</div>\n            </div>\n            \n            <div class=\"stat-card completed-card\">\n              <div class=\"stat-number\">${statusCounts.completed}</div>\n              <div class=\"stat-label\">Concluídos</div>\n            </div>\n            \n            <div class=\"stat-card canceled-card\">\n              <div class=\"stat-number\">${statusCounts.canceled}</div>\n              <div class=\"stat-label\">Cancelados</div>\n            </div>\n          </div>\n          \n          <div class=\"chart-section\" style=\"grid-column: span 4;\">\n            <h2 class=\"section-title\">Visão Geral dos Processos</h2>\n            \n            <div class=\"chart-grid\">\n              <div class=\"chart-container\">\n                <h3 style=\"text-align: center; margin-bottom: 1rem;\">Distribuição por Status</h3>\n                <div class=\"pie-chart\"></div>\n                <div class=\"legend\">\n                  <div class=\"legend-item\">\n                    <div class=\"legend-color legend-completed\"></div>\n                    <span>Concluídos (${statusCounts.completed})</span>\n                  </div>\n                  <div class=\"legend-item\">\n                    <div class=\"legend-color legend-progress\"></div>\n                    <span>Em Andamento (${statusCounts.in_progress})</span>\n                  </div>\n                  <div class=\"legend-item\">\n                    <div class=\"legend-color legend-draft\"></div>\n                    <span>Rascunho (${statusCounts.draft})</span>\n                  </div>\n                  <div class=\"legend-item\">\n                    <div class=\"legend-color legend-canceled\"></div>\n                    <span>Cancelados (${statusCounts.canceled})</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div class=\"chart-container\">\n                <h3 style=\"text-align: center; margin-bottom: 1rem;\">Processos por Modalidade</h3>\n                <div class=\"bar-chart\">\n                  ${modalityChartData.map((modality, index) => `\n                    <div class=\"bar\" style=\"height: ${modality.percentage}%; background-color: ${index % 2 === 0 ? '#3b82f6' : '#4f46e5'};\">\n                      <div class=\"bar-value\">${modality.count}</div>\n                      <div class=\"bar-label\">${modality.name.substring(0, 12)}${modality.name.length > 12 ? '...' : ''}</div>\n                    </div>\n                  `).join('')}\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div class=\"chart-section\" style=\"grid-column: span 4;\">\n            <h2 class=\"section-title\">Processos Recentes</h2>\n            \n            <table class=\"process-table\">\n              <thead>\n                <tr>\n                  <th>PBDOC</th>\n                  <th>Descrição</th>\n                  <th>Modalidade</th>\n                  <th>Responsável</th>\n                  <th>Status</th>\n                  <th>Data</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${recentProcesses.map(process => `\n                  <tr>\n                    <td>${process.pbdocNumber}</td>\n                    <td>${process.description}</td>\n                    <td>${process.modality}</td>\n                    <td>${process.responsible}</td>\n                    <td><span class=\"status-badge ${process.statusClass}\">${process.statusLabel}</span></td>\n                    <td>${process.createdAt}</td>\n                  </tr>\n                `).join('')}\n              </tbody>\n            </table>\n          </div>\n          \n          <div class=\"chart-section\" style=\"grid-column: span 4;\">\n            <h2 class=\"section-title\">Fontes de Recursos</h2>\n            \n            <div class=\"two-columns\">\n              ${sourceData.map(source => `\n                <div style=\"background-color: #f9fafb; padding: 1rem; border-radius: 8px; margin-bottom: 1rem;\">\n                  <h3 style=\"margin-bottom: 0.5rem; color: #374151;\">${source.name}</h3>\n                  <p style=\"margin-bottom: 0.5rem; color: #6b7280; font-size: 14px;\">${source.description}</p>\n                  <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n                    <span style=\"font-weight: 600; color: #3b82f6;\">${source.count} processos</span>\n                    <span style=\"color: #6b7280; font-size: 12px;\">${Math.round((source.count / filteredProcesses.length) * 100)}% do total</span>\n                  </div>\n                </div>\n              `).join('')}\n            </div>\n          </div>\n        </div>\n        \n        <footer class=\"footer\">\n          <p>SEAP-PB - Secretaria de Estado da Administração Penitenciária | Relatório gerado em ${new Date().toLocaleDateString('pt-BR')}</p>\n        </footer>\n      </div>\n    </body>\n    </html>\n    `;\n    \n    // Configurações para geração do PDF\n    const options = {\n      format: 'A4',\n      landscape: true,\n      margin: { top: 0, right: 0, bottom: 0, left: 0 },\n      printBackground: true,\n      preferCSSPageSize: true\n    };\n    \n    // Conteúdo HTML para converter em PDF\n    const file = { content: html };\n    \n    // Gerar o PDF\n    htmlPdf.generatePdf(file, options).then(pdfBuffer => {\n      // Criar um Blob com o buffer do PDF\n      const blob = new Blob([pdfBuffer], { type: 'application/pdf' });\n      \n      // Criar uma URL para o Blob\n      const url = URL.createObjectURL(blob);\n      \n      // Abrir o PDF em uma nova janela\n      window.open(url);\n    });\n  } catch (error) {\n    console.error('Erro ao gerar relatório PDF moderno:', error);\n    alert('Ocorreu um erro ao gerar o relatório PDF. Por favor, tente novamente.');\n  }\n}","size_bytes":21211},"client/src/lib/utils/pdfExport.ts":{"content":"import { jsPDF } from \"jspdf\";\nimport \"jspdf-autotable\";\nimport {\n  Process,\n  User,\n  BiddingModality,\n  ResourceSource,\n  Department,\n} from \"@shared/schema\";\nimport { MONTHS } from \"../constants\";\n\ninterface ReportData {\n  processes: Process[];\n  users: User[];\n  modalities: BiddingModality[];\n  sources: ResourceSource[];\n  departments?: Department[];\n  filters: {\n    department?: string;\n    month?: string;\n    year?: string;\n  };\n  reportType: string;\n}\n\n/**\n * Filtra os processos com base nos filtros selecionados\n */\nfunction filterReportData(data: ReportData): Process[] {\n  let filteredProcesses = [...data.processes];\n\n  // Filtrar por mês\n  if (data.filters.month && data.filters.month !== \"all\") {\n    const monthIndex = parseInt(data.filters.month) - 1;\n    filteredProcesses = filteredProcesses.filter((process) => {\n      const processMonth = new Date(process.createdAt).getMonth();\n      return processMonth === monthIndex;\n    });\n  }\n\n  // Filtrar por ano\n  if (data.filters.year) {\n    const year = parseInt(data.filters.year);\n    filteredProcesses = filteredProcesses.filter((process) => {\n      const processYear = new Date(process.createdAt).getFullYear();\n      return processYear === year;\n    });\n  }\n\n  // Filtrar por departamento\n  if (\n    data.filters.department &&\n    data.filters.department !== \"all\" &&\n    data.departments\n  ) {\n    const departmentId = parseInt(data.filters.department);\n    const department = data.departments.find((d) => d.id === departmentId);\n\n    if (department) {\n      filteredProcesses = filteredProcesses.filter((process) => {\n        const user = data.users.find((u) => u.id === process.responsibleId);\n        return user?.department === department.name;\n      });\n    }\n  }\n\n  return filteredProcesses;\n}\n\n/**\n * Gera um relatório PDF no formato específico da imagem exemplo\n */\nexport function generatePdfReport(data: ReportData): void {\n  try {\n    // Criar novo documento PDF\n    const doc = new jsPDF();\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n    const margin = 15;\n    const marginBottom = 20;\n    const usableWidth = pageWidth - 2 * margin;\n\n    // Filtrar processos baseado nos critérios\n    const filteredProcesses = filterReportData(data);\n    const total = filteredProcesses.length || 1; // Evitar divisão por zero\n\n    // CABEÇALHO DO RELATÓRIO\n    doc.setFontSize(14);\n    doc.setTextColor(0, 51, 102);\n    doc.text(\"QUANTIDADE DE PROCESSOS\", margin, 25);\n\n    // Botão de filtros\n    doc.setFillColor(30, 144, 255);\n    doc.roundedRect(pageWidth - margin - 30, 18, 30, 10, 1, 1, \"F\");\n    doc.setTextColor(255, 255, 255);\n    doc.text(\"Filtros\", pageWidth - margin - 15, 25, { align: \"center\" });\n    doc.setTextColor(0, 0, 0);\n\n    // Layout do relatório\n    const startY = 40;\n    const chartHeight = 80;\n    const chartWidth = (usableWidth - 20) / 3;\n\n    // ----- SEÇÃO 1: GRÁFICO DE PRIORIDADE (ROSCA) -----\n    doc.setFontSize(10);\n    doc.text(\"Grau de Prioridade\", margin + chartWidth / 2, startY, {\n      align: \"center\",\n    });\n\n    // Dados de prioridade\n    let highCount = 0;\n    let mediumCount = 0;\n    let lowCount = 0;\n\n    filteredProcesses.forEach((process) => {\n      if (process.priority === \"high\") highCount++;\n      else if (process.priority === \"medium\") mediumCount++;\n      else if (process.priority === \"low\") lowCount++;\n    });\n\n    // Calcular percentuais\n    const highPct = (highCount / total) * 100;\n    const mediumPct = (mediumCount / total) * 100;\n    const lowPct = (lowCount / total) * 100;\n\n    // Centro do gráfico\n    const centerX1 = margin + chartWidth / 2;\n    const centerY1 = startY + 40;\n    const radius = 25;\n\n    // Usar método simples de desenho para o gráfico de rosca (simulado com círculos de cor)\n    // Círculo externo\n    doc.setFillColor(239, 68, 68); // Vermelho para alta prioridade\n    doc.circle(centerX1, centerY1, radius, \"F\");\n\n    // Círculo interno (branco para simular rosca)\n    doc.setFillColor(255, 255, 255);\n    doc.circle(centerX1, centerY1, radius * 0.5, \"F\");\n\n    // Adicionar percentuais como texto\n    doc.setFontSize(8);\n    doc.text(`${Math.round(highPct)}%`, centerX1 - 20, centerY1 + 50);\n    doc.text(`${Math.round(mediumPct)}%`, centerX1, centerY1 + 50);\n    doc.text(`${Math.round(lowPct)}%`, centerX1 + 20, centerY1 + 50);\n\n    // ----- SEÇÃO 2: GRÁFICO DE STATUS (ROSCA) -----\n    doc.setFontSize(10);\n    doc.text(\"Status\", margin + chartWidth + 10 + chartWidth / 2, startY, {\n      align: \"center\",\n    });\n\n    // Dados de status\n    let completedCount = 0;\n    let inProgressCount = 0;\n\n    filteredProcesses.forEach((process) => {\n      if (process.status === \"completed\") completedCount++;\n      else if (process.status === \"in_progress\") inProgressCount++;\n    });\n\n    // Calcular percentuais\n    const completedPct = (completedCount / total) * 100;\n    const inProgressPct = (inProgressCount / total) * 100;\n\n    // Centro do gráfico\n    const centerX2 = margin + chartWidth + 10 + chartWidth / 2;\n    const centerY2 = centerY1;\n\n    // Círculo externo\n    doc.setFillColor(245, 158, 11); // Amarelo para em andamento\n    doc.circle(centerX2, centerY2, radius, \"F\");\n\n    // Círculo interno (branco para simular rosca)\n    doc.setFillColor(255, 255, 255);\n    doc.circle(centerX2, centerY2, radius * 0.5, \"F\");\n\n    // Adicionar legendas\n    doc.setFontSize(6);\n    doc.text(\"CONCLUÍDOS\", centerX2 - 35, centerY2 - 20);\n    doc.text(\"EM ANDAMENTO\", centerX2 + 15, centerY2 - 20);\n\n    // Adicionar percentuais\n    doc.setFontSize(8);\n    doc.text(`${Math.round(completedPct)}%`, centerX2 - 15, centerY2 + 50);\n    doc.text(`${Math.round(inProgressPct)}%`, centerX2 + 15, centerY2 + 50);\n\n    // ----- SEÇÃO 3: GRÁFICO DE FONTES (BARRAS HORIZONTAIS) -----\n    doc.setFontSize(10);\n    doc.text(\"Fonte\", margin + 2 * chartWidth + 20 + chartWidth / 2, startY, {\n      align: \"center\",\n    });\n\n    // Processos por fonte\n    const sourceCounts = new Map<number, number>();\n    filteredProcesses.forEach((process) => {\n      const count = sourceCounts.get(process.sourceId) || 0;\n      sourceCounts.set(process.sourceId, count + 1);\n    });\n\n    // Ordenar fontes por quantidade\n    const sortedSources = Array.from(sourceCounts.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 5); // Mostrar apenas as 5 principais fontes\n\n    // Configurações para barras horizontais\n    const barStartX = margin + 2 * chartWidth + 35;\n    const barStartY = startY + 10;\n    const barMaxWidth = chartWidth - 40;\n    const barHeight = 8;\n    const barGap = 15;\n\n    // Desenhar barras para cada fonte\n    sortedSources.forEach((sourceEntry, index) => {\n      const [sourceId, count] = sourceEntry;\n      const source = data.sources.find((s) => s.id === sourceId);\n      // Usar o primeiro valor como máximo se não houver outros\n      const maxValue =\n        sortedSources.length > 0\n          ? Math.max(...sortedSources.map((s) => s[1]))\n          : 1;\n      const barWidth = (count / maxValue) * barMaxWidth;\n\n      // Desenhar barra\n      // Cores diferentes para cada barra\n      const barColors = [\n        [245, 158, 11], // Amarelo\n        [16, 185, 129], // Verde\n        [239, 68, 68],  // Vermelho\n        [156, 163, 175], // Cinza\n        [59, 130, 246], // Azul\n        [168, 85, 247], // Roxo\n      ];\n      const color = barColors[index % barColors.length];\n      doc.setFillColor(color[0], color[1], color[2]);\n      doc.rect(barStartX, barStartY + index * barGap, barWidth, barHeight, \"F\");\n\n      // Adicionar label e valor\n      doc.setFontSize(7);\n      const sourceLabel = source?.code || `ID ${sourceId}`;\n      doc.text(\n        sourceLabel,\n        barStartX - 5,\n        barStartY + index * barGap + barHeight / 2 + 2,\n        { align: \"right\" },\n      );\n      doc.text(\n        `${count}`,\n        barStartX + barWidth + 3,\n        barStartY + index * barGap + barHeight / 2 + 2,\n      );\n    });\n\n    // Adicionar título \"Responsável (Qtde)\"\n    doc.setFontSize(9);\n    doc.text(\n      \"Responsável (Qtde)\",\n      barStartX + barMaxWidth / 2,\n      barStartY + 5 * barGap + 10,\n      { align: \"center\" },\n    );\n\n    // ----- SEÇÃO 4: GRÁFICO DE LINHA (CONCLUSÃO POR MÊS) -----\n    const lineChartY = startY + chartHeight + 20;\n    doc.setFontSize(10);\n    doc.text(\n      \"Conclusão de Processos / Mês\",\n      margin + usableWidth / 2,\n      lineChartY,\n      { align: \"center\" },\n    );\n\n    // Configuração do gráfico de linha\n    const lineStartX = margin + 10;\n    const lineEndX = pageWidth - margin - 10;\n    const lineY = lineChartY + 40;\n    const lineWidth = lineEndX - lineStartX;\n\n    // Desenhar linha base\n    doc.setDrawColor(200, 200, 200);\n    doc.setLineWidth(0.5);\n    doc.line(lineStartX, lineY, lineEndX, lineY);\n\n    // Dados fictícios para o gráfico de linha (similar à imagem)\n    const monthlyValues = [\n      { month: \"Out 2023\", value: 15 },\n      { month: \"Nov 2023\", value: 25 },\n      { month: \"Dez 2023\", value: 20 },\n      { month: \"Jan 2024\", value: 30 },\n      { month: \"Fev 2024\", value: 18 },\n      { month: \"Mar 2024\", value: 28 },\n      { month: \"Abr 2024\", value: 22 },\n      { month: \"Mai 2024\", value: 32 },\n    ];\n\n    // Valor máximo para escala\n    const maxValue = Math.max(...monthlyValues.map((mv) => mv.value));\n    const valueScale = 30 / maxValue;\n\n    // Armazenar pontos para desenhar linhas entre eles\n    const linePoints: Array<{ x: number; y: number }> = [];\n    const segmentWidth = lineWidth / (monthlyValues.length - 1);\n\n    monthlyValues.forEach((mv, index) => {\n      const x = lineStartX + index * segmentWidth;\n      const y = lineY - mv.value * valueScale;\n      linePoints.push({ x, y });\n\n      // Desenhar ponto\n      doc.setFillColor(54, 162, 235);\n      doc.circle(x, y, 1.5, \"F\");\n\n      // Adicionar label do mês\n      doc.setFontSize(6);\n      doc.text(mv.month, x, lineY + 7, { align: \"center\" });\n    });\n\n    // Desenhar linhas entre pontos\n    doc.setDrawColor(54, 162, 235);\n    doc.setLineWidth(0.8);\n    for (let i = 0; i < linePoints.length - 1; i++) {\n      doc.line(\n        linePoints[i].x,\n        linePoints[i].y,\n        linePoints[i + 1].x,\n        linePoints[i + 1].y,\n      );\n    }\n\n    // Salvar o PDF\n    doc.save(\n      `relatorio-processos-${new Date().toISOString().slice(0, 10)}.pdf`,\n    );\n  } catch (error) {\n    console.error(\"Erro ao gerar relatório PDF:\", error);\n    alert(\"Ocorreu um erro ao gerar o relatório. Por favor, tente novamente.\");\n  }\n}\n\n/**\n * Exporta o dataset para arquivo Excel (não implementado)\n */\nexport function generateExcelReport(data: ReportData): void {\n  console.log(\"Exportação para Excel não implementada\");\n  alert(\n    \"Exportação para Excel ainda não está implementada. Por favor, use a exportação para PDF.\",\n  );\n}\n","size_bytes":10892},"client/src/lib/utils/process.ts":{"content":"// Utilitários para formatação e manipulação de dados de processos\n\nexport function getProcessStatusLabel(status: string): string {\n  const statusMap: Record<string, string> = {\n    in_progress: \"Em Andamento\",\n    completed: \"Concluído\",\n    canceled: \"Cancelado\",\n    overdue: \"Atrasado\"\n  };\n  \n  return statusMap[status] || status;\n}\n\nexport function getProcessPriorityLabel(priority: string): string {\n  const priorityMap: Record<string, string> = {\n    low: \"Baixa\",\n    medium: \"Média\",\n    high: \"Alta\"\n  };\n  \n  return priorityMap[priority] || priority;\n}\n\nexport function getProcessStatusColor(status: string): string {\n  const colorMap: Record<string, string> = {\n    in_progress: \"text-yellow-600 bg-yellow-100\",  // Amarelo para \"Em Andamento\"\n    completed: \"text-green-600 bg-green-100\",     // Verde para \"Concluído\"\n    canceled: \"text-gray-600 bg-gray-100\",        // Cinza para \"Cancelado\"\n    overdue: \"text-red-600 bg-red-100\"           // Vermelho para \"Atrasado\"\n  };\n  \n  return colorMap[status] || \"text-gray-600 bg-gray-100\";\n}\n\n// Função para cores dos gráficos (valores hexadecimais)\nexport function getProcessStatusChartColor(status: string): string {\n  switch (status) {\n    case 'in_progress':\n      return '#F59E0B'; // amarelo\n    case 'overdue':\n      return '#EF4444'; // vermelho\n    case 'completed':\n      return '#10B981'; // verde\n    case 'canceled':\n      return '#F0F9FF'; // azul claro quase branco\n    case 'draft':\n      return '#F0F9FF'; // azul claro quase branco\n    default:\n      return '#F0F9FF'; // azul claro quase branco\n  }\n}\n\nexport function getProcessPriorityColor(priority: string): string {\n  const colorMap: Record<string, string> = {\n    low: \"text-green-600 bg-green-100\",\n    medium: \"text-yellow-600 bg-yellow-100\",\n    high: \"text-red-600 bg-red-100\"\n  };\n  \n  return colorMap[priority] || \"text-gray-600 bg-gray-100\";\n}\n\nexport function formatProcessNumber(pbdocNumber: string): string {\n  // Formatar número do processo se necessário\n  return pbdocNumber.toUpperCase();\n}\n\nexport function calculateProcessDuration(createdAt: string | Date, completedAt?: string | Date | null): string {\n  const start = new Date(createdAt);\n  const end = completedAt ? new Date(completedAt) : new Date();\n  \n  const diffTime = Math.abs(end.getTime() - start.getTime());\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  \n  if (diffDays === 1) {\n    return \"1 dia\";\n  } else if (diffDays < 30) {\n    return `${diffDays} dias`;\n  } else if (diffDays < 365) {\n    const months = Math.floor(diffDays / 30);\n    const remainingDays = diffDays % 30;\n    if (remainingDays === 0) {\n      return months === 1 ? \"1 mês\" : `${months} meses`;\n    } else {\n      return `${months} ${months === 1 ? 'mês' : 'meses'} e ${remainingDays} ${remainingDays === 1 ? 'dia' : 'dias'}`;\n    }\n  } else {\n    const years = Math.floor(diffDays / 365);\n    const remainingDays = diffDays % 365;\n    if (remainingDays === 0) {\n      return years === 1 ? \"1 ano\" : `${years} anos`;\n    } else {\n      return `${years} ${years === 1 ? 'ano' : 'anos'} e ${remainingDays} ${remainingDays === 1 ? 'dia' : 'dias'}`;\n    }\n  }\n}\n\nexport function isProcessOverdue(deadline: string | Date | null): boolean {\n  if (!deadline) return false;\n  \n  const deadlineDate = new Date(deadline);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0); // Reset time to start of day\n  deadlineDate.setHours(0, 0, 0, 0);\n  \n  return deadlineDate < today;\n}\n\nexport function getDaysUntilDeadline(deadline: string | Date | null): number | null {\n  if (!deadline) return null;\n  \n  const deadlineDate = new Date(deadline);\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  deadlineDate.setHours(0, 0, 0, 0);\n  \n  const diffTime = deadlineDate.getTime() - today.getTime();\n  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n}\n\nexport function getProcessStatusClass(status: string): string {\n  const classMap: Record<string, string> = {\n    in_progress: \"status-in-progress\",\n    completed: \"status-completed\",\n    canceled: \"status-canceled\",\n    overdue: \"status-overdue\"\n  };\n  \n  return classMap[status] || \"status-default\";\n}\n\nexport function formatDeadlineWarning(deadline: string | Date | null): { message: string; color: string } | null {\n  const days = getDaysUntilDeadline(deadline);\n  \n  if (days === null) return null;\n  \n  if (days < 0) {\n    return {\n      message: `Atrasado há ${Math.abs(days)} ${Math.abs(days) === 1 ? 'dia' : 'dias'}`,\n      color: \"text-red-600\"\n    };\n  } else if (days === 0) {\n    return {\n      message: \"Vence hoje\",\n      color: \"text-orange-600\"\n    };\n  } else if (days <= 3) {\n    return {\n      message: `Vence em ${days} ${days === 1 ? 'dia' : 'dias'}`,\n      color: \"text-yellow-600\"\n    };\n  } else {\n    return {\n      message: `${days} ${days === 1 ? 'dia' : 'dias'} restantes`,\n      color: \"text-green-600\"\n    };\n  }\n}","size_bytes":4915},"client/src/lib/utils/timelineExport.ts":{"content":"import { jsPDF } from 'jspdf';\nimport 'jspdf-autotable';\nimport { Process, User, BiddingModality, ResourceSource, Department } from \"@shared/schema\";\n\ninterface ReportData {\n  processes: Process[];\n  users: User[];\n  modalities: BiddingModality[];\n  sources: ResourceSource[];\n  departments?: Department[];\n  filters: {\n    department?: string;\n    month?: string;\n    year?: string;\n  };\n  reportType: string;\n}\n\n/**\n * Filtra os processos com base nos filtros selecionados\n */\nfunction filterReportData(data: ReportData): Process[] {\n  let filteredProcesses = [...data.processes];\n  \n  // Filtrar por mês\n  if (data.filters.month && data.filters.month !== \"all\") {\n    const monthIndex = parseInt(data.filters.month) - 1;\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processMonth = new Date(process.createdAt).getMonth();\n      return processMonth === monthIndex;\n    });\n  }\n  \n  // Filtrar por ano\n  if (data.filters.year) {\n    const year = parseInt(data.filters.year);\n    filteredProcesses = filteredProcesses.filter(process => {\n      const processYear = new Date(process.createdAt).getFullYear();\n      return processYear === year;\n    });\n  }\n  \n  // Filtrar por departamento\n  if (data.filters.department && data.filters.department !== \"all\" && data.departments) {\n    const departmentId = parseInt(data.filters.department);\n    const department = data.departments.find(d => d.id === departmentId);\n    \n    if (department) {\n      filteredProcesses = filteredProcesses.filter(process => {\n        const user = data.users.find(u => u.id === process.responsibleId);\n        return user?.department === department.name;\n      });\n    }\n  }\n  \n  return filteredProcesses;\n}\n\n/**\n * Gera um relatório PDF em formato de linha do tempo (timeline)\n */\nexport function generateTimelinePdfReport(data: ReportData): void {\n  try {\n    // Preparar dados\n    const filteredProcesses = filterReportData(data);\n    \n    // Criar documento PDF com fundo escuro e orientação paisagem\n    const doc = new jsPDF({ \n      orientation: 'landscape',\n      unit: 'mm'\n    });\n    const pageWidth = doc.internal.pageSize.getWidth();\n    const pageHeight = doc.internal.pageSize.getHeight();\n    const margin = 10;\n    \n    // Adicionar fundo escuro em toda a página - similar à imagem referência\n    doc.setFillColor(60, 64, 75); // Cor de fundo cinza escuro\n    doc.rect(0, 0, pageWidth, pageHeight, 'F');\n    \n    // == TÍTULO COM EFEITO DE SOMBRA ==\n    doc.setFontSize(28);\n    \n    // Efeito de sombra (título principal) - texto ligeiramente translúcido em offset\n    doc.setTextColor(220, 220, 220, 0.5);\n    doc.text('Relatório Infográfico SEAP-PB', pageWidth / 2 + 1, 26, { align: 'center' });\n    \n    // Texto principal (título)\n    doc.setTextColor(255, 255, 255);\n    doc.text('Relatório Infográfico SEAP-PB', pageWidth / 2, 25, { align: 'center' });\n    \n    // === LINHA DO TEMPO CENTRAL ===\n    const timelineY = 70;\n    const timelineStartX = margin + 20;\n    const timelineEndX = pageWidth - margin - 20;\n    const timelineWidth = timelineEndX - timelineStartX;\n    \n    // Cores para a timeline (seguindo padrão do sistema)\n    const timelineColors = [\n      [245, 158, 11],  // Amarelo #F59E0B (Em Andamento)\n      [16, 185, 129],  // Verde #10B981 (Concluído)\n      [239, 68, 68],   // Vermelho #EF4444 (Atrasado)\n      [240, 249, 255], // Azul claro quase branco #F0F9FF (Cancelado)\n      [59, 130, 246]   // Azul complementar\n    ];\n    \n    // Dados para as estatísticas\n    const statusCounts = {\n      draft: filteredProcesses.filter(p => p.status === 'draft').length,\n      in_progress: filteredProcesses.filter(p => p.status === 'in_progress').length,\n      completed: filteredProcesses.filter(p => p.status === 'completed').length,\n      canceled: filteredProcesses.filter(p => p.status === 'canceled').length,\n    };\n    \n    // Estatísticas por modalidade\n    const modalityStats = new Map<number, number>();\n    filteredProcesses.forEach(p => {\n      const count = modalityStats.get(p.modalityId) || 0;\n      modalityStats.set(p.modalityId, count + 1);\n    });\n    const modalitiesData = Array.from(modalityStats.entries())\n      .map(([id, count]) => {\n        const modality = data.modalities.find(m => m.id === id);\n        return { name: modality?.name || `Modalidade ${id}`, count };\n      })\n      .sort((a, b) => b.count - a.count);\n    \n    // Estatísticas por fonte\n    const sourceStats = new Map<number, number>();\n    filteredProcesses.forEach(p => {\n      const count = sourceStats.get(p.sourceId) || 0;\n      sourceStats.set(p.sourceId, count + 1);\n    });\n    const sourcesData = Array.from(sourceStats.entries())\n      .map(([id, count]) => {\n        const source = data.sources.find(s => s.id === id);\n        return { name: source?.code || `Fonte ${id}`, count };\n      })\n      .sort((a, b) => b.count - a.count);\n    \n    // Estatísticas por responsável\n    const responsibleStats = new Map<number, {total: number, completed: number}>();\n    filteredProcesses.forEach(p => {\n      const stats = responsibleStats.get(p.responsibleId) || {total: 0, completed: 0};\n      stats.total++;\n      if (p.status === 'completed') {\n        stats.completed++;\n      }\n      responsibleStats.set(p.responsibleId, stats);\n    });\n    const responsiblesData = Array.from(responsibleStats.entries())\n      .map(([id, stats]) => {\n        const user = data.users.find(u => u.id === id);\n        return { \n          name: user?.fullName || `Usuário ${id}`, \n          total: stats.total, \n          completed: stats.completed \n        };\n      })\n      .sort((a, b) => b.total - a.total);\n    \n    // Períodos da timeline com dados reais\n    const periods = [\n      { \n        label: 'Status', \n        year: 'Status', \n        color: timelineColors[0],\n        stats: filteredProcesses.length,\n        description: `Em Andamento: ${statusCounts.in_progress}\\nConcluídos: ${statusCounts.completed}\\nRascunho: ${statusCounts.draft}\\nCancelados: ${statusCounts.canceled}`,\n        chartData: [statusCounts.draft, statusCounts.in_progress, statusCounts.completed, statusCounts.canceled, 0]\n      },\n      { \n        label: 'Modalidades', \n        year: 'Modalidades', \n        color: timelineColors[1],\n        stats: modalitiesData.reduce((sum, m) => sum + m.count, 0),\n        description: modalitiesData.slice(0, 3).map(m => `${m.name}: ${m.count}`).join('\\n'),\n        chartData: modalitiesData.slice(0, 5).map(m => m.count)\n      },\n      { \n        label: 'Fontes', \n        year: 'Fontes', \n        color: timelineColors[2],\n        stats: sourcesData.reduce((sum, s) => sum + s.count, 0),\n        description: sourcesData.slice(0, 3).map(s => `${s.name}: ${s.count}`).join('\\n'),\n        chartData: sourcesData.slice(0, 5).map(s => s.count)\n      },\n      { \n        label: 'Responsáveis', \n        year: 'Resp.', \n        color: timelineColors[3],\n        stats: responsiblesData.reduce((sum, r) => sum + r.total, 0),\n        description: responsiblesData.slice(0, 3).map(r => `${r.name.split(' ')[0]}: ${r.total}`).join('\\n'),\n        chartData: responsiblesData.slice(0, 5).map(r => r.total)\n      },\n      { \n        label: 'Eficiência', \n        year: 'Desempenho', \n        color: timelineColors[4],\n        stats: Math.round(responsiblesData.reduce((sum, r) => sum + r.completed, 0) / \n                Math.max(1, responsiblesData.reduce((sum, r) => sum + r.total, 0)) * 100),\n        description: 'Porcentagem de processos\\nconcluídos em relação\\nao total de processos',\n        chartData: [statusCounts.draft, statusCounts.in_progress, statusCounts.completed, statusCounts.canceled, filteredProcesses.length]\n      }\n    ];\n    \n    // Desenhar linha do tempo base (cinza)\n    doc.setDrawColor(150, 150, 150);\n    doc.setLineWidth(8);\n    doc.line(timelineStartX, timelineY, timelineEndX, timelineY);\n    \n    // Calcular largura de cada segmento\n    const segmentWidth = timelineWidth / periods.length;\n    \n    // Desenhar os segmentos coloridos da timeline\n    periods.forEach((period, index) => {\n      const segmentStartX = timelineStartX + (segmentWidth * index);\n      const segmentEndX = segmentStartX + segmentWidth;\n      \n      // Desenhar segmento colorido\n      doc.setDrawColor(period.color[0], period.color[1], period.color[2]);\n      doc.setLineWidth(8);\n      doc.line(segmentStartX, timelineY, segmentEndX, timelineY);\n      \n      // Adicionar círculo no início do segmento\n      doc.setFillColor(255, 255, 255);\n      doc.circle(segmentStartX, timelineY, 6, 'F');\n      doc.setDrawColor(period.color[0], period.color[1], period.color[2]);\n      doc.setLineWidth(2);\n      doc.circle(segmentStartX, timelineY, 6, 'S');\n      \n      // Se for o último, adicionar círculo no final\n      if (index === periods.length - 1) {\n        doc.setFillColor(255, 255, 255);\n        doc.circle(segmentEndX, timelineY, 6, 'F');\n        doc.setDrawColor(period.color[0], period.color[1], period.color[2]);\n        doc.setLineWidth(2);\n        doc.circle(segmentEndX, timelineY, 6, 'S');\n      }\n    });\n    \n    // === ADICIONAR CONTEÚDO ACIMA E ABAIXO DA TIMELINE ===\n    periods.forEach((period, index) => {\n      const x = timelineStartX + (segmentWidth * index) + (segmentWidth / 2);\n      const isEvenPeriod = index % 2 === 0;\n      \n      // Ano em grande destaque\n      doc.setFontSize(24);\n      doc.setTextColor(period.color[0], period.color[1], period.color[2]);\n      doc.text(period.year, x, timelineY + (isEvenPeriod ? 50 : -35), { align: 'center' });\n      \n      // Definir onde desenhar o gráfico de barras e o texto descritivo\n      let chartY, descriptionY, circleY;\n      \n      if (isEvenPeriod) {\n        // Conteúdo abaixo da timeline\n        chartY = timelineY + 25;\n        descriptionY = timelineY + 75;\n        circleY = timelineY + 115;\n      } else {\n        // Conteúdo acima da timeline\n        chartY = timelineY - 65;\n        descriptionY = timelineY - 25;\n        circleY = timelineY - 115;\n      }\n      \n      // Desenhar gráfico de barras\n      let barWidth = 7;\n      let barGap = 2;\n      let chartStartX = x - ((barWidth + barGap) * period.chartData.length / 2);\n      \n      // Encontrar valor máximo para escala do gráfico\n      const maxValue = Math.max(...period.chartData);\n      \n      // Desenhar barras do gráfico de período\n      period.chartData.forEach((value, i) => {\n        const barHeight = (value / maxValue) * 40; // altura máxima de 40mm\n        const barX = chartStartX + (i * (barWidth + barGap));\n        \n        // Cores alternadas da mesma família de cores\n        if (i % 2 === 0) {\n          doc.setFillColor(period.color[0], period.color[1], period.color[2]);\n        } else {\n          doc.setFillColor(\n            Math.min(255, period.color[0] + 40),\n            Math.min(255, period.color[1] + 40),\n            Math.min(255, period.color[2] + 40)\n          );\n        }\n        \n        if (isEvenPeriod) {\n          // Barras crescendo para baixo\n          doc.rect(barX, chartY, barWidth, barHeight, 'F');\n        } else {\n          // Barras crescendo para cima\n          doc.rect(barX, chartY, barWidth, -barHeight, 'F');\n        }\n      });\n      \n      // Texto descritivo\n      doc.setFontSize(9);\n      doc.setTextColor(220, 220, 220);\n      doc.text(period.description, x, descriptionY, { \n        align: 'center',\n        maxWidth: segmentWidth - 20\n      });\n      \n      // Círculo com gráfico de pizza/donut\n      const circleRadius = 20;\n      \n      // Desenhar círculo principal\n      doc.setFillColor(period.color[0], period.color[1], period.color[2]);\n      doc.circle(x, circleY, circleRadius, 'F');\n      \n      // Segmentos decorativos no círculo (como na imagem de referência)\n      const numSegments = 3;\n      for(let i = 0; i < numSegments; i++) {\n        const segAngle = (2 * Math.PI / numSegments) * i;\n        const segX = x + (circleRadius * 0.6) * Math.cos(segAngle);\n        const segY = circleY + (circleRadius * 0.6) * Math.sin(segAngle);\n        \n        // Cores alternadas\n        doc.setFillColor(\n          Math.min(255, period.color[0] + 60 + (i * 20)),\n          Math.min(255, period.color[1] + 60 + (i * 20)),\n          Math.min(255, period.color[2] + 60 + (i * 20))\n        );\n        doc.circle(segX, segY, circleRadius * 0.4, 'F');\n      }\n      \n      // Círculo no centro com o mesmo fundo para criar efeito donut\n      doc.setFillColor(60, 64, 75); // Mesma cor do fundo\n      doc.circle(x, circleY, circleRadius * 0.5, 'F');\n      \n      // Texto com estatísticas\n      doc.setFontSize(14);\n      doc.setTextColor(255, 255, 255);\n      doc.text(`${period.stats || 0}`, x, circleY + 4, { align: 'center' });\n    });\n    \n    // Rodapé com informações de geração\n    doc.setFontSize(9);\n    doc.setTextColor(180, 180, 180);\n    doc.text(`SEAP-PB | Sistema de Controle de Processos Licitatórios | Gerado em: ${new Date().toLocaleDateString('pt-BR')}`, \n      pageWidth / 2, pageHeight - 10, { align: 'center' });\n    \n    // Salvar o PDF\n    doc.save(`timeline-processos-${new Date().toLocaleDateString('pt-BR').replaceAll('/', '-')}.pdf`);\n  } catch (error) {\n    console.error('Erro ao gerar relatório PDF:', error);\n    alert('Ocorreu um erro ao gerar o relatório PDF. Por favor, tente novamente.');\n  }\n}","size_bytes":13352},"client/src/components/LoginIntro.tsx":{"content":"import { useEffect } from \"react\";\nimport logoPb4k from \"@assets/Logo PB 4k_1756265065361.png\";\n\ninterface LoginIntroProps {\n  onComplete?: () => void;\n}\n\nexport function LoginIntro({ onComplete }: LoginIntroProps) {\n  useEffect(() => {\n    // Executa o callback após 4 segundos para esconder a intro\n    const timer = setTimeout(() => {\n      onComplete?.();\n    }, 4000);\n\n    return () => clearTimeout(timer);\n  }, [onComplete]);\n\n  return (\n    <>\n      <style>{`\n        @keyframes fadeInScale {\n          from { \n            transform: scale(0.5); \n            opacity: 0; \n          }\n          to { \n            transform: scale(1); \n            opacity: 1; \n          }\n        }\n\n        @keyframes fadeInDelayed {\n          to { \n            opacity: 1; \n          }\n        }\n\n        @keyframes fadeOut {\n          to { \n            opacity: 0; \n            visibility: hidden; \n          }\n        }\n\n        .animate-fadeInScale {\n          animation: fadeInScale 1s ease forwards;\n        }\n\n        .animate-fadeInDelayed {\n          animation: fadeInDelayed 1s ease forwards;\n          animation-delay: 1s;\n        }\n\n        .animate-fadeOut {\n          animation: fadeOut 1s ease forwards;\n          animation-delay: 3s;\n        }\n      `}</style>\n      \n      <div className=\"fixed inset-0 z-50 flex items-center justify-center\" style={{ backgroundColor: '#5892c2' }}>\n        <div className=\"text-center animate-fadeOut\">\n          <img \n            src={logoPb4k} \n            alt=\"Logo Paraíba\" \n            className=\"w-[40%] mx-auto opacity-0 animate-fadeInScale\"\n            style={{ width: '40%', maxWidth: '400px' }}\n          />\n          <div className=\"mt-5 text-2xl font-bold text-white opacity-0 animate-fadeInDelayed\" style={{ fontFamily: \"Verdana\" }}>\n            Sistema de Controle de Processos de Licitação\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}","size_bytes":1909},"client/src/pages/ProcessDetail_backup.tsx":{"content":"// Backup do arquivo antes das correções","size_bytes":42},"client/src/pages/ReportDownloads.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, FileText, Calendar, User } from \"lucide-react\";\n\nconst ReportDownloads = () => {\n  const handleDownload = (filename: string, reportName: string) => {\n    // Criar elemento de link temporário para download\n    const link = document.createElement('a');\n    link.href = `/${filename}`;\n    link.download = filename;\n    link.target = '_blank';\n    \n    // Adicionar ao DOM, clicar e remover\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    console.log(`📥 Download iniciado: ${reportName}`);\n  };\n\n  const reports = [\n    {\n      id: 1,\n      title: \"Relatório Simples de Modificações\",\n      description: \"Resumo das principais modificações implementadas no sistema\",\n      filename: \"relatorio-modificacoes-sistema.pdf\",\n      size: \"9.6 KB\",\n      pages: \"3 páginas\",\n      type: \"Resumo Executivo\"\n    },\n    {\n      id: 2,\n      title: \"Relatório Detalhado de Modificações\",\n      description: \"Documentação técnica completa com 11 seções detalhadas\",\n      filename: \"relatorio-detalhado-modificacoes-sistema.pdf\",\n      size: \"30.3 KB\", \n      pages: \"15+ páginas\",\n      type: \"Documentação Técnica\"\n    }\n  ];\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center space-x-2 mb-8\">\n        <FileText className=\"h-8 w-8 text-blue-600\" />\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            Downloads de Relatórios\n          </h1>\n          <p className=\"text-gray-600 mt-2\">\n            Baixe os relatórios de modificações do sistema\n          </p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {reports.map((report) => (\n          <Card key={report.id} className=\"hover:shadow-lg transition-shadow\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <FileText className=\"h-5 w-5 text-blue-600\" />\n                {report.title}\n              </CardTitle>\n              <p className=\"text-sm text-gray-600 mt-2\">\n                {report.description}\n              </p>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4 text-gray-500\" />\n                  <span className=\"text-gray-600\">\n                    {new Date().toLocaleDateString('pt-BR')}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <User className=\"h-4 w-4 text-gray-500\" />\n                  <span className=\"text-gray-600\">Sistema</span>\n                </div>\n              </div>\n\n              <div className=\"flex justify-between items-center py-2 border-t\">\n                <div className=\"text-sm text-gray-600\">\n                  <div>Tamanho: <span className=\"font-medium\">{report.size}</span></div>\n                  <div>Extensão: <span className=\"font-medium\">{report.pages}</span></div>\n                  <div>Tipo: <span className=\"font-medium\">{report.type}</span></div>\n                </div>\n              </div>\n\n              <Button \n                onClick={() => handleDownload(report.filename, report.title)}\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Baixar PDF\n              </Button>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      <div className=\"mt-8 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n        <div className=\"flex items-start gap-3\">\n          <FileText className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n          <div>\n            <h3 className=\"font-medium text-blue-900\">Sobre os Relatórios</h3>\n            <p className=\"text-sm text-blue-700 mt-1\">\n              Os relatórios documentam as modificações implementadas na funcionalidade \n              \"Autorizar Emissão de R.O\", incluindo implementação de modal de decisão \n              e criação automática de etapas subsequentes.\n            </p>\n            <div className=\"mt-3 text-sm text-blue-600\">\n              <div>• <strong>Relatório Simples:</strong> Visão geral e resumo executivo</div>\n              <div>• <strong>Relatório Detalhado:</strong> Documentação técnica completa com código e métricas</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReportDownloads;","size_bytes":4777}},"version":1}