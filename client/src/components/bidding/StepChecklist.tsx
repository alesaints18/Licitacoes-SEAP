import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { ProcessStep } from "@shared/schema";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { XCircle, Check } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

interface StepChecklistProps {
  processId: number;
  modalityId: number;
  userDepartment: string;
  authorizationModalOpen?: boolean;
  setAuthorizationModalOpen?: (open: boolean) => void;
  onStepReject?: (step: ProcessStep) => void;
  onAuthorizationStep?: (step: ProcessStep) => void;
}

const StepChecklist = ({ 
  processId, 
  modalityId, 
  userDepartment,
  authorizationModalOpen: externalAuthModalOpen,
  setAuthorizationModalOpen: setExternalAuthModalOpen,
  onStepReject,
  onAuthorizationStep,
}: StepChecklistProps) => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [activeStep, setActiveStep] = useState<ProcessStep | null>(null);
  const [observation, setObservation] = useState("");
  const [authorizationDecision, setAuthorizationDecision] = useState("");
  // Usar modal externo se fornecido, sen√£o usar interno
  const [internalAuthModalOpen, setInternalAuthModalOpen] = useState(false);
  const authorizationModalOpen = externalAuthModalOpen ?? internalAuthModalOpen;
  const setAuthorizationModalOpen = setExternalAuthModalOpen ?? setInternalAuthModalOpen;
  
  // Fetch process steps
  const { data: steps, isLoading, error } = useQuery<ProcessStep[]>({
    queryKey: [`/api/processes/${processId}/steps`],
  });
  
  // Fetch departments
  const { data: departments } = useQuery({
    queryKey: ['/api/departments'],
  });
  
  // Get current user
  const { data: currentUser } = useQuery({
    queryKey: ['/api/auth/status'],
  });
  
  // Mapeamento de departamentos por nome
  const departmentMap: { [key: string]: number } = {
    "Setor Demandante": 1,
    "Divis√£o de Licita√ß√£o": 2,
    "N√∫cleo de Pesquisa de Pre√ßos ‚Äì NPP": 3,
    "Unidade de Or√ßamento e Finan√ßas": 4,
    "Secret√°rio de Estado da Administra√ß√£o Penitenci√°ria - SEAP": 5,
    // Mapeamentos adicionais para compatibilidade
    "TI": 1,
    "Licita√ß√µes": 2,
    "Jur√≠dico": 3,
    "Financeiro": 4,
    "Administrativo": 5
  };

  // Checklist espec√≠fico por setor baseado no fluxograma do Preg√£o Eletr√¥nico
  const getSectorSpecificSteps = () => {
    if (modalityId !== 1) return []; // Apenas para Preg√£o Eletr√¥nico
    
    const currentDeptId = departmentMap[userDepartment];
    
    // Etapas por setor conforme fluxograma oficial
    const stepsBySector: { [key: number]: any[] } = {
      // TI - Setor Demandante (Fase de Inicia√ß√£o)
      1: [
        { name: "1. Documento de Formaliza√ß√£o da Demanda - DFD", departmentId: 1, phase: "Inicia√ß√£o" },
        { name: "2. Estudo T√©cnico Preliminar - ETP", departmentId: 1, phase: "Inicia√ß√£o" },
        { name: "3. Mapa de Risco - MR", departmentId: 1, phase: "Inicia√ß√£o" },
        { name: "4. Termo de Refer√™ncia - TR", departmentId: 1, phase: "Inicia√ß√£o" },
      ],
      
      // Licita√ß√µes - Divis√£o de Licita√ß√£o (Fase de Prepara√ß√£o e Execu√ß√£o)
      2: [
        { name: "6. Criar Processo no √ìrg√£o", departmentId: 2, phase: "Prepara√ß√£o" },
        { name: "8. Pesquisa de Pre√ßos - NPP", departmentId: 2, phase: "Prepara√ß√£o" },
        { name: "9. Aprova√ß√£o da Pesquisa de Pre√ßos", departmentId: 2, phase: "Prepara√ß√£o" },
        { name: "11. Designa√ß√£o do Pregoeiro e Equipe de Apoio", departmentId: 2, phase: "Prepara√ß√£o" },
        { name: "12. Elabora√ß√£o do Edital", departmentId: 2, phase: "Prepara√ß√£o" },
        { name: "14. Publica√ß√£o do Edital", departmentId: 2, phase: "Execu√ß√£o" },
        { name: "15. Recebimento das Propostas", departmentId: 2, phase: "Execu√ß√£o" },
        { name: "16. Sess√£o P√∫blica do Preg√£o", departmentId: 2, phase: "Execu√ß√£o" },
        { name: "17. Julgamento das Propostas", departmentId: 2, phase: "Execu√ß√£o" },
        { name: "18. Habilita√ß√£o do Vencedor", departmentId: 2, phase: "Execu√ß√£o" },
        { name: "19. Adjudica√ß√£o", departmentId: 2, phase: "Execu√ß√£o" },
      ],
      
      // Jur√≠dico - Assessoria Jur√≠dica (An√°lise Legal)
      3: [
        { name: "13. An√°lise Jur√≠dica do Edital", departmentId: 3, phase: "Prepara√ß√£o" },
        { name: "20. An√°lise de Recursos", departmentId: 3, phase: "Execu√ß√£o" },
      ],
      
      // Financeiro - Ordenador de Despesa (Autoriza√ß√µes e Homologa√ß√£o)
      4: [
        { name: "5. Autoriza√ß√£o pelo Ordenador de Despesa", departmentId: 4, phase: "Inicia√ß√£o" },
        { name: "10. Autoriza√ß√£o da Licita√ß√£o", departmentId: 4, phase: "Prepara√ß√£o" },
        { name: "21. Homologa√ß√£o", departmentId: 4, phase: "Finaliza√ß√£o" },
        { name: "22. Empenho", departmentId: 4, phase: "Finaliza√ß√£o" },
      ],
      
      // Administrativo - Gest√£o Contratual (Finaliza√ß√£o)
      5: [
        { name: "23. Elabora√ß√£o do Contrato", departmentId: 5, phase: "Finaliza√ß√£o" },
        { name: "24. Assinatura do Contrato", departmentId: 5, phase: "Finaliza√ß√£o" },
        { name: "25. Publica√ß√£o do Contrato", departmentId: 5, phase: "Finaliza√ß√£o" },
        { name: "26. Fiscaliza√ß√£o Contratual", departmentId: 5, phase: "Finaliza√ß√£o" },
      ]
    };
    
    return stepsBySector[currentDeptId] || [];
  };

  // Fun√ß√£o para obter todas as etapas (para compatibilidade)
  const getDefaultSteps = () => {
    if (modalityId === 1) { // Preg√£o Eletr√¥nico
      return [
        // FASE 1: INICIA√á√ÉO (Setor Demandante)
        { name: "1. Documento de Formaliza√ß√£o da Demanda - DFD", departmentId: 1, phase: "Inicia√ß√£o", timeLimit: null },
        { name: "2. Estudo T√©cnico Preliminar - ETP", departmentId: 1, phase: "Inicia√ß√£o", timeLimit: null },
        { name: "3. Mapa de Risco - MR", departmentId: 1, phase: "Inicia√ß√£o", timeLimit: null },
        { name: "4. Termo de Refer√™ncia - TR", departmentId: 1, phase: "Inicia√ß√£o", timeLimit: null },
        
        // DECIS√ÉO: Ordenador de Despesa
        { name: "5. Autoriza√ß√£o pelo Ordenador de Despesa", departmentId: 4, phase: "Inicia√ß√£o", timeLimit: "10 dias" },
        
        // FASE 2: PREPARA√á√ÉO (Divis√£o de Licita√ß√£o)
        { name: "6. Criar Processo no √ìrg√£o", departmentId: 2, phase: "Prepara√ß√£o", timeLimit: "2 dias" },
        
        // NPP - N√∫cleo de Pesquisa de Pre√ßos
        { name: "7. Fazer Pesquisa de Pre√ßos", departmentId: 2, phase: "Prepara√ß√£o", timeLimit: "2 dias" },
        { name: "8. Elaborar Mapa Comparativo de Pre√ßos", departmentId: 2, phase: "Prepara√ß√£o", timeLimit: "10 dias" },
        { name: "9. Metodologia da Pesquisa de Pre√ßos", departmentId: 2, phase: "Prepara√ß√£o", timeLimit: "10 dias" },
        
        // Or√ßamento e Finan√ßas
        { name: "10. Consultar Disponibilidade Or√ßament√°ria", departmentId: 4, phase: "Prepara√ß√£o", timeLimit: "1 dia" },
        { name: "11. Emitir Reserva Or√ßament√°ria - R.O.", departmentId: 4, phase: "Prepara√ß√£o", timeLimit: "1 dia" },
        
        // FASE 3: AUTORIZA√á√ÉO (Secret√°rio SEAP)
        { name: "12. Autoriza√ß√£o Final pelo Secret√°rio SEAP", departmentId: 5, phase: "Execu√ß√£o", timeLimit: null },
        
        // FASE 4: EXECU√á√ÉO (Divis√£o de Licita√ß√£o)
        { name: "13. Elaborar Edital e seus Anexos", departmentId: 2, phase: "Execu√ß√£o", timeLimit: "10 dias" },
        { name: "14. Consultar Comit√™ Gestor de Gasto P√∫blico", departmentId: 2, phase: "Execu√ß√£o", timeLimit: "2 dias" },
        { name: "15. Solicitar Elabora√ß√£o de Nota T√©cnica", departmentId: 3, phase: "Execu√ß√£o", timeLimit: "1 dia" },
        
        // FASE 5: PUBLICA√á√ÉO E SESS√ÉO
        { name: "16. Publicar Edital", departmentId: 2, phase: "Execu√ß√£o", timeLimit: null },
        { name: "17. Realizar Sess√£o P√∫blica de Lances", departmentId: 2, phase: "Execu√ß√£o", timeLimit: null },
        { name: "18. An√°lise de Documenta√ß√£o dos Licitantes", departmentId: 2, phase: "Execu√ß√£o", timeLimit: null },
        { name: "19. Adjudica√ß√£o e Homologa√ß√£o", departmentId: 2, phase: "Finaliza√ß√£o", timeLimit: null },
        
        // FASE 6: CONTRATA√á√ÉO
        { name: "20. Elabora√ß√£o do Contrato", departmentId: 3, phase: "Finaliza√ß√£o", timeLimit: null },
        { name: "21. Assinatura do Contrato", departmentId: 5, phase: "Finaliza√ß√£o", timeLimit: null },
      ];
    }
    
    // Para outras modalidades, manter etapas b√°sicas
    return [
      { name: "Elabora√ß√£o do Termo de Refer√™ncia", departmentId: 1, phase: "Inicia√ß√£o", timeLimit: null },
      { name: "Pesquisa de Pre√ßo", departmentId: 1, phase: "Prepara√ß√£o", timeLimit: null },
      { name: "Aprova√ß√£o do Ordenador de Despesa", departmentId: 4, phase: "Execu√ß√£o", timeLimit: null },
    ];
  };
  
  // Verificar se a autoriza√ß√£o foi conclu√≠da e obter a decis√£o
  const authorizationStep = steps?.find(s => s.stepName === "Autoriza√ß√£o pelo Secret√°rio SEAP" && s.isCompleted);
  const completedAuthDecision = authorizationStep?.observations || "";
  
  // Verificar se foi selecionada "DISPONIBILIDADE OR√áAMENT√ÅRIA" 
  const hasAvailableBudget = completedAuthDecision.includes("DISPONIBILIDADE OR√áAMENT√ÅRIA");
  console.log("üîçüîçüîç CHEQUE DISPONIBILIDADE - completedAuthDecision:", completedAuthDecision);
  console.log("üîçüîçüîç CHEQUE DISPONIBILIDADE - hasAvailableBudget:", hasAvailableBudget);
  
  // Debug da decis√£o
  console.log("üîç StepChecklist - Decis√£o encontrada:", completedAuthDecision);
  console.log("üîç StepChecklist - hasAvailableBudget:", hasAvailableBudget);
  console.log("üîç StepChecklist - authorizationStep:", authorizationStep);
  
  // Etapas condicionais que ser√£o tratadas separadamente
  const conditionalStepNames = [
    "Devolver para corre√ß√£o ou arquivamento",
    "Solicitar ajuste/aditivo do plano de trabalho", 
    "Solicitar disponibiliza√ß√£o de or√ßamento"
    // "Autorizar Emiss√£o de R.O" ser√° exibida condicionalmente quando hasAvailableBudget for true
  ];
  
  // Debug detalhado
  console.log("üîçüîçüîç =========================");
  console.log("üîçüîçüîç STEPCHECKLIST CARREGADO PARA PROCESSO", processId);
  console.log("üîçüîçüîç =========================");
  console.log("üîç StepChecklist - userDepartment:", userDepartment);
  console.log("üîç StepChecklist - steps total:", steps?.length);
  console.log("üîç StepChecklist - Todas as etapas do processo:", steps?.map(s => ({name: s.stepName, deptId: s.departmentId, completed: s.isCompleted, observations: s.observations})));
  
  // Verificar especificamente se a etapa "Autorizar Emiss√£o de R.O" existe
  const authRoStep = steps?.find(s => s.stepName === "Autorizar Emiss√£o de R.O");
  console.log("üîç StepChecklist - Etapa 'Autorizar Emiss√£o de R.O' encontrada no banco:", authRoStep);
  
  // Verificar especificamente a etapa de autoriza√ß√£o
  console.log("üîç StepChecklist - Etapa de autoriza√ß√£o completa:", authorizationStep);
  console.log("üîç StepChecklist - Decis√£o encontrada:", completedAuthDecision);
  console.log("üîç StepChecklist - hasAvailableBudget:", hasAvailableBudget);
  
  // Filtrar etapas do setor atual, EXCLUINDO as etapas condicionais
  const filteredSteps = steps?.filter(step => {
    const currentDeptId = departmentMap[userDepartment];
    console.log("üîç StepChecklist - currentDeptId para", userDepartment, "=", currentDeptId);
    
    // Excluir etapas de "Transfer√™ncia de Setor" (s√£o autom√°ticas)
    if (step.stepName === "Transfer√™ncia de Setor") {
      return false;
    }
    
    // EXCLUIR as 4 etapas condicionais da lista principal
    if (conditionalStepNames.includes(step.stepName)) {
      return false;
    }
    
    // EXCLUIR etapas marcadas como removidas
    if (step.observations && step.observations.includes("ETAPA_REMOVIDA")) {
      return false;
    }
    
    // Mostrar etapas do departamento atual (conclu√≠das e n√£o conclu√≠das)
    // Para etapa de Autoriza√ß√£o, sempre mostrar mesmo se conclu√≠da para poder editar decis√£o
    if (step.stepName === "Autoriza√ß√£o pelo Secret√°rio SEAP") {
      // Admin pode ver todas as etapas de autoriza√ß√£o
      if ((currentUser as any)?.role === 'admin') {
        return true;
      }
      return step.departmentId === currentDeptId;
    }
    
    // Mostrar "Autorizar Emiss√£o de R.O" automaticamente quando h√° disponibilidade or√ßament√°ria
    if (step.stepName === "Autorizar Emiss√£o de R.O") {
      console.log("üîçüîçüîç StepChecklist - Etapa 'Autorizar Emiss√£o de R.O' encontrada!");
      console.log("üîç StepChecklist - hasAvailableBudget:", hasAvailableBudget);
      console.log("üîç StepChecklist - step.departmentId:", step.departmentId);
      console.log("üîç StepChecklist - currentDeptId:", currentDeptId);
      console.log("üîç StepChecklist - User role:", (currentUser as any)?.role);
      console.log("üîç StepChecklist - step.isCompleted:", step.isCompleted);
      
      // SEMPRE mostrar se h√° disponibilidade or√ßament√°ria E se n√£o est√° conclu√≠da
      // Admin pode ver independente do departamento
      const canViewStep = hasAvailableBudget && !step.isCompleted && (
        (currentUser as any)?.role === 'admin' || 
        step.departmentId === currentDeptId
      );
      
      console.log("üîçüîçüîç StepChecklist - RESULTADO - Vai mostrar etapa:", canViewStep);
      return canViewStep;
    }
    
    // Para outras etapas, mostrar apenas n√£o conclu√≠das
    // IMPORTANTE: Administrador pode ver etapas de todos os departamentos
    if ((currentUser as any)?.role === 'admin') {
      return !step.isCompleted; // Admin v√™ todas as etapas n√£o conclu√≠das
    }
    return step.departmentId === currentDeptId && !step.isCompleted;
  }) || [];
  
  // REMOVIDO: Sistema de etapas condicionais completamente exclu√≠do

  // Create initial steps if none exist
  useEffect(() => {
    const createInitialSteps = async () => {
      if (steps && steps.length === 0) {
        try {
          const defaultSteps = getDefaultSteps();
          
          for (const step of defaultSteps) {
            await apiRequest("POST", `/api/processes/${processId}/steps`, {
              stepName: step.name,
              departmentId: step.departmentId,
              isCompleted: false,
              observations: step.timeLimit ? `Prazo: ${step.timeLimit}` : null
            });
          }
          
          // Refetch steps after creating them
          queryClient.invalidateQueries({ queryKey: [`/api/processes/${processId}/steps`] });
          
          toast({
            title: "Etapas criadas",
            description: "Etapas padr√£o foram criadas para este processo",
          });
        } catch (error) {
          toast({
            title: "Erro",
            description: "N√£o foi poss√≠vel criar as etapas padr√£o",
            variant: "destructive",
          });
        }
      }
    };
    
    if (steps && steps.length === 0) {
      createInitialSteps();
    }
  }, [steps, processId, queryClient, modalityId, toast]);

  // REMOVIDA: Fun√ß√£o createConditionalStepsIfNeeded 
  // As etapas condicionais agora s√£o criadas apenas AP√ìS a autoriza√ß√£o ser conclu√≠da

  // Effect para EXCLUIR PERMANENTEMENTE as etapas condicionais indesejadas
  useEffect(() => {
    if (steps && processId) {
      const removeConditionalSteps = async () => {
        // Remover PERMANENTEMENTE todas as etapas condicionais
        for (const stepName of conditionalStepNames) {
          const existingStep = steps.find(s => s.stepName === stepName && s.departmentId === 5);
          if (existingStep) {
            try {
              // Marcar como ETAPA_REMOVIDA para exclus√£o total
              await apiRequest("PATCH", `/api/processes/${processId}/steps/${existingStep.id}`, {
                observations: "ETAPA_REMOVIDA - Etapa condicional exclu√≠da permanentemente",
                isCompleted: false,
                isLocked: false
              });
              console.log(`üóëÔ∏è Etapa condicional EXCLU√çDA: ${stepName}`);
            } catch (error) {
              console.log(`‚ùå Erro ao excluir etapa: ${stepName}`, error);
            }
          }
        }
        
        queryClient.invalidateQueries({ queryKey: [`/api/processes/${processId}/steps`] });
      };
      
      removeConditionalSteps();
    }
  }, [steps, processId]);
  
  const handleStepClick = (step: ProcessStep) => {
    setActiveStep(step);
    setObservation(step.observations || "");
  };
  
  const handleToggleStep = async (step: ProcessStep) => {
    console.log("üîç handleToggleStep chamado:", {
      stepName: step.stepName,
      isCompleted: step.isCompleted,
      stepId: step.id,
      isLocked: step.isLocked
    });
    
    // BLOQUEIO ABSOLUTO: Verificar se a etapa est√° bloqueada primeiro
    if (step.isLocked && !step.isCompleted) {
      console.log("üö´ ETAPA BLOQUEADA - Impedindo a√ß√£o");
      toast({
        title: "Etapa Bloqueada",
        description: "Esta etapa s√≥ pode ser acessada ap√≥s uma decis√£o na 'Autoriza√ß√£o pelo Secret√°rio SEAP'",
        variant: "destructive"
      });
      return;
    }
    
    try {

      // Se √© etapa de Autoriza√ß√£o pelo Secret√°rio SEAP, notificar parent (ProcessDetail.tsx)
      if (step.stepName.includes("Autoriza√ß√£o pelo Secret√°rio SEAP")) {
        console.log("üî• StepChecklist - Etapa de Autoriza√ß√£o detectada - notificando ProcessDetail");
        if (onAuthorizationStep) {
          onAuthorizationStep(step);
        } else {
          // Fallback: tentar abrir modal local se callback n√£o existir
          setAuthorizationModalOpen(true);
          setActiveStep(step);
          setAuthorizationDecision("");
        }
        return; // N√ÉO CONTINUA - Etapa s√≥ ser√° conclu√≠da ap√≥s escolher op√ß√£o no modal
      }

      // Se √© etapa "SOLICITAR DISPONIBILIZA√á√ÉO DE OR√áAMENTO", criar pr√≥xima etapa baseada na decis√£o da autoriza√ß√£o
      if (step.stepName === "SOLICITAR DISPONIBILIZA√á√ÉO DE OR√áAMENTO" && !step.isCompleted) {
        // Buscar a etapa de autoriza√ß√£o anterior para saber qual foi a decis√£o
        const authStep = steps?.find(s => s.stepName === "Autoriza√ß√£o pelo Secret√°rio SEAP" && s.isCompleted);
        
        if (authStep?.observations) {
          let nextStepName = "";
          let nextDepartmentId = step.departmentId; // Por padr√£o, mesmo departamento
          
          if (authStep.observations.includes("INDISPONIBILIDADE OR√áAMENT√ÅRIA TOTAL OU PARCIAL")) {
            nextStepName = "Fluxo Repror";
            nextDepartmentId = 4; // Unidade de Or√ßamento e Finan√ßas
          }
          
          // Concluir a etapa atual primeiro
          const updateResponse = await apiRequest("PATCH", `/api/processes/${processId}/steps/${step.id}`, {
            isCompleted: true,
            observations: `Etapa conclu√≠da baseada na decis√£o: ${authStep.observations}`
          });
          
          if (updateResponse.ok && nextStepName) {
            // Criar pr√≥xima etapa
            await apiRequest("POST", `/api/processes/${processId}/steps`, {
              stepName: nextStepName,
              departmentId: nextDepartmentId,
              isCompleted: false,
              observations: `Criada automaticamente ap√≥s conclus√£o de SOLICITAR DISPONIBILIZA√á√ÉO DE OR√áAMENTO`
            });
          }
          
          queryClient.invalidateQueries({ queryKey: [`/api/processes/${processId}/steps`] });
          toast({
            title: "Etapa conclu√≠da",
            description: nextStepName ? `Pr√≥xima etapa: ${nextStepName}` : "Etapa conclu√≠da com sucesso"
          });
          return;
        }
      }

      // Se √© etapa "Autorizar via sistema", verificar se est√° sendo aprovada ou reprovada
      if (step.stepName === "Autorizar via sistema" && !step.isCompleted) {
        // Para esta etapa, vamos usar um modal de confirma√ß√£o para aprovar/reprovar
        const userDecision = window.confirm(
          "Escolha a a√ß√£o para 'Autorizar via sistema':\n\n" +
          "OK = APROVAR (Arquivar processo automaticamente)\n" +
          "Cancelar = REPROVAR (Voltar para 'Autorizar Emiss√£o de R.O')"
        );

        if (userDecision) {
          // APROVAR: Concluir etapa e arquivar processo
          const updateResponse = await apiRequest("PATCH", `/api/processes/${processId}/steps/${step.id}`, {
            isCompleted: true,
            observations: "Aprovado - Processo arquivado automaticamente"
          });
          
          if (updateResponse.ok) {
            // Arquivar o processo automaticamente
            const archiveResponse = await apiRequest("DELETE", `/api/processes/${processId}`, {
              reason: "Autorizado via sistema - Secret√°rio de Estado da Administra√ß√£o Penitenci√°ria - SEAP"
            });
            
            if (archiveResponse.ok) {
              queryClient.invalidateQueries({ queryKey: ["/api/processes"] });
              toast({
                title: "Processo Autorizado e Arquivado",
                description: "Autoriza√ß√£o via sistema conclu√≠da. Processo arquivado automaticamente.",
                variant: "default"
              });
              
              // Redirecionar para lista de processos
              setTimeout(() => {
                window.location.href = "/processes";
              }, 2000);
            }
          }
        } else {
          // REPROVAR: Voltar para etapa anterior e tornar "Autorizar Emiss√£o de R.O" vis√≠vel novamente
          // 1. Marcar "Autorizar via sistema" como invis√≠vel/incompleta
          const hideSystemStep = await apiRequest("PATCH", `/api/processes/${processId}/steps/${step.id}`, {
            isVisible: false,
            isCompleted: false,
            observations: "Reprovado - Retornando para etapa anterior"
          });
          
          if (hideSystemStep.ok) {
            // 2. Buscar e marcar "Autorizar Emiss√£o de R.O" como incompleta e vis√≠vel
            const stepsResponse = await apiRequest("GET", `/api/processes/${processId}/steps`);
            const currentSteps = await stepsResponse.json();
            const authorizeRoStep = currentSteps.find((s: any) => s.stepName === "Autorizar Emiss√£o de R.O");
            
            if (authorizeRoStep) {
              await apiRequest("PATCH", `/api/processes/${processId}/steps/${authorizeRoStep.id}`, {
                isCompleted: false,
                isVisible: true,
                observations: "Retornado da etapa 'Autorizar via sistema' - requer nova autoriza√ß√£o"
              });
            }
            
            queryClient.invalidateQueries({ queryKey: [`/api/processes/${processId}/steps`] });
            toast({
              title: "Autoriza√ß√£o Reprovada",
              description: "Processo retornado para a etapa 'Autorizar Emiss√£o de R.O'",
              variant: "default"
            });
          }
        }
        return;
      }

      // Se √© etapa "Fluxo Repror", arquivar automaticamente quando conclu√≠da
      if (step.stepName === "Fluxo Repror" && !step.isCompleted) {
        // Concluir a etapa
        const updateResponse = await apiRequest("PATCH", `/api/processes/${processId}/steps/${step.id}`, {
          isCompleted: true,
          observations: "Fluxo Repror conclu√≠do - processo ser√° arquivado automaticamente"
        });
        
        if (updateResponse.ok) {
          // Arquivar o processo automaticamente
          const archiveResponse = await apiRequest("DELETE", `/api/processes/${processId}`, {
            reason: "Processo arquivado automaticamente ap√≥s conclus√£o do Fluxo Repror (Indisponibilidade Or√ßament√°ria)"
          });
          
          if (archiveResponse.ok) {
            queryClient.invalidateQueries({ queryKey: ["/api/processes"] });
            toast({
              title: "Processo arquivado",
              description: "Fluxo Repror conclu√≠do. Processo arquivado automaticamente por indisponibilidade or√ßament√°ria.",
              variant: "default"
            });
            
            // Redirecionar para lista de processos
            setTimeout(() => {
              window.location.href = "/processes";
            }, 2000);
          }
        }
        return;
      }

      // Se a etapa n√£o existe, criar primeiro
      if (!step.id) {
        const createResponse = await apiRequest("POST", `/api/processes/${processId}/steps`, {
          stepName: step.stepName,
          departmentId: step.departmentId,
          isCompleted: true,
          observations: null,
          isLocked: step.isLocked || false
        });
        
        if (createResponse.ok) {
          // Refetch steps after creating
          queryClient.invalidateQueries({ queryKey: [`/api/processes/${processId}/steps`] });
          
          toast({
            title: "Etapa criada e conclu√≠da",
            description: `Etapa "${step.stepName}" foi criada e marcada como conclu√≠da`,
          });
        }
      } else {
        // Atualizar etapa existente
        await apiRequest("PATCH", `/api/processes/${processId}/steps/${step.id}`, {
          isCompleted: !step.isCompleted,
          observations: step.observations
        });
        
        // Refetch steps after updating
        queryClient.invalidateQueries({ queryKey: [`/api/processes/${processId}/steps`] });
        
        toast({
          title: step.isCompleted ? "Etapa desmarcada" : "Etapa conclu√≠da",
          description: `Etapa "${step.stepName}" ${step.isCompleted ? "desmarcada" : "marcada como conclu√≠da"}`,
        });
      }
    } catch (error) {
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel atualizar o status da etapa",
        variant: "destructive",
      });
    }
  };
  
  const saveObservation = async () => {
    if (!activeStep) return;
    
    try {
      await apiRequest("PATCH", `/api/processes/${processId}/steps/${activeStep.id}`, {
        observations: observation
      });
      
      // Refetch steps after updating
      queryClient.invalidateQueries({ queryKey: [`/api/processes/${processId}/steps`] });
      
      toast({
        title: "Observa√ß√µes salvas",
        description: "As observa√ß√µes foram salvas com sucesso",
      });
    } catch (error) {
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel salvar as observa√ß√µes",
        variant: "destructive",
      });
    }
  };


  // Fun√ß√£o para completar a autoriza√ß√£o com a decis√£o escolhida
  const handleAuthorizationComplete = async () => {
    if (!activeStep || !authorizationDecision) return;
    
    try {
      // Completar a etapa com a decis√£o de autoriza√ß√£o como observa√ß√£o
      if (!activeStep.id) {
        // Criar etapa se n√£o existe
        await apiRequest("POST", `/api/processes/${processId}/steps`, {
          stepName: activeStep.stepName,
          departmentId: activeStep.departmentId,
          isCompleted: true,
          observations: `AUTORIZA√á√ÉO: ${authorizationDecision}`
        });
      } else {
        // Atualizar etapa existente
        await apiRequest("PATCH", `/api/processes/${processId}/steps/${activeStep.id}`, {
          isCompleted: true,
          observations: `AUTORIZA√á√ÉO: ${authorizationDecision}`
        });
      }
      
      // Se a decis√£o for "DISPONIBILIDADE OR√áAMENT√ÅRIA", criar a etapa "Autorizar Emiss√£o de R.O"
      if (authorizationDecision === "DISPONIBILIDADE OR√áAMENT√ÅRIA") {
        console.log("üî•üî•üî• StepChecklist - Criando etapa 'Autorizar Emiss√£o de R.O' para disponibilidade or√ßament√°ria");
        
        try {
          // Verificar se a etapa j√° existe
          const stepsResponse = await apiRequest("GET", `/api/processes/${processId}/steps`);
          const currentSteps = await stepsResponse.json();
          const authRoStepExists = currentSteps.find((s: any) => s.stepName === "Autorizar Emiss√£o de R.O");
          
          if (!authRoStepExists) {
            // Criar etapa "Autorizar Emiss√£o de R.O" no setor SEAP (ID 5)
            console.log("üî•üî•üî• StepChecklist - Criando etapa no departamento SEAP (ID: 5)");
            const authRoResponse = await apiRequest(
              "POST",
              `/api/processes/${processId}/steps`,
              {
                stepName: "Autorizar Emiss√£o de R.O",
                departmentId: 5, // SEAP - Secret√°rio de Estado da Administra√ß√£o Penitenci√°ria
                phase: "Execu√ß√£o",
              },
            );

            if (authRoResponse.ok) {
              console.log("‚úÖ‚úÖ‚úÖ StepChecklist - Etapa 'Autorizar Emiss√£o de R.O' criada com sucesso");
              const createdStep = await authRoResponse.json();
              console.log("üî• StepChecklist - Dados da etapa criada:", createdStep);
            } else {
              console.error("‚ùå‚ùå‚ùå StepChecklist - Erro ao criar etapa 'Autorizar Emiss√£o de R.O'");
              const errorData = await authRoResponse.text();
              console.error("üî• StepChecklist - Erro detalhes:", errorData);
            }
          } else {
            console.log("‚úÖ StepChecklist - Etapa 'Autorizar Emiss√£o de R.O' j√° existe");
          }
        } catch (etapasError) {
          console.error("‚ùå StepChecklist - Erro ao verificar/criar etapa:", etapasError);
        }
      }

      // Liberar etapa espec√≠fica baseada na decis√£o  
      let stepToUnlock = "";
      if (authorizationDecision === "INDISPONIBILIDADE OR√áAMENT√ÅRIA TOTAL OU PARCIAL") {
        stepToUnlock = "Solicitar disponibiliza√ß√£o de or√ßamento";
      } else if (authorizationDecision === "DISPONIBILIDADE OR√áAMENT√ÅRIA") {
        stepToUnlock = "Autorizar emiss√£o de R.O.";
      }
      
      // Liberar a etapa correspondente
      if (stepToUnlock) {
        const stepToUnlockObj = steps?.find(s => s.stepName === stepToUnlock && s.departmentId === 5);
        if (stepToUnlockObj) {
          await apiRequest("PATCH", `/api/processes/${processId}/steps/${stepToUnlockObj.id}`, {
            observations: `Etapa liberada pela decis√£o: ${authorizationDecision}`,
            isLocked: false // Desbloquear a etapa
          });
        }
      }
      
      // Refetch steps after updating
      queryClient.invalidateQueries({ queryKey: [`/api/processes/${processId}/steps`] });
      
      toast({
        title: "Etapa de Autoriza√ß√£o conclu√≠da",
        description: `Decis√£o: ${authorizationDecision}`,
      });
      
      // Limpar estados e fechar modal
      setAuthorizationModalOpen(false);
      setAuthorizationDecision("");
      setActiveStep(null);
      
    } catch (error) {
      toast({
        title: "Erro",
        description: "N√£o foi poss√≠vel completar a autoriza√ß√£o",
        variant: "destructive",
      });
    }
  };



  
  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Checklist de Etapas</CardTitle>
        </CardHeader>
        <CardContent>
          <p>Carregando etapas...</p>
        </CardContent>
      </Card>
    );
  }
  
  if (error || !steps) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Checklist de Etapas</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-red-500">Erro ao carregar etapas</p>
        </CardContent>
      </Card>
    );
  }
  
  // Agrupar etapas filtradas por fase
  const stepsByPhase = filteredSteps?.reduce((acc, step) => {
    // Extrair fase do nome da etapa ou usar uma fase padr√£o
    let phase = "Execu√ß√£o";
    if (step.stepName.includes("DFD") || step.stepName.includes("ETP") || step.stepName.includes("Mapa de Risco") || step.stepName.includes("Termo de Refer√™ncia") || step.stepName.includes("Ordenador")) {
      phase = "Inicia√ß√£o";
    } else if (step.stepName.includes("Processo no √ìrg√£o") || step.stepName.includes("Pesquisa") || step.stepName.includes("Or√ßament") || step.stepName.includes("Reserva")) {
      phase = "Prepara√ß√£o";
    } else if (step.stepName.includes("Elabora√ß√£o") || step.stepName.includes("Contrato") || step.stepName.includes("Assinatura") || step.stepName.includes("Adjudica") || step.stepName.includes("Homologa")) {
      phase = "Finaliza√ß√£o";
    }
    
    if (!acc[phase]) acc[phase] = [];
    acc[phase].push(step);
    return acc;
  }, {} as Record<string, typeof filteredSteps>) || {};

  const phaseOrder = ["Inicia√ß√£o", "Prepara√ß√£o", "Execu√ß√£o", "Finaliza√ß√£o"];
  const phaseColors = {
    "Inicia√ß√£o": "bg-blue-50 border-blue-200",
    "Prepara√ß√£o": "bg-yellow-50 border-yellow-200", 
    "Execu√ß√£o": "bg-green-50 border-green-200",
    "Finaliza√ß√£o": "bg-purple-50 border-purple-200"
  };

  // Debug do estado do modal
  console.log("üî• StepChecklist renderizando - authorizationModalOpen:", authorizationModalOpen);

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            Checklist - Fluxograma Preg√£o Eletr√¥nico
            <span className="text-sm font-normal text-gray-500">SEAP/PB</span>
          </CardTitle>
          <p className="text-sm text-gray-600">
            Siga as etapas conforme o fluxograma oficial da Lei n¬∫ 14.133/2021
          </p>
        </CardHeader>
        <CardContent>
          {steps.length === 0 ? (
            <p>Nenhuma etapa cadastrada para este processo</p>
          ) : (
            <div className="space-y-6">
              {/* Resumo de etapas conclu√≠das */}
              {(() => {
                const currentDeptId = departmentMap[userDepartment];
                const allSectorSteps = steps?.filter(step => 
                  step.departmentId === currentDeptId && 
                  step.stepName !== "Transfer√™ncia de Setor"
                ) || [];
                const completedSteps = allSectorSteps.filter(step => step.isCompleted);
                
                if (completedSteps.length > 0) {
                  return (
                    <div className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center justify-between">
                        <span className="text-sm font-medium text-green-800">
                          ‚úì {completedSteps.length} de {allSectorSteps.length} etapas conclu√≠das
                        </span>
                        <span className="text-xs text-green-600">
                          (etapas conclu√≠das ocultas)
                        </span>
                      </div>
                    </div>
                  );
                }
                return null;
              })()}
              
              {phaseOrder.map((phase) => {
                const phaseSteps = stepsByPhase[phase] || [];
                if (phaseSteps.length === 0) return null;
                
                return (
                  <div key={phase} className={`p-4 rounded-lg border-2 ${phaseColors[phase as keyof typeof phaseColors]}`}>
                    <h3 className="font-semibold text-sm mb-3 uppercase tracking-wide">{phase}</h3>
                    <div className="space-y-3">
                      {phaseSteps.map((step) => (
                        <div 
                          key={step.id} 
                          className={`flex items-start space-x-3 p-3 rounded-md border ${
                            step.isLocked && !step.isCompleted ? 
                              "bg-gray-200 border-gray-400 opacity-40" :
                              activeStep && activeStep.id === step.id ? 
                                "bg-white border-blue-500 shadow-md" : 
                                "bg-white border-gray-200"
                          } ${step.isLocked && !step.isCompleted ? "cursor-not-allowed" : "cursor-pointer hover:shadow-sm"} transition-all`}
                          onClick={() => {
                            if (step.isLocked && !step.isCompleted) {
                              toast({
                                title: "‚ùå Etapa Bloqueada", 
                                description: "Esta etapa s√≥ pode ser acessada ap√≥s uma decis√£o na 'Autoriza√ß√£o pelo Secret√°rio SEAP'",
                                variant: "destructive"
                              });
                              return;
                            }
                            handleStepClick(step);
                          }}
                        >
                          <Checkbox 
                            id={`step-${step.id}`} 
                            checked={step.isCompleted || false}
                            disabled={(step.isLocked || false) && !step.isCompleted}
                            onCheckedChange={(checked) => {
                              // Primeira valida√ß√£o: bloquear no frontend
                              if (step.isLocked && !step.isCompleted) {
                                toast({
                                  title: "‚ùå Etapa Bloqueada",
                                  description: "Esta etapa s√≥ pode ser acessada ap√≥s uma decis√£o na 'Autoriza√ß√£o pelo Secret√°rio SEAP'",
                                  variant: "destructive"
                                });
                                return;
                              }
                              handleToggleStep(step);
                            }}
                            onClick={(e) => e.stopPropagation()}
                          />
                          <div className="grid gap-1.5 leading-none flex-1">
                            <Label
                              htmlFor={`step-${step.id}`}
                              className={`text-sm font-medium ${
                                step.isLocked && !step.isCompleted ? "text-gray-400" :
                                step.isCompleted ? "line-through text-gray-500" : 
                                step.observations && step.observations.startsWith("REJEITADA:") ? "text-red-600" :
                                "text-gray-800"
                              }`}
                            >
                              {step.stepName}
                              {step.isLocked && !step.isCompleted && (
                                <span className="ml-2 text-xs bg-red-100 text-red-700 px-2 py-1 rounded font-semibold">
                                  üîí BLOQUEADA
                                </span>
                              )}
                            </Label>
                            <div className="flex items-center gap-3 text-xs text-gray-500">
                              <span>
                                Setor: {departments && Array.isArray(departments) ? 
                                  departments.find((d: any) => d.id === step.departmentId)?.name || `Setor ${step.departmentId}` :
                                  `Setor ${step.departmentId}`
                                }
                              </span>
                              {step.observations && step.observations.includes("Prazo:") && (
                                <span className="text-orange-600 font-medium">
                                  {step.observations}
                                </span>
                              )}
                            </div>
                            {step.completedAt && (
                              <p className="text-xs text-green-600">
                                ‚úì Conclu√≠do em: {new Date(step.completedAt).toLocaleDateString('pt-BR')}
                              </p>
                            )}
                            {step.observations && step.observations.startsWith("REJEITADA:") && (
                              <p className="text-xs text-red-600 font-medium">
                                ‚úó Rejeitada: {step.observations.replace("REJEITADA: ", "")}
                              </p>
                            )}
                          </div>
                          <div className="flex flex-row gap-2 items-center">
                            {/* Bot√£o de Aprovar */}
                            <Button
                              size="sm"
                              variant={step.isCompleted ? "secondary" : "default"}
                              onClick={(e) => {
                                e.stopPropagation();
                                handleToggleStep(step);
                              }}
                              className="h-8 w-8 p-0"
                              title="Aprovar etapa"
                            >
                              <Check className="h-4 w-4" />
                            </Button>
                            
                            {/* Bot√£o de Rejeitar */}
                            <Button
                              size="sm"
                              variant="destructive"
                              onClick={(e) => {
                                e.stopPropagation();
                                if (onStepReject) {
                                  onStepReject(step);
                                } else {
                                  toast({
                                    title: "Erro",
                                    description: "Fun√ß√£o de rejei√ß√£o n√£o configurada",
                                    variant: "destructive",
                                  });
                                }
                              }}
                              className="h-8 w-8 p-0"
                              title="Rejeitar etapa"
                            >
                              <XCircle className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </CardContent>
      </Card>
      
      {activeStep && (
        <Card>
          <CardHeader>
            <CardTitle>Observa√ß√µes</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <p className="text-sm font-medium mb-2">
                  Etapa: {activeStep.stepName === "Autoriza√ß√£o pelo Secret√°rio SEAP" ? "Autoriza√ß√£o" : activeStep.stepName}
                </p>
                <Textarea
                  value={observation}
                  onChange={(e) => setObservation(e.target.value)}
                  placeholder="Adicione observa√ß√µes sobre esta etapa"
                  rows={5}
                />
              </div>
              <Button onClick={saveObservation}>Salvar Observa√ß√µes</Button>
            </div>
          </CardContent>
        </Card>
      )}



    </div>
  );
};

export default StepChecklist;
